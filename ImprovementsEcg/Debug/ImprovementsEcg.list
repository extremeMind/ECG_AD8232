
ImprovementsEcg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800a8c8  0800a8c8  0000b8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad28  0800ad28  0000c470  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad28  0800ad28  0000bd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad30  0800ad30  0000c470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad30  0800ad30  0000bd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad34  0800ad34  0000bd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000470  20000000  0800ad38  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000470  0800b1a8  0000c470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000acc  0800b1a8  0000cacc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c470  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149ab  00000000  00000000  0000c49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318d  00000000  00000000  00020e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00023fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca7  00000000  00000000  000250b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a969  00000000  00000000  00025d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170ba  00000000  00000000  000506c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104c82  00000000  00000000  0006777a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016c3fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005764  00000000  00000000  0016c4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00171c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001099  00000000  00000000  00171c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  00172d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000470 	.word	0x20000470
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a8ac 	.word	0x0800a8ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000474 	.word	0x20000474
 800023c:	0800a8ac 	.word	0x0800a8ac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a2 	b.w	80009c4 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009da:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 80009dc:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <MX_ADC1_Init+0xa0>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 80009e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a0c:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8000a10:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a2c:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a2e:	f000 fda9 	bl	8001584 <HAL_ADC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000a38:	f000 fa54 	bl	8000ee4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a3c:	2309      	movs	r3, #9
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a44:	2307      	movs	r3, #7
 8000a46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_ADC1_Init+0x9c>)
 8000a4e:	f001 f80f 	bl	8001a70 <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a58:	f000 fa44 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000048c 	.word	0x2000048c
 8000a68:	40012000 	.word	0x40012000

08000a6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	@ 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a31      	ldr	r2, [pc, #196]	@ (8000b50 <HAL_ADC_MspInit+0xe4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d15b      	bne.n	8000b46 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <HAL_ADC_MspInit+0xe8>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b54 <HAL_ADC_MspInit+0xe8>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <HAL_ADC_MspInit+0xe8>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <HAL_ADC_MspInit+0xe8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a26      	ldr	r2, [pc, #152]	@ (8000b54 <HAL_ADC_MspInit+0xe8>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <HAL_ADC_MspInit+0xe8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481d      	ldr	r0, [pc, #116]	@ (8000b58 <HAL_ADC_MspInit+0xec>)
 8000ae2:	f002 f835 	bl	8002b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <HAL_ADC_MspInit+0xf4>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b2a:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b2c:	f001 fc06 	bl	800233c <HAL_DMA_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_ADC_MspInit+0xce>
    {
      Error_Handler();
 8000b36:	f000 f9d5 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <HAL_ADC_MspInit+0xf0>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	@ 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40012000 	.word	0x40012000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	200004d4 	.word	0x200004d4
 8000b60:	40026410 	.word	0x40026410

08000b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_DMA_Init+0x60>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <MX_DMA_Init+0x60>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_DMA_Init+0x60>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <MX_DMA_Init+0x60>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <MX_DMA_Init+0x60>)
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <MX_DMA_Init+0x60>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	200e      	movs	r0, #14
 8000ba0:	f001 fb1d 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ba4:	200e      	movs	r0, #14
 8000ba6:	f001 fb36 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2038      	movs	r0, #56	@ 0x38
 8000bb0:	f001 fb15 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bb4:	2038      	movs	r0, #56	@ 0x38
 8000bb6:	f001 fb2e 	bl	8002216 <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_GPIO_Init+0x2c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <MX_GPIO_Init+0x2c>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_GPIO_Init+0x2c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bfe:	f000 f8d9 	bl	8000db4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c02:	f000 fc62 	bl	80014ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c06:	f000 f853 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0a:	f7ff ffdd 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c0e:	f7ff ffa9 	bl	8000b64 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c12:	f7ff fed9 	bl	80009c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c16:	f000 fac9 	bl	80011ac <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000c1a:	f000 fb33 	bl	8001284 <MX_USART3_UART_Init>


  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c1e:	f000 f8b5 	bl	8000d8c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &amplitude, 1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	4913      	ldr	r1, [pc, #76]	@ (8000c74 <main+0x7c>)
 8000c26:	4814      	ldr	r0, [pc, #80]	@ (8000c78 <main+0x80>)
 8000c28:	f000 fe00 	bl	800182c <HAL_ADC_Start_DMA>

  // Inicialização dos filtros FIR
  arm_fir_init_f32(&S_FIR_LP, NUM_TAPS_LP, firCoeffsLP, firStateLP, BLOCK_SIZE);
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <main+0x84>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	@ (8000c80 <main+0x88>)
 8000c34:	2129      	movs	r1, #41	@ 0x29
 8000c36:	4813      	ldr	r0, [pc, #76]	@ (8000c84 <main+0x8c>)
 8000c38:	f005 f862 	bl	8005d00 <arm_fir_init_f32>
  arm_fir_init_f32(&S_FIR_HP, NUM_TAPS_HP, firCoeffsHP, firStateHP, BLOCK_SIZE);
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <main+0x90>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <main+0x94>)
 8000c44:	2165      	movs	r1, #101	@ 0x65
 8000c46:	4812      	ldr	r0, [pc, #72]	@ (8000c90 <main+0x98>)
 8000c48:	f005 f85a 	bl	8005d00 <arm_fir_init_f32>
  arm_fir_init_f32(&S_FIR_MA, NUM_TAPS_MA, firCoeffsMA, firStateMA, BLOCK_SIZE);
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <main+0x9c>)
 8000c52:	4a11      	ldr	r2, [pc, #68]	@ (8000c98 <main+0xa0>)
 8000c54:	2114      	movs	r1, #20
 8000c56:	4811      	ldr	r0, [pc, #68]	@ (8000c9c <main+0xa4>)
 8000c58:	f005 f852 	bl	8005d00 <arm_fir_init_f32>
  // Inicialização do filtro IIR Notch
   arm_biquad_cascade_df1_init_f32(&S_IIR_Notch, 1, iirCoeffsNotch, iirStateNotch);
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <main+0xa8>)
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <main+0xac>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <main+0xb0>)
 8000c64:	f005 facc 	bl	8006200 <arm_biquad_cascade_df1_init_f32>


  HAL_TIM_Base_Start_IT(&htim2);
 8000c68:	4810      	ldr	r0, [pc, #64]	@ (8000cac <main+0xb4>)
 8000c6a:	f003 fa81 	bl	8004170 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6e:	bf00      	nop
 8000c70:	e7fd      	b.n	8000c6e <main+0x76>
 8000c72:	bf00      	nop
 8000c74:	2000080c 	.word	0x2000080c
 8000c78:	2000048c 	.word	0x2000048c
 8000c7c:	20000534 	.word	0x20000534
 8000c80:	20000000 	.word	0x20000000
 8000c84:	200007cc 	.word	0x200007cc
 8000c88:	200005d8 	.word	0x200005d8
 8000c8c:	200000a4 	.word	0x200000a4
 8000c90:	200007d8 	.word	0x200007d8
 8000c94:	2000076c 	.word	0x2000076c
 8000c98:	20000238 	.word	0x20000238
 8000c9c:	200007e4 	.word	0x200007e4
 8000ca0:	200007bc 	.word	0x200007bc
 8000ca4:	20000288 	.word	0x20000288
 8000ca8:	200007f0 	.word	0x200007f0
 8000cac:	20000848 	.word	0x20000848

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	@ 0x50
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2234      	movs	r2, #52	@ 0x34
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fadf 	bl	8007282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <SystemClock_Config+0xd4>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d84 <SystemClock_Config+0xd4>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce0:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <SystemClock_Config+0xd4>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <SystemClock_Config+0xd8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <SystemClock_Config+0xd8>)
 8000cf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <SystemClock_Config+0xd8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d10:	2302      	movs	r3, #2
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d1c:	23d8      	movs	r3, #216	@ 0xd8
 8000d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 f909 	bl	8002f48 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d3c:	f000 f8d2 	bl	8000ee4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d40:	f002 f8b2 	bl	8002ea8 <HAL_PWREx_EnableOverDrive>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d4a:	f000 f8cb 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2302      	movs	r3, #2
 8000d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d64:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fb99 	bl	80034a4 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d78:	f000 f8b4 	bl	8000ee4 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3750      	adds	r7, #80	@ 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
 // HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 // HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	201c      	movs	r0, #28
 8000d96:	f001 fa22 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d9a:	201c      	movs	r0, #28
 8000d9c:	f001 fa3b 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	2027      	movs	r0, #39	@ 0x27
 8000da6:	f001 fa1a 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000daa:	2027      	movs	r0, #39	@ 0x27
 8000dac:	f001 fa33 	bl	8002216 <HAL_NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dc6:	f001 fa41 	bl	800224c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dd6:	231f      	movs	r3, #31
 8000dd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dda:	2387      	movs	r3, #135	@ 0x87
 8000ddc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000de2:	2300      	movs	r3, #0
 8000de4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000df6:	463b      	mov	r3, r7
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fa5f 	bl	80022bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f001 fa3c 	bl	800227c <HAL_MPU_Enable>

}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a25      	ldr	r2, [pc, #148]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d142      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x96>
		inputSample= amplitude;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e28:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e2a:	edc3 7a00 	vstr	s15, [r3]

		 // Passa-Baixo FIR
		 arm_fir_f32(&S_FIR_LP, &inputSample, &tempBuffer1, BLOCK_SIZE);
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e32:	4920      	ldr	r1, [pc, #128]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e34:	4821      	ldr	r0, [pc, #132]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000e36:	f004 ff75 	bl	8005d24 <arm_fir_f32>


		    // Notch IIR
		  arm_biquad_cascade_df1_f32(&S_IIR_Notch, &tempBuffer1, &tempBuffer2, BLOCK_SIZE);
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4a20      	ldr	r2, [pc, #128]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e3e:	491e      	ldr	r1, [pc, #120]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e40:	4820      	ldr	r0, [pc, #128]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e42:	f005 f9eb 	bl	800621c <arm_biquad_cascade_df1_f32>

		    // Passa-Alto FIR
		  arm_fir_f32(&S_FIR_HP, &tempBuffer2, &tempBuffer1, BLOCK_SIZE);
 8000e46:	2301      	movs	r3, #1
 8000e48:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e4a:	491d      	ldr	r1, [pc, #116]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e4c:	481e      	ldr	r0, [pc, #120]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e4e:	f004 ff69 	bl	8005d24 <arm_fir_f32>

		   // Média Móvel FIR
		  arm_fir_f32(&S_FIR_MA, &tempBuffer1, &outputSample, BLOCK_SIZE);
 8000e52:	2301      	movs	r3, #1
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e56:	4918      	ldr	r1, [pc, #96]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e58:	481d      	ldr	r0, [pc, #116]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e5a:	f004 ff63 	bl	8005d24 <arm_fir_f32>

		  uint32_t outputValue = (uint32_t)(outputSample * 1000);
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000ed4 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8000e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e70:	ee17 3a90 	vmov	r3, s15
 8000e74:	60fb      	str	r3, [r7, #12]
		  sprintf((char *)TxBuffer, "<%lu><%lu>\n\r",outputValue,(uint32_t)inputSample);
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e80:	ee17 3a90 	vmov	r3, s15
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4914      	ldr	r1, [pc, #80]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e88:	4814      	ldr	r0, [pc, #80]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e8a:	f006 f997 	bl	80071bc <siprintf>
		  HAL_UART_Transmit_DMA(&huart3, TxBuffer, strlen((const char *)TxBuffer));
 8000e8e:	4813      	ldr	r0, [pc, #76]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e90:	f7ff fa26 	bl	80002e0 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4910      	ldr	r1, [pc, #64]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e9c:	4810      	ldr	r0, [pc, #64]	@ (8000ee0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000e9e:	f003 fe19 	bl	8004ad4 <HAL_UART_Transmit_DMA>




	}
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000848 	.word	0x20000848
 8000eb0:	2000080c 	.word	0x2000080c
 8000eb4:	200007fc 	.word	0x200007fc
 8000eb8:	20000804 	.word	0x20000804
 8000ebc:	200007cc 	.word	0x200007cc
 8000ec0:	20000808 	.word	0x20000808
 8000ec4:	200007f0 	.word	0x200007f0
 8000ec8:	200007d8 	.word	0x200007d8
 8000ecc:	20000800 	.word	0x20000800
 8000ed0:	200007e4 	.word	0x200007e4
 8000ed4:	447a0000 	.word	0x447a0000
 8000ed8:	0800a8c8 	.word	0x0800a8c8
 8000edc:	20000810 	.word	0x20000810
 8000ee0:	20000894 	.word	0x20000894

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <Error_Handler+0x8>

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_MspInit+0x44>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <HAL_MspInit+0x44>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_MspInit+0x44>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <NMI_Handler+0x4>

08000f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <MemManage_Handler+0x4>

08000f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 fad9 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <DMA1_Stream3_IRQHandler+0x10>)
 8000f9e:	f001 fb6d 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000091c 	.word	0x2000091c

08000fac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <ADC_IRQHandler+0x10>)
 8000fb2:	f000 fb2b 	bl	800160c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000048c 	.word	0x2000048c

08000fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <TIM2_IRQHandler+0x10>)
 8000fc6:	f003 f94b 	bl	8004260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000848 	.word	0x20000848

08000fd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <USART3_IRQHandler+0x10>)
 8000fda:	f003 fdf7 	bl	8004bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000894 	.word	0x20000894

08000fe8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <DMA2_Stream0_IRQHandler+0x10>)
 8000fee:	f001 fb45 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200004d4 	.word	0x200004d4

08000ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return 1;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_kill>:

int _kill(int pid, int sig)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001016:	f006 f987 	bl	8007328 <__errno>
 800101a:	4603      	mov	r3, r0
 800101c:	2216      	movs	r2, #22
 800101e:	601a      	str	r2, [r3, #0]
  return -1;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_exit>:

void _exit (int status)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe7 	bl	800100c <_kill>
  while (1) {}    /* Make sure we hang here */
 800103e:	bf00      	nop
 8001040:	e7fd      	b.n	800103e <_exit+0x12>

08001042 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e00a      	b.n	800106a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001054:	f3af 8000 	nop.w
 8001058:	4601      	mov	r1, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	60ba      	str	r2, [r7, #8]
 8001060:	b2ca      	uxtb	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbf0      	blt.n	8001054 <_read+0x12>
  }

  return len;
 8001072:	687b      	ldr	r3, [r7, #4]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e009      	b.n	80010a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	60ba      	str	r2, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbf1      	blt.n	800108e <_write+0x12>
  }
  return len;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_close>:

int _close(int file)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010dc:	605a      	str	r2, [r3, #4]
  return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_isatty>:

int _isatty(int file)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f006 f8ec 	bl	8007328 <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20080000 	.word	0x20080000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000844 	.word	0x20000844
 8001184:	20000ad0 	.word	0x20000ad0

08001188 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_TIM2_Init+0x98>)
 80011cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_TIM2_Init+0x98>)
 80011d4:	22d7      	movs	r2, #215	@ 0xd7
 80011d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_TIM2_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_TIM2_Init+0x98>)
 80011e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_TIM2_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_TIM2_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f2:	4814      	ldr	r0, [pc, #80]	@ (8001244 <MX_TIM2_Init+0x98>)
 80011f4:	f002 ff64 	bl	80040c0 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011fe:	f7ff fe71 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001206:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_TIM2_Init+0x98>)
 8001210:	f003 f92e 	bl	8004470 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800121a:	f7ff fe63 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800121e:	2320      	movs	r3, #32
 8001220:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_TIM2_Init+0x98>)
 800122c:	f003 fb58 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001236:	f7ff fe55 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000848 	.word	0x20000848

08001248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001258:	d10b      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
 	    __HAL_RCC_USART3_CLK_ENABLE();
 800128a:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <MX_USART3_UART_Init+0xc0>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a2d      	ldr	r2, [pc, #180]	@ (8001344 <MX_USART3_UART_Init+0xc0>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <MX_USART3_UART_Init+0xc0>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <MX_USART3_UART_Init+0xc0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <MX_USART3_UART_Init+0xc0>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <MX_USART3_UART_Init+0xc0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ce:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012dc:	2307      	movs	r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	4818      	ldr	r0, [pc, #96]	@ (8001348 <MX_USART3_UART_Init+0xc4>)
 80012e8:	f001 fc32 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <MX_USART3_UART_Init+0xcc>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800132a:	4808      	ldr	r0, [pc, #32]	@ (800134c <MX_USART3_UART_Init+0xc8>)
 800132c:	f003 fb84 	bl	8004a38 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART3_UART_Init+0xb6>
  {
    Error_Handler();
 8001336:	f7ff fdd5 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	20000894 	.word	0x20000894
 8001350:	40004800 	.word	0x40004800

08001354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0ae      	sub	sp, #184	@ 0xb8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2290      	movs	r2, #144	@ 0x90
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f005 ff84 	bl	8007282 <memset>
  if(uartHandle->Instance==USART3)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a39      	ldr	r2, [pc, #228]	@ (8001464 <HAL_UART_MspInit+0x110>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d16a      	bne.n	800145a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001384:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001388:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800138a:	2300      	movs	r3, #0
 800138c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fa6c 	bl	8003870 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139e:	f7ff fda1 	bl	8000ee4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a2:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <HAL_UART_MspInit+0x114>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a30      	ldr	r2, [pc, #192]	@ (8001468 <HAL_UART_MspInit+0x114>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <HAL_UART_MspInit+0x114>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_UART_MspInit+0x114>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a2a      	ldr	r2, [pc, #168]	@ (8001468 <HAL_UART_MspInit+0x114>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <HAL_UART_MspInit+0x114>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ec:	2307      	movs	r3, #7
 80013ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013f6:	4619      	mov	r1, r3
 80013f8:	481c      	ldr	r0, [pc, #112]	@ (800146c <HAL_UART_MspInit+0x118>)
 80013fa:	f001 fba9 	bl	8002b50 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001400:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <HAL_UART_MspInit+0x120>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001406:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800140a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 800140e:	2240      	movs	r2, #64	@ 0x40
 8001410:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 800141a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800141e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800143e:	480c      	ldr	r0, [pc, #48]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001440:	f000 ff7c 	bl	800233c <HAL_DMA_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800144a:	f7ff fd4b 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001452:	671a      	str	r2, [r3, #112]	@ 0x70
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_UART_MspInit+0x11c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	37b8      	adds	r7, #184	@ 0xb8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004800 	.word	0x40004800
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400
 8001470:	2000091c 	.word	0x2000091c
 8001474:	40026058 	.word	0x40026058

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800147c:	f7ff fe84 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	@ (80014c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f005 ff45 	bl	8007334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff fba5 	bl	8000bf8 <main>
  bx  lr    
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 80014bc:	0800ad38 	.word	0x0800ad38
  ldr r2, =_sbss
 80014c0:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 80014c4:	20000acc 	.word	0x20000acc

080014c8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <CAN1_RX0_IRQHandler>

080014ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f000 fe7a 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d4:	200f      	movs	r0, #15
 80014d6:	f000 f805 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014da:	f7ff fd09 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fe95 	bl	8002232 <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 fe5d 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	@ (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000029c 	.word	0x2000029c
 800153c:	200002a4 	.word	0x200002a4
 8001540:	200002a0 	.word	0x200002a0

08001544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200002a4 	.word	0x200002a4
 8001568:	2000097c 	.word	0x2000097c

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000097c 	.word	0x2000097c

08001584 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e031      	b.n	80015fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fa62 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_ADC_Init+0x84>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	f043 0202 	orr.w	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fba2 	bl	8001d1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f023 0303 	bic.w	r3, r3, #3
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ee:	e001      	b.n	80015f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	ffffeefd 	.word	0xffffeefd

0800160c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f003 0320 	and.w	r3, r3, #32
 800163a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d049      	beq.n	80016d6 <HAL_ADC_IRQHandler+0xca>
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d046      	beq.n	80016d6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d12b      	bne.n	80016c6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001672:	2b00      	cmp	r3, #0
 8001674:	d127      	bne.n	80016c6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800168e:	2b00      	cmp	r3, #0
 8001690:	d119      	bne.n	80016c6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0220 	bic.w	r2, r2, #32
 80016a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f9aa 	bl	8001a20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0212 	mvn.w	r2, #18
 80016d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d057      	beq.n	800179c <HAL_ADC_IRQHandler+0x190>
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d054      	beq.n	800179c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d105      	bne.n	800170a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d139      	bne.n	800178c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001730:	2b00      	cmp	r3, #0
 8001732:	d12b      	bne.n	800178c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800173e:	2b00      	cmp	r3, #0
 8001740:	d124      	bne.n	800178c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11d      	bne.n	800178c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001754:	2b00      	cmp	r3, #0
 8001756:	d119      	bne.n	800178c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001766:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fc41 	bl	8002014 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f06f 020c 	mvn.w	r2, #12
 800179a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017aa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d017      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x1d6>
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d014      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10d      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f938 	bl	8001a48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0201 	mvn.w	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017f0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_ADC_IRQHandler+0x218>
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d012      	beq.n	8001824 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f043 0202 	orr.w	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f06f 0220 	mvn.w	r2, #32
 8001812:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f921 	bl	8001a5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f06f 0220 	mvn.w	r2, #32
 8001822:	601a      	str	r2, [r3, #0]
  }
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_Start_DMA+0x1e>
 8001846:	2302      	movs	r3, #2
 8001848:	e0d4      	b.n	80019f4 <HAL_ADC_Start_DMA+0x1c8>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b01      	cmp	r3, #1
 800185e:	d018      	beq.n	8001892 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001870:	4b62      	ldr	r3, [pc, #392]	@ (80019fc <HAL_ADC_Start_DMA+0x1d0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a62      	ldr	r2, [pc, #392]	@ (8001a00 <HAL_ADC_Start_DMA+0x1d4>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9a      	lsrs	r2, r3, #18
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001884:	e002      	b.n	800188c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3b01      	subs	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f9      	bne.n	8001886 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 809c 	bne.w	80019da <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018a6:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <HAL_ADC_Start_DMA+0x1d8>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018dc:	d106      	bne.n	80018ec <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f023 0206 	bic.w	r2, r3, #6
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80018ea:	e002      	b.n	80018f2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fe:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_ADC_Start_DMA+0x1dc>)
 8001900:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001906:	4a41      	ldr	r2, [pc, #260]	@ (8001a0c <HAL_ADC_Start_DMA+0x1e0>)
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190e:	4a40      	ldr	r2, [pc, #256]	@ (8001a10 <HAL_ADC_Start_DMA+0x1e4>)
 8001910:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800191a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800192a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800193a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	334c      	adds	r3, #76	@ 0x4c
 8001946:	4619      	mov	r1, r3
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f000 fda4 	bl	8002498 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001950:	4b30      	ldr	r3, [pc, #192]	@ (8001a14 <HAL_ADC_Start_DMA+0x1e8>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10f      	bne.n	800197c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d143      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	e03a      	b.n	80019f2 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a25      	ldr	r2, [pc, #148]	@ (8001a18 <HAL_ADC_Start_DMA+0x1ec>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10e      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x178>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d107      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019a2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <HAL_ADC_Start_DMA+0x1e8>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d120      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_ADC_Start_DMA+0x1f0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d11b      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x1c6>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d114      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e00b      	b.n	80019f2 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f043 0210 	orr.w	r2, r3, #16
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000029c 	.word	0x2000029c
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	fffff8fe 	.word	0xfffff8fe
 8001a08:	08001f11 	.word	0x08001f11
 8001a0c:	08001fcb 	.word	0x08001fcb
 8001a10:	08001fe7 	.word	0x08001fe7
 8001a14:	40012300 	.word	0x40012300
 8001a18:	40012000 	.word	0x40012000
 8001a1c:	40012200 	.word	0x40012200

08001a20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x1c>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e136      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x28a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b09      	cmp	r3, #9
 8001a9a:	d93a      	bls.n	8001b12 <HAL_ADC_ConfigChannel+0xa2>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001aa4:	d035      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68d9      	ldr	r1, [r3, #12]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b1e      	subs	r3, #30
 8001abc:	2207      	movs	r2, #7
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	400a      	ands	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a8d      	ldr	r2, [pc, #564]	@ (8001d08 <HAL_ADC_ConfigChannel+0x298>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10a      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68d9      	ldr	r1, [r3, #12]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	061a      	lsls	r2, r3, #24
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	e035      	b.n	8001b58 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4403      	add	r3, r0
 8001b04:	3b1e      	subs	r3, #30
 8001b06:	409a      	lsls	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b10:	e022      	b.n	8001b58 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6919      	ldr	r1, [r3, #16]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	2207      	movs	r2, #7
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	400a      	ands	r2, r1
 8001b34:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6919      	ldr	r1, [r3, #16]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	4603      	mov	r3, r0
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4403      	add	r3, r0
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d824      	bhi.n	8001baa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b05      	subs	r3, #5
 8001b72:	221f      	movs	r2, #31
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	400a      	ands	r2, r1
 8001b80:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b05      	subs	r3, #5
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ba8:	e04c      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d824      	bhi.n	8001bfc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3b23      	subs	r3, #35	@ 0x23
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b23      	subs	r3, #35	@ 0x23
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bfa:	e023      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b41      	subs	r3, #65	@ 0x41
 8001c0e:	221f      	movs	r2, #31
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43da      	mvns	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b41      	subs	r3, #65	@ 0x41
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <HAL_ADC_ConfigChannel+0x29c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1f4>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c56:	d105      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001c58:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c5e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001c62:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <HAL_ADC_ConfigChannel+0x29c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10f      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x21e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d10b      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001c76:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a25      	ldr	r2, [pc, #148]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c80:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001c82:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <HAL_ADC_ConfigChannel+0x29c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d12b      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x280>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <HAL_ADC_ConfigChannel+0x298>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d003      	beq.n	8001caa <HAL_ADC_ConfigChannel+0x23a>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d122      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cb0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001cb4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a15      	ldr	r2, [pc, #84]	@ (8001d10 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cc0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <HAL_ADC_ConfigChannel+0x298>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_ADC_ConfigChannel+0x2a4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	@ (8001d18 <HAL_ADC_ConfigChannel+0x2a8>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0c9a      	lsrs	r2, r3, #18
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ce2:	e002      	b.n	8001cea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f9      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	10000012 	.word	0x10000012
 8001d0c:	40012000 	.word	0x40012000
 8001d10:	40012300 	.word	0x40012300
 8001d14:	2000029c 	.word	0x2000029c
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d24:	4b78      	ldr	r3, [pc, #480]	@ (8001f08 <ADC_Init+0x1ec>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a77      	ldr	r2, [pc, #476]	@ (8001f08 <ADC_Init+0x1ec>)
 8001d2a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001d2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d30:	4b75      	ldr	r3, [pc, #468]	@ (8001f08 <ADC_Init+0x1ec>)
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4973      	ldr	r1, [pc, #460]	@ (8001f08 <ADC_Init+0x1ec>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	021a      	lsls	r2, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	4a58      	ldr	r2, [pc, #352]	@ (8001f0c <ADC_Init+0x1f0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6899      	ldr	r1, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6899      	ldr	r1, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	e00f      	b.n	8001e16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0202 	bic.w	r2, r2, #2
 8001e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	005a      	lsls	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	035a      	lsls	r2, r3, #13
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	e007      	b.n	8001e8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	051a      	lsls	r2, r3, #20
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ece:	025a      	lsls	r2, r3, #9
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	029a      	lsls	r2, r3, #10
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40012300 	.word	0x40012300
 8001f0c:	0f000001 	.word	0x0f000001

08001f10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d13c      	bne.n	8001fa4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d12b      	bne.n	8001f9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d127      	bne.n	8001f9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d119      	bne.n	8001f9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0220 	bic.w	r2, r2, #32
 8001f76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff fd3f 	bl	8001a20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fa2:	e00e      	b.n	8001fc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff fd53 	bl	8001a5c <HAL_ADC_ErrorCallback>
}
 8001fb6:	e004      	b.n	8001fc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff fd2b 	bl	8001a34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2240      	movs	r2, #64	@ 0x40
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff fd28 	bl	8001a5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <__NVIC_SetPriorityGrouping+0x40>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <__NVIC_SetPriorityGrouping+0x44>)
 8002052:	4313      	orrs	r3, r2
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <__NVIC_SetPriorityGrouping+0x40>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00
 800206c:	05fa0000 	.word	0x05fa0000

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	@ (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	@ (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	@ (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002250:	f3bf 8f5f 	dmb	sy
}
 8002254:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_MPU_Disable+0x28>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <HAL_MPU_Disable+0x28>)
 800225c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002260:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_MPU_Disable+0x2c>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00
 8002278:	e000ed90 	.word	0xe000ed90

0800227c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_MPU_Enable+0x38>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_MPU_Enable+0x3c>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_MPU_Enable+0x3c>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002298:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800229a:	f3bf 8f4f 	dsb	sy
}
 800229e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022a0:	f3bf 8f6f 	isb	sy
}
 80022a4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed90 	.word	0xe000ed90
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	785a      	ldrb	r2, [r3, #1]
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_MPU_ConfigRegion+0x7c>)
 80022ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <HAL_MPU_ConfigRegion+0x7c>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_MPU_ConfigRegion+0x7c>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022d8:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <HAL_MPU_ConfigRegion+0x7c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7b1b      	ldrb	r3, [r3, #12]
 80022e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7adb      	ldrb	r3, [r3, #11]
 80022ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7a9b      	ldrb	r3, [r3, #10]
 80022f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7b5b      	ldrb	r3, [r3, #13]
 80022fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7b9b      	ldrb	r3, [r3, #14]
 8002302:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7bdb      	ldrb	r3, [r3, #15]
 800230a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800230c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7a5b      	ldrb	r3, [r3, #9]
 8002312:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7a1b      	ldrb	r3, [r3, #8]
 800231a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800231c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002326:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002328:	6113      	str	r3, [r2, #16]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed90 	.word	0xe000ed90

0800233c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff f910 	bl	800156c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e099      	b.n	800248c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e00f      	b.n	800239a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff f8f7 	bl	800156c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d908      	bls.n	800239a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e078      	b.n	800248c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e8      	bne.n	800237a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4b38      	ldr	r3, [pc, #224]	@ (8002494 <HAL_DMA_Init+0x158>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d107      	bne.n	8002404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	4313      	orrs	r3, r2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	2b04      	cmp	r3, #4
 800242c:	d117      	bne.n	800245e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fb09 	bl	8002a58 <DMA_CheckFifoParam>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800245a:	2301      	movs	r3, #1
 800245c:	e016      	b.n	800248c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fac0 	bl	80029ec <DMA_CalcBaseAndBitshift>
 800246c:	4603      	mov	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002474:	223f      	movs	r2, #63	@ 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	e010803f 	.word	0xe010803f

08002498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Start_IT+0x26>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e048      	b.n	8002550 <HAL_DMA_Start_IT+0xb8>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d137      	bne.n	8002542 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fa52 	bl	8002990 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	223f      	movs	r2, #63	@ 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0216 	orr.w	r2, r2, #22
 8002506:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002516:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e005      	b.n	800254e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002564:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002566:	f7ff f801 	bl	800156c <HAL_GetTick>
 800256a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d008      	beq.n	800258a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e052      	b.n	8002630 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0216 	bic.w	r2, r2, #22
 8002598:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_DMA_Abort+0x62>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0208 	bic.w	r2, r2, #8
 80025c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025da:	e013      	b.n	8002604 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025dc:	f7fe ffc6 	bl	800156c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d90c      	bls.n	8002604 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e015      	b.n	8002630 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e4      	bne.n	80025dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	223f      	movs	r2, #63	@ 0x3f
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d004      	beq.n	8002656 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2280      	movs	r2, #128	@ 0x80
 8002650:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00c      	b.n	8002670 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2205      	movs	r2, #5
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002688:	4b8e      	ldr	r3, [pc, #568]	@ (80028c4 <HAL_DMA_IRQHandler+0x248>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a8e      	ldr	r2, [pc, #568]	@ (80028c8 <HAL_DMA_IRQHandler+0x24c>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0a9b      	lsrs	r3, r3, #10
 8002694:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	2208      	movs	r2, #8
 80026a8:	409a      	lsls	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01a      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0204 	bic.w	r2, r2, #4
 80026ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	2208      	movs	r2, #8
 80026d6:	409a      	lsls	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	2201      	movs	r2, #1
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270a:	2201      	movs	r2, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002716:	f043 0202 	orr.w	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	2204      	movs	r2, #4
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	2204      	movs	r2, #4
 8002742:	409a      	lsls	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0204 	orr.w	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	2210      	movs	r2, #16
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d043      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03c      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002776:	2210      	movs	r2, #16
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d018      	beq.n	80027be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d024      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
 80027aa:	e01f      	b.n	80027ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	e016      	b.n	80027ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0208 	bic.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	2220      	movs	r2, #32
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 808f 	beq.w	800291c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8087 	beq.w	800291c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	2220      	movs	r2, #32
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b05      	cmp	r3, #5
 8002824:	d136      	bne.n	8002894 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0216 	bic.w	r2, r2, #22
 8002834:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002844:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <HAL_DMA_IRQHandler+0x1da>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0208 	bic.w	r2, r2, #8
 8002864:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	223f      	movs	r2, #63	@ 0x3f
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	d07e      	beq.n	8002988 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
        }
        return;
 8002892:	e079      	b.n	8002988 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01d      	beq.n	80028de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10d      	bne.n	80028cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d031      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
 80028c0:	e02c      	b.n	800291c <HAL_DMA_IRQHandler+0x2a0>
 80028c2:	bf00      	nop
 80028c4:	2000029c 	.word	0x2000029c
 80028c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	e01e      	b.n	800291c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0210 	bic.w	r2, r2, #16
 80028fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	2b00      	cmp	r3, #0
 8002922:	d032      	beq.n	800298a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2205      	movs	r2, #5
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3301      	adds	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	429a      	cmp	r2, r3
 8002952:	d307      	bcc.n	8002964 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f2      	bne.n	8002948 <HAL_DMA_IRQHandler+0x2cc>
 8002962:	e000      	b.n	8002966 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002964:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e000      	b.n	800298a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002988:	bf00      	nop
    }
  }
}
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b40      	cmp	r3, #64	@ 0x40
 80029bc:	d108      	bne.n	80029d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ce:	e007      	b.n	80029e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3b10      	subs	r3, #16
 80029fc:	4a13      	ldr	r2, [pc, #76]	@ (8002a4c <DMA_CalcBaseAndBitshift+0x60>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <DMA_CalcBaseAndBitshift+0x64>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d908      	bls.n	8002a2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <DMA_CalcBaseAndBitshift+0x68>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	1d1a      	adds	r2, r3, #4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a2a:	e006      	b.n	8002a3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <DMA_CalcBaseAndBitshift+0x68>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	aaaaaaab 	.word	0xaaaaaaab
 8002a50:	0800a8f0 	.word	0x0800a8f0
 8002a54:	fffffc00 	.word	0xfffffc00

08002a58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11f      	bne.n	8002ab2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d856      	bhi.n	8002b26 <DMA_CheckFifoParam+0xce>
 8002a78:	a201      	add	r2, pc, #4	@ (adr r2, 8002a80 <DMA_CheckFifoParam+0x28>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002aa3 	.word	0x08002aa3
 8002a88:	08002a91 	.word	0x08002a91
 8002a8c:	08002b27 	.word	0x08002b27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d046      	beq.n	8002b2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa0:	e043      	b.n	8002b2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aaa:	d140      	bne.n	8002b2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e03d      	b.n	8002b2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aba:	d121      	bne.n	8002b00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d837      	bhi.n	8002b32 <DMA_CheckFifoParam+0xda>
 8002ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac8 <DMA_CheckFifoParam+0x70>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002ad9 	.word	0x08002ad9
 8002acc:	08002adf 	.word	0x08002adf
 8002ad0:	08002ad9 	.word	0x08002ad9
 8002ad4:	08002af1 	.word	0x08002af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e030      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d025      	beq.n	8002b36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aee:	e022      	b.n	8002b36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002af8:	d11f      	bne.n	8002b3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002afe:	e01c      	b.n	8002b3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d903      	bls.n	8002b0e <DMA_CheckFifoParam+0xb6>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d003      	beq.n	8002b14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b0c:	e018      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      break;
 8002b12:	e015      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	e00b      	b.n	8002b3e <DMA_CheckFifoParam+0xe6>
      break;
 8002b26:	bf00      	nop
 8002b28:	e00a      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e008      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e006      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b32:	bf00      	nop
 8002b34:	e004      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	@ 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e175      	b.n	8002e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f040 8164 	bne.w	8002e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d005      	beq.n	8002ba6 <HAL_GPIO_Init+0x56>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d130      	bne.n	8002c08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0201 	and.w	r2, r3, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d017      	beq.n	8002c44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d123      	bne.n	8002c98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80be 	beq.w	8002e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	4b66      	ldr	r3, [pc, #408]	@ (8002e74 <HAL_GPIO_Init+0x324>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	4a65      	ldr	r2, [pc, #404]	@ (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce6:	4b63      	ldr	r3, [pc, #396]	@ (8002e74 <HAL_GPIO_Init+0x324>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cf2:	4a61      	ldr	r2, [pc, #388]	@ (8002e78 <HAL_GPIO_Init+0x328>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a58      	ldr	r2, [pc, #352]	@ (8002e7c <HAL_GPIO_Init+0x32c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d037      	beq.n	8002d8e <HAL_GPIO_Init+0x23e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a57      	ldr	r2, [pc, #348]	@ (8002e80 <HAL_GPIO_Init+0x330>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_GPIO_Init+0x23a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a56      	ldr	r2, [pc, #344]	@ (8002e84 <HAL_GPIO_Init+0x334>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x236>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a55      	ldr	r2, [pc, #340]	@ (8002e88 <HAL_GPIO_Init+0x338>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x232>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a54      	ldr	r2, [pc, #336]	@ (8002e8c <HAL_GPIO_Init+0x33c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x22e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a53      	ldr	r2, [pc, #332]	@ (8002e90 <HAL_GPIO_Init+0x340>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x22a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	@ (8002e94 <HAL_GPIO_Init+0x344>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	@ (8002e98 <HAL_GPIO_Init+0x348>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	@ (8002e9c <HAL_GPIO_Init+0x34c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea0 <HAL_GPIO_Init+0x350>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d66:	2309      	movs	r3, #9
 8002d68:	e012      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	e010      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e00e      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d72:	2307      	movs	r3, #7
 8002d74:	e00c      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d76:	2306      	movs	r3, #6
 8002d78:	e00a      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x240>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	@ (8002e78 <HAL_GPIO_Init+0x328>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a34      	ldr	r2, [pc, #208]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e02:	4b28      	ldr	r3, [pc, #160]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <HAL_GPIO_Init+0x354>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f ae86 	bls.w	8002b70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	@ 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40021400 	.word	0x40021400
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40021c00 	.word	0x40021c00
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40022400 	.word	0x40022400
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eca:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1d      	ldr	r2, [pc, #116]	@ (8002f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed6:	f7fe fb49 	bl	800156c <HAL_GetTick>
 8002eda:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002edc:	e009      	b.n	8002ef2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ede:	f7fe fb45 	bl	800156c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eec:	d901      	bls.n	8002ef2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e022      	b.n	8002f38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ef2:	4b14      	ldr	r3, [pc, #80]	@ (8002f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002efe:	d1ee      	bne.n	8002ede <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f00:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0f      	ldr	r2, [pc, #60]	@ (8002f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f0c:	f7fe fb2e 	bl	800156c <HAL_GetTick>
 8002f10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f12:	e009      	b.n	8002f28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f14:	f7fe fb2a 	bl	800156c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f22:	d901      	bls.n	8002f28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e007      	b.n	8002f38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f34:	d1ee      	bne.n	8002f14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000

08002f48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e29b      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8087 	beq.w	800307a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f6c:	4b96      	ldr	r3, [pc, #600]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d00c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f78:	4b93      	ldr	r3, [pc, #588]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_OscConfig+0x62>
 8002f84:	4b90      	ldr	r3, [pc, #576]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f90:	d10b      	bne.n	8002faa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f92:	4b8d      	ldr	r3, [pc, #564]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d06c      	beq.n	8003078 <HAL_RCC_OscConfig+0x130>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d168      	bne.n	8003078 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e275      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x7a>
 8002fb4:	4b84      	ldr	r3, [pc, #528]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a83      	ldr	r2, [pc, #524]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	e02e      	b.n	8003020 <HAL_RCC_OscConfig+0xd8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x9c>
 8002fca:	4b7f      	ldr	r3, [pc, #508]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7e      	ldr	r2, [pc, #504]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b7c      	ldr	r3, [pc, #496]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7b      	ldr	r2, [pc, #492]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e01d      	b.n	8003020 <HAL_RCC_OscConfig+0xd8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0xc0>
 8002fee:	4b76      	ldr	r3, [pc, #472]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a75      	ldr	r2, [pc, #468]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b73      	ldr	r3, [pc, #460]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a72      	ldr	r2, [pc, #456]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0xd8>
 8003008:	4b6f      	ldr	r3, [pc, #444]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6e      	ldr	r2, [pc, #440]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 800300e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b6c      	ldr	r3, [pc, #432]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6b      	ldr	r2, [pc, #428]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 800301a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800301e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe faa0 	bl	800156c <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe fa9c 	bl	800156c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	@ 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e229      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b61      	ldr	r3, [pc, #388]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0xe8>
 800304e:	e014      	b.n	800307a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fa8c 	bl	800156c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe fa88 	bl	800156c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	@ 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e215      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	4b57      	ldr	r3, [pc, #348]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x110>
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d069      	beq.n	800315a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003086:	4b50      	ldr	r3, [pc, #320]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003092:	4b4d      	ldr	r3, [pc, #308]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b08      	cmp	r3, #8
 800309c:	d11c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x190>
 800309e:	4b4a      	ldr	r3, [pc, #296]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d116      	bne.n	80030d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x17a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e1e9      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b41      	ldr	r3, [pc, #260]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	493d      	ldr	r1, [pc, #244]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	e040      	b.n	800315a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e0:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a38      	ldr	r2, [pc, #224]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fa3e 	bl	800156c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f4:	f7fe fa3a 	bl	800156c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1c7      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	4b30      	ldr	r3, [pc, #192]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b2d      	ldr	r3, [pc, #180]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4929      	ldr	r1, [pc, #164]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
 8003126:	e018      	b.n	800315a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003128:	4b27      	ldr	r3, [pc, #156]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a26      	ldr	r2, [pc, #152]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe fa1a 	bl	800156c <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313c:	f7fe fa16 	bl	800156c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1a3      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	4b1e      	ldr	r3, [pc, #120]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d038      	beq.n	80031d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d019      	beq.n	80031a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003172:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe f9f7 	bl	800156c <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003182:	f7fe f9f3 	bl	800156c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e180      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 8003196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x23a>
 80031a0:	e01a      	b.n	80031d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80031a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a6:	4a08      	ldr	r2, [pc, #32]	@ (80031c8 <HAL_RCC_OscConfig+0x280>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe f9dd 	bl	800156c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe f9d9 	bl	800156c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d903      	bls.n	80031cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e166      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
 80031c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b92      	ldr	r3, [pc, #584]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ee      	bne.n	80031b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a4 	beq.w	800332e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e6:	4b8c      	ldr	r3, [pc, #560]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4b89      	ldr	r3, [pc, #548]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	4a88      	ldr	r2, [pc, #544]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fe:	4b86      	ldr	r3, [pc, #536]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320a:	2301      	movs	r3, #1
 800320c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320e:	4b83      	ldr	r3, [pc, #524]	@ (800341c <HAL_RCC_OscConfig+0x4d4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d118      	bne.n	800324c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800321a:	4b80      	ldr	r3, [pc, #512]	@ (800341c <HAL_RCC_OscConfig+0x4d4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a7f      	ldr	r2, [pc, #508]	@ (800341c <HAL_RCC_OscConfig+0x4d4>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003226:	f7fe f9a1 	bl	800156c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7fe f99d 	bl	800156c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	@ 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e12a      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003240:	4b76      	ldr	r3, [pc, #472]	@ (800341c <HAL_RCC_OscConfig+0x4d4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x31a>
 8003254:	4b70      	ldr	r3, [pc, #448]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003258:	4a6f      	ldr	r2, [pc, #444]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003260:	e02d      	b.n	80032be <HAL_RCC_OscConfig+0x376>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x33c>
 800326a:	4b6b      	ldr	r3, [pc, #428]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	4a6a      	ldr	r2, [pc, #424]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	@ 0x70
 8003276:	4b68      	ldr	r3, [pc, #416]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	4a67      	ldr	r2, [pc, #412]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	@ 0x70
 8003282:	e01c      	b.n	80032be <HAL_RCC_OscConfig+0x376>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d10c      	bne.n	80032a6 <HAL_RCC_OscConfig+0x35e>
 800328c:	4b62      	ldr	r3, [pc, #392]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003290:	4a61      	ldr	r2, [pc, #388]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	6713      	str	r3, [r2, #112]	@ 0x70
 8003298:	4b5f      	ldr	r3, [pc, #380]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329c:	4a5e      	ldr	r2, [pc, #376]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a4:	e00b      	b.n	80032be <HAL_RCC_OscConfig+0x376>
 80032a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b2:	4b59      	ldr	r3, [pc, #356]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	4a58      	ldr	r2, [pc, #352]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	f023 0304 	bic.w	r3, r3, #4
 80032bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d015      	beq.n	80032f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fe f951 	bl	800156c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe f94d 	bl	800156c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0d8      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ee      	beq.n	80032ce <HAL_RCC_OscConfig+0x386>
 80032f0:	e014      	b.n	800331c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fe f93b 	bl	800156c <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe f937 	bl	800156c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e0c2      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ee      	bne.n	80032fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4a3c      	ldr	r2, [pc, #240]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800332c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80ae 	beq.w	8003494 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003338:	4b37      	ldr	r3, [pc, #220]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d06d      	beq.n	8003420 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d14b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a31      	ldr	r2, [pc, #196]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe f908 	bl	800156c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe f904 	bl	800156c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e091      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	4b29      	ldr	r3, [pc, #164]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	019b      	lsls	r3, r3, #6
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	085b      	lsrs	r3, r3, #1
 8003396:	3b01      	subs	r3, #1
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	071b      	lsls	r3, r3, #28
 80033aa:	491b      	ldr	r1, [pc, #108]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe f8d6 	bl	800156c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe f8d2 	bl	800156c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e05f      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d6:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x47c>
 80033e2:	e057      	b.n	8003494 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe f8bc 	bl	800156c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe f8b8 	bl	800156c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e045      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <HAL_RCC_OscConfig+0x4d0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x4b0>
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x54c>
 8003418:	40023800 	.word	0x40023800
 800341c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003420:	4b1f      	ldr	r3, [pc, #124]	@ (80034a0 <HAL_RCC_OscConfig+0x558>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d030      	beq.n	8003490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d129      	bne.n	8003490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d122      	bne.n	8003490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003450:	4013      	ands	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003456:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003458:	4293      	cmp	r3, r2
 800345a:	d119      	bne.n	8003490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	3b01      	subs	r3, #1
 800346a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d10f      	bne.n	8003490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0d0      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d910      	bls.n	80034ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b67      	ldr	r3, [pc, #412]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	4965      	ldr	r1, [pc, #404]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a58      	ldr	r2, [pc, #352]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800350e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a52      	ldr	r2, [pc, #328]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003526:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d040      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d115      	bne.n	8003586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003566:	4b41      	ldr	r3, [pc, #260]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e073      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	4b3d      	ldr	r3, [pc, #244]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06b      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003586:	4b39      	ldr	r3, [pc, #228]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4936      	ldr	r1, [pc, #216]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	4313      	orrs	r3, r2
 8003596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003598:	f7fd ffe8 	bl	800156c <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fd ffe4 	bl	800156c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e053      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	4b2d      	ldr	r3, [pc, #180]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 020c 	and.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1eb      	bne.n	80035a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c8:	4b27      	ldr	r3, [pc, #156]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d210      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 020f 	bic.w	r2, r3, #15
 80035de:	4922      	ldr	r1, [pc, #136]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f821 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	@ (8003670 <HAL_RCC_ClockConfig+0x1cc>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <HAL_RCC_ClockConfig+0x1d0>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_ClockConfig+0x1d4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd ff44 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	0800a8d8 	.word	0x0800a8d8
 8003674:	2000029c 	.word	0x2000029c
 8003678:	200002a0 	.word	0x200002a0

0800367c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003680:	b090      	sub	sp, #64	@ 0x40
 8003682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34
 8003688:	2300      	movs	r3, #0
 800368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368c:	2300      	movs	r3, #0
 800368e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003694:	4b59      	ldr	r3, [pc, #356]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d00d      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x40>
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	f200 80a1 	bhi.w	80037e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x34>
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ae:	e09b      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b53      	ldr	r3, [pc, #332]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x184>)
 80036b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036b4:	e09b      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b6:	4b53      	ldr	r3, [pc, #332]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ba:	e098      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036bc:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036c6:	4b4d      	ldr	r3, [pc, #308]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d028      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d2:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	2200      	movs	r2, #0
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036e4:	2100      	movs	r1, #0
 80036e6:	4b47      	ldr	r3, [pc, #284]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e8:	fb03 f201 	mul.w	r2, r3, r1
 80036ec:	2300      	movs	r3, #0
 80036ee:	fb00 f303 	mul.w	r3, r0, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	4a43      	ldr	r2, [pc, #268]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036f6:	fba0 1202 	umull	r1, r2, r0, r2
 80036fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036fc:	460a      	mov	r2, r1
 80036fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003702:	4413      	add	r3, r2
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003708:	2200      	movs	r2, #0
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003716:	f7fc ffa7 	bl	8000668 <__aeabi_uldivmod>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4613      	mov	r3, r2
 8003720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003722:	e053      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003724:	4b35      	ldr	r3, [pc, #212]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	2200      	movs	r2, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	617a      	str	r2, [r7, #20]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003736:	f04f 0b00 	mov.w	fp, #0
 800373a:	4652      	mov	r2, sl
 800373c:	465b      	mov	r3, fp
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	0159      	lsls	r1, r3, #5
 8003748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374c:	0150      	lsls	r0, r2, #5
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	ebb2 080a 	subs.w	r8, r2, sl
 8003756:	eb63 090b 	sbc.w	r9, r3, fp
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800376a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800376e:	ebb2 0408 	subs.w	r4, r2, r8
 8003772:	eb63 0509 	sbc.w	r5, r3, r9
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	00eb      	lsls	r3, r5, #3
 8003780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003784:	00e2      	lsls	r2, r4, #3
 8003786:	4614      	mov	r4, r2
 8003788:	461d      	mov	r5, r3
 800378a:	eb14 030a 	adds.w	r3, r4, sl
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	eb45 030b 	adc.w	r3, r5, fp
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a2:	4629      	mov	r1, r5
 80037a4:	028b      	lsls	r3, r1, #10
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ac:	4621      	mov	r1, r4
 80037ae:	028a      	lsls	r2, r1, #10
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b6:	2200      	movs	r2, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	60fa      	str	r2, [r7, #12]
 80037bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c0:	f7fc ff52 	bl	8000668 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80037dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x184>)
 80037ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3740      	adds	r7, #64	@ 0x40
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	017d7840 	.word	0x017d7840

08003808 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b03      	ldr	r3, [pc, #12]	@ (800381c <HAL_RCC_GetHCLKFreq+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000029c 	.word	0x2000029c

08003820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003824:	f7ff fff0 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0a9b      	lsrs	r3, r3, #10
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	@ (8003844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	0800a8e8 	.word	0x0800a8e8

08003848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800384c:	f7ff ffdc 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0b5b      	lsrs	r3, r3, #13
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	0800a8e8 	.word	0x0800a8e8

08003870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d012      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003898:	4b69      	ldr	r3, [pc, #420]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a68      	ldr	r2, [pc, #416]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038a2:	6093      	str	r3, [r2, #8]
 80038a4:	4b66      	ldr	r3, [pc, #408]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ac:	4964      	ldr	r1, [pc, #400]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d017      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d8:	4959      	ldr	r1, [pc, #356]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d017      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003906:	4b4e      	ldr	r3, [pc, #312]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800390c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	494a      	ldr	r1, [pc, #296]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003942:	2301      	movs	r3, #1
 8003944:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 808b 	beq.w	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b3a      	ldr	r3, [pc, #232]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	4a39      	ldr	r2, [pc, #228]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800395e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003960:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800396c:	4b35      	ldr	r3, [pc, #212]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a34      	ldr	r2, [pc, #208]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003978:	f7fd fdf8 	bl	800156c <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003980:	f7fd fdf4 	bl	800156c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e38f      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003992:	4b2c      	ldr	r3, [pc, #176]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800399e:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d035      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d02e      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039bc:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039de:	4a18      	ldr	r2, [pc, #96]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e4:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d114      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fd fdbc 	bl	800156c <HAL_GetTick>
 80039f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fd fdb8 	bl	800156c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e351      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ee      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a26:	d111      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a34:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a36:	400b      	ands	r3, r1
 8003a38:	4901      	ldr	r1, [pc, #4]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000
 8003a48:	0ffffcff 	.word	0x0ffffcff
 8003a4c:	4bac      	ldr	r3, [pc, #688]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4aab      	ldr	r2, [pc, #684]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a52:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a56:	6093      	str	r3, [r2, #8]
 8003a58:	4ba9      	ldr	r3, [pc, #676]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a64:	49a6      	ldr	r1, [pc, #664]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a76:	4ba2      	ldr	r3, [pc, #648]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a7c:	4aa0      	ldr	r2, [pc, #640]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003a86:	4b9e      	ldr	r3, [pc, #632]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	499b      	ldr	r1, [pc, #620]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa4:	4b96      	ldr	r3, [pc, #600]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab2:	4993      	ldr	r1, [pc, #588]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac6:	4b8e      	ldr	r3, [pc, #568]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003acc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad4:	498a      	ldr	r1, [pc, #552]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae8:	4b85      	ldr	r3, [pc, #532]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003af6:	4982      	ldr	r1, [pc, #520]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4979      	ldr	r1, [pc, #484]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2c:	4b74      	ldr	r3, [pc, #464]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	4971      	ldr	r1, [pc, #452]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b54:	f023 020c 	bic.w	r2, r3, #12
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5c:	4968      	ldr	r1, [pc, #416]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b70:	4b63      	ldr	r3, [pc, #396]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7e:	4960      	ldr	r1, [pc, #384]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b92:	4b5b      	ldr	r3, [pc, #364]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b98:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba0:	4957      	ldr	r1, [pc, #348]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb4:	4b52      	ldr	r3, [pc, #328]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	494f      	ldr	r1, [pc, #316]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	4946      	ldr	r1, [pc, #280]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bf8:	4b41      	ldr	r3, [pc, #260]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c06:	493e      	ldr	r1, [pc, #248]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c28:	4935      	ldr	r1, [pc, #212]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c3c:	4b30      	ldr	r3, [pc, #192]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c4a:	492d      	ldr	r1, [pc, #180]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d011      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c5e:	4b28      	ldr	r3, [pc, #160]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6c:	4924      	ldr	r1, [pc, #144]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c9e:	4b18      	ldr	r3, [pc, #96]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cac:	4914      	ldr	r1, [pc, #80]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cd0:	490b      	ldr	r1, [pc, #44]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cf4:	4902      	ldr	r1, [pc, #8]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cfc:	e002      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d10:	4b8a      	ldr	r3, [pc, #552]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	4986      	ldr	r1, [pc, #536]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d34:	4b81      	ldr	r3, [pc, #516]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d3a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d44:	497d      	ldr	r1, [pc, #500]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d006      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80d6 	beq.w	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d60:	4b76      	ldr	r3, [pc, #472]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a75      	ldr	r2, [pc, #468]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fbfe 	bl	800156c <HAL_GetTick>
 8003d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d74:	f7fd fbfa 	bl	800156c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	@ 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e195      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d86:	4b6d      	ldr	r3, [pc, #436]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d021      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11d      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003da6:	4b65      	ldr	r3, [pc, #404]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003db4:	4b61      	ldr	r3, [pc, #388]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dba:	0e1b      	lsrs	r3, r3, #24
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	019a      	lsls	r2, r3, #6
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	071b      	lsls	r3, r3, #28
 8003dda:	4958      	ldr	r1, [pc, #352]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d02e      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e0c:	d129      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e1c:	4b47      	ldr	r3, [pc, #284]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e22:	0f1b      	lsrs	r3, r3, #28
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	019a      	lsls	r2, r3, #6
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	071b      	lsls	r3, r3, #28
 8003e42:	493e      	ldr	r1, [pc, #248]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e50:	f023 021f 	bic.w	r2, r3, #31
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	4938      	ldr	r1, [pc, #224]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01d      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e6e:	4b33      	ldr	r3, [pc, #204]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e74:	0e1b      	lsrs	r3, r3, #24
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e82:	0f1b      	lsrs	r3, r3, #28
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	019a      	lsls	r2, r3, #6
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	431a      	orrs	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	071b      	lsls	r3, r3, #28
 8003ea2:	4926      	ldr	r1, [pc, #152]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d011      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	019a      	lsls	r2, r3, #6
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	071b      	lsls	r3, r3, #28
 8003ed2:	491a      	ldr	r1, [pc, #104]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003eda:	4b18      	ldr	r3, [pc, #96]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee6:	f7fd fb41 	bl	800156c <HAL_GetTick>
 8003eea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eee:	f7fd fb3d 	bl	800156c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b64      	cmp	r3, #100	@ 0x64
 8003efa:	d901      	bls.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0d8      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f00:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	f040 80ce 	bne.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f20:	f7fd fb24 	bl	800156c <HAL_GetTick>
 8003f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f26:	e00b      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f28:	f7fd fb20 	bl	800156c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	@ 0x64
 8003f34:	d904      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0bb      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f40:	4b5e      	ldr	r3, [pc, #376]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f4c:	d0ec      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d02e      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d12a      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f76:	4b51      	ldr	r3, [pc, #324]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f84:	4b4d      	ldr	r3, [pc, #308]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	0f1b      	lsrs	r3, r3, #28
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	019a      	lsls	r2, r3, #6
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	041b      	lsls	r3, r3, #16
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	4944      	ldr	r1, [pc, #272]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fb2:	4b42      	ldr	r3, [pc, #264]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fb8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	493d      	ldr	r1, [pc, #244]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d022      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe0:	d11d      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fe2:	4b36      	ldr	r3, [pc, #216]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe8:	0e1b      	lsrs	r3, r3, #24
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ff0:	4b32      	ldr	r3, [pc, #200]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	0f1b      	lsrs	r3, r3, #28
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	019a      	lsls	r2, r3, #6
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	071b      	lsls	r3, r3, #28
 8004016:	4929      	ldr	r1, [pc, #164]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d028      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800402a:	4b24      	ldr	r3, [pc, #144]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	0e1b      	lsrs	r3, r3, #24
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004038:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	019a      	lsls	r2, r3, #6
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	431a      	orrs	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	071b      	lsls	r3, r3, #28
 800405e:	4917      	ldr	r1, [pc, #92]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004066:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800406c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	4911      	ldr	r1, [pc, #68]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800407c:	4b0f      	ldr	r3, [pc, #60]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0e      	ldr	r2, [pc, #56]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004088:	f7fd fa70 	bl	800156c <HAL_GetTick>
 800408c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004090:	f7fd fa6c 	bl	800156c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	@ 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e007      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ae:	d1ef      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e049      	b.n	8004166 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd f8ae 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 faa8 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e054      	b.n	8004232 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <HAL_TIM_Base_Start_IT+0xd0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b2:	d01d      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <HAL_TIM_Base_Start_IT+0xd4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a21      	ldr	r2, [pc, #132]	@ (8004248 <HAL_TIM_Base_Start_IT+0xd8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <HAL_TIM_Base_Start_IT+0xdc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004250 <HAL_TIM_Base_Start_IT+0xe0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004254 <HAL_TIM_Base_Start_IT+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x80>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004258 <HAL_TIM_Base_Start_IT+0xe8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d115      	bne.n	800421c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <HAL_TIM_Base_Start_IT+0xec>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d015      	beq.n	800422e <HAL_TIM_Base_Start_IT+0xbe>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004208:	d011      	beq.n	800422e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421a:	e008      	b.n	800422e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e000      	b.n	8004230 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40010400 	.word	0x40010400
 8004254:	40014000 	.word	0x40014000
 8004258:	40001800 	.word	0x40001800
 800425c:	00010007 	.word	0x00010007

08004260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d020      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0202 	mvn.w	r2, #2
 8004294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9b4 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f9a6 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f9b7 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d020      	beq.n	8004310 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0204 	mvn.w	r2, #4
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f98e 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f980 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f991 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d020      	beq.n	800435c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0208 	mvn.w	r2, #8
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2204      	movs	r2, #4
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f968 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f95a 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f96b 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	d020      	beq.n	80043a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01b      	beq.n	80043a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0210 	mvn.w	r2, #16
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2208      	movs	r2, #8
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f942 	bl	8004618 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f934 	bl	8004604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f945 	bl	800462c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0201 	mvn.w	r2, #1
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fd20 	bl	8000e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00c      	beq.n	80043fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fb0b 	bl	8004a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00c      	beq.n	800441e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb03 	bl	8004a24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00c      	beq.n	8004442 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8ff 	bl	8004640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00c      	beq.n	8004466 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0220 	mvn.w	r2, #32
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 facb 	bl	80049fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIM_ConfigClockSource+0x1c>
 8004488:	2302      	movs	r3, #2
 800448a:	e0b4      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x186>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	4b56      	ldr	r3, [pc, #344]	@ (8004600 <HAL_TIM_ConfigClockSource+0x190>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c4:	d03e      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0xd4>
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ca:	f200 8087 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d2:	f000 8086 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x172>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044da:	d87f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b70      	cmp	r3, #112	@ 0x70
 80044de:	d01a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0xa6>
 80044e0:	2b70      	cmp	r3, #112	@ 0x70
 80044e2:	d87b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b60      	cmp	r3, #96	@ 0x60
 80044e6:	d050      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x11a>
 80044e8:	2b60      	cmp	r3, #96	@ 0x60
 80044ea:	d877      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b50      	cmp	r3, #80	@ 0x50
 80044ee:	d03c      	beq.n	800456a <HAL_TIM_ConfigClockSource+0xfa>
 80044f0:	2b50      	cmp	r3, #80	@ 0x50
 80044f2:	d873      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d058      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x13a>
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d86f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b30      	cmp	r3, #48	@ 0x30
 80044fe:	d064      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	2b30      	cmp	r3, #48	@ 0x30
 8004502:	d86b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b20      	cmp	r3, #32
 8004506:	d060      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d867      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05c      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004510:	2b10      	cmp	r3, #16
 8004512:	d05a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004514:	e062      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004526:	f000 f9bb 	bl	80048a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e04f      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004554:	f000 f9a4 	bl	80048a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004566:	609a      	str	r2, [r3, #8]
      break;
 8004568:	e03c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	461a      	mov	r2, r3
 8004578:	f000 f918 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2150      	movs	r1, #80	@ 0x50
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f971 	bl	800486a <TIM_ITRx_SetConfig>
      break;
 8004588:	e02c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004596:	461a      	mov	r2, r3
 8004598:	f000 f937 	bl	800480a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2160      	movs	r1, #96	@ 0x60
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f961 	bl	800486a <TIM_ITRx_SetConfig>
      break;
 80045a8:	e01c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 f8f8 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2140      	movs	r1, #64	@ 0x40
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f951 	bl	800486a <TIM_ITRx_SetConfig>
      break;
 80045c8:	e00c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 f948 	bl	800486a <TIM_ITRx_SetConfig>
      break;
 80045da:	e003      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	fffeff88 	.word	0xfffeff88

08004604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a46      	ldr	r2, [pc, #280]	@ (8004780 <TIM_Base_SetConfig+0x12c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004672:	d00f      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a43      	ldr	r2, [pc, #268]	@ (8004784 <TIM_Base_SetConfig+0x130>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a42      	ldr	r2, [pc, #264]	@ (8004788 <TIM_Base_SetConfig+0x134>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a41      	ldr	r2, [pc, #260]	@ (800478c <TIM_Base_SetConfig+0x138>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a40      	ldr	r2, [pc, #256]	@ (8004790 <TIM_Base_SetConfig+0x13c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d108      	bne.n	80046a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a35      	ldr	r2, [pc, #212]	@ (8004780 <TIM_Base_SetConfig+0x12c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d02b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b4:	d027      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a32      	ldr	r2, [pc, #200]	@ (8004784 <TIM_Base_SetConfig+0x130>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d023      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a31      	ldr	r2, [pc, #196]	@ (8004788 <TIM_Base_SetConfig+0x134>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01f      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a30      	ldr	r2, [pc, #192]	@ (800478c <TIM_Base_SetConfig+0x138>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <TIM_Base_SetConfig+0x13c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d017      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004794 <TIM_Base_SetConfig+0x140>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <TIM_Base_SetConfig+0x144>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2c      	ldr	r2, [pc, #176]	@ (800479c <TIM_Base_SetConfig+0x148>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2b      	ldr	r2, [pc, #172]	@ (80047a0 <TIM_Base_SetConfig+0x14c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	@ (80047a4 <TIM_Base_SetConfig+0x150>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a29      	ldr	r2, [pc, #164]	@ (80047a8 <TIM_Base_SetConfig+0x154>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a10      	ldr	r2, [pc, #64]	@ (8004780 <TIM_Base_SetConfig+0x12c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0xf8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a12      	ldr	r2, [pc, #72]	@ (8004790 <TIM_Base_SetConfig+0x13c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f023 0201 	bic.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]
  }
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40010400 	.word	0x40010400
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	40001800 	.word	0x40001800
 80047a4:	40001c00 	.word	0x40001c00
 80047a8:	40002000 	.word	0x40002000

080047ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 030a 	bic.w	r3, r3, #10
 80047e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480a:	b480      	push	{r7}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f023 0210 	bic.w	r2, r3, #16
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	031b      	lsls	r3, r3, #12
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004846:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	f043 0307 	orr.w	r3, r3, #7
 800488c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e06d      	b.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a30      	ldr	r2, [pc, #192]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2f      	ldr	r2, [pc, #188]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a20      	ldr	r2, [pc, #128]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496a:	d01d      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a15      	ldr	r2, [pc, #84]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a16      	ldr	r2, [pc, #88]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d10c      	bne.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40010400 	.word	0x40010400
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40001800 	.word	0x40001800

080049fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e040      	b.n	8004acc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fc7a 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	@ 0x24
 8004a64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0201 	bic.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fe24 	bl	80056cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fbbd 	bl	8005204 <UART_SetConfig>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e01b      	b.n	8004acc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fea3 	bl	8005810 <UART_CheckIdleState>
 8004aca:	4603      	mov	r3, r0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d165      	bne.n	8004bb6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_UART_Transmit_DMA+0x22>
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e05e      	b.n	8004bb8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	@ 0x21
 8004b1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d027      	beq.n	8004b76 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	4a25      	ldr	r2, [pc, #148]	@ (8004bc0 <HAL_UART_Transmit_DMA+0xec>)
 8004b2c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	4a24      	ldr	r2, [pc, #144]	@ (8004bc4 <HAL_UART_Transmit_DMA+0xf0>)
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	4a23      	ldr	r2, [pc, #140]	@ (8004bc8 <HAL_UART_Transmit_DMA+0xf4>)
 8004b3c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	2200      	movs	r2, #0
 8004b44:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3328      	adds	r3, #40	@ 0x28
 8004b56:	461a      	mov	r2, r3
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	f7fd fc9d 	bl	8002498 <HAL_DMA_Start_IT>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2210      	movs	r2, #16
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e020      	b.n	8004bb8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2240      	movs	r2, #64	@ 0x40
 8004b7c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3308      	adds	r3, #8
 8004b84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9e:	623a      	str	r2, [r7, #32]
 8004ba0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	69f9      	ldr	r1, [r7, #28]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e5      	bne.n	8004b7e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004bb6:	2302      	movs	r3, #2
  }
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3728      	adds	r7, #40	@ 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	08005b4f 	.word	0x08005b4f
 8004bc4:	08005be5 	.word	0x08005be5
 8004bc8:	08005c01 	.word	0x08005c01

08004bcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b0ba      	sub	sp, #232	@ 0xe8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004bf6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d115      	bne.n	8004c34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00f      	beq.n	8004c34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 82ac 	beq.w	8005182 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
      }
      return;
 8004c32:	e2a6      	b.n	8005182 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8117 	beq.w	8004e6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c4e:	4b85      	ldr	r3, [pc, #532]	@ (8004e64 <HAL_UART_IRQHandler+0x298>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 810a 	beq.w	8004e6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d011      	beq.n	8004c88 <HAL_UART_IRQHandler+0xbc>
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2201      	movs	r2, #1
 8004c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7e:	f043 0201 	orr.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d011      	beq.n	8004cb8 <HAL_UART_IRQHandler+0xec>
 8004c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cae:	f043 0204 	orr.w	r2, r3, #4
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d011      	beq.n	8004ce8 <HAL_UART_IRQHandler+0x11c>
 8004cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cde:	f043 0202 	orr.w	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d017      	beq.n	8004d24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2208      	movs	r2, #8
 8004d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d1a:	f043 0208 	orr.w	r2, r3, #8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d012      	beq.n	8004d56 <HAL_UART_IRQHandler+0x18a>
 8004d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00c      	beq.n	8004d56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8212 	beq.w	8005186 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00d      	beq.n	8004d8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d005      	beq.n	8004dae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d04f      	beq.n	8004e4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fe69 	bl	8005a86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbe:	2b40      	cmp	r3, #64	@ 0x40
 8004dc0:	d141      	bne.n	8004e46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1d9      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d013      	beq.n	8004e3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	4a13      	ldr	r2, [pc, #76]	@ (8004e68 <HAL_UART_IRQHandler+0x29c>)
 8004e1c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd fc08 	bl	8002638 <HAL_DMA_Abort_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d017      	beq.n	8004e5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e00f      	b.n	8004e5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f9c0 	bl	80051c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	e00b      	b.n	8004e5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9bc 	bl	80051c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	e007      	b.n	8004e5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f9b8 	bl	80051c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004e5c:	e193      	b.n	8005186 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5e:	bf00      	nop
    return;
 8004e60:	e191      	b.n	8005186 <HAL_UART_IRQHandler+0x5ba>
 8004e62:	bf00      	nop
 8004e64:	04000120 	.word	0x04000120
 8004e68:	08005c7f 	.word	0x08005c7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 814c 	bne.w	800510e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8145 	beq.w	800510e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 813e 	beq.w	800510e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2210      	movs	r2, #16
 8004e98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea4:	2b40      	cmp	r3, #64	@ 0x40
 8004ea6:	f040 80b6 	bne.w	8005016 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8165 	beq.w	800518a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	f080 815d 	bcs.w	800518a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ed6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee4:	f000 8086 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1da      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e1      	bne.n	8004f32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc4:	f023 0310 	bic.w	r3, r3, #16
 8004fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e4      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fab2 	bl	8002558 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005006:	b29b      	uxth	r3, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	b29b      	uxth	r3, r3
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8e2 	bl	80051d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005014:	e0b9      	b.n	800518a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005022:	b29b      	uxth	r3, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80ab 	beq.w	800518e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80a6 	beq.w	800518e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005064:	647b      	str	r3, [r7, #68]	@ 0x44
 8005066:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800506a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e4      	bne.n	8005042 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	623b      	str	r3, [r7, #32]
   return(result);
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800509c:	633a      	str	r2, [r7, #48]	@ 0x30
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e3      	bne.n	8005078 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f023 0310 	bic.w	r3, r3, #16
 80050d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	69b9      	ldr	r1, [r7, #24]
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	617b      	str	r3, [r7, #20]
   return(result);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e4      	bne.n	80050c4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f866 	bl	80051d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800510c:	e03f      	b.n	800518e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800510e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00e      	beq.n	8005138 <HAL_UART_IRQHandler+0x56c>
 800511a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800511e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800512e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f85d 	bl	80051f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005136:	e02d      	b.n	8005194 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00e      	beq.n	8005162 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01c      	beq.n	8005192 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
    }
    return;
 8005160:	e017      	b.n	8005192 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d012      	beq.n	8005194 <HAL_UART_IRQHandler+0x5c8>
 800516e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fd95 	bl	8005caa <UART_EndTransmit_IT>
    return;
 8005180:	e008      	b.n	8005194 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005182:	bf00      	nop
 8005184:	e006      	b.n	8005194 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005186:	bf00      	nop
 8005188:	e004      	b.n	8005194 <HAL_UART_IRQHandler+0x5c8>
      return;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_UART_IRQHandler+0x5c8>
      return;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005192:	bf00      	nop
  }

}
 8005194:	37e8      	adds	r7, #232	@ 0xe8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop

0800519c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4ba6      	ldr	r3, [pc, #664]	@ (80054c8 <UART_SetConfig+0x2c4>)
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	6979      	ldr	r1, [r7, #20]
 8005238:	430b      	orrs	r3, r1
 800523a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	430a      	orrs	r2, r1
 8005274:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a94      	ldr	r2, [pc, #592]	@ (80054cc <UART_SetConfig+0x2c8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d120      	bne.n	80052c2 <UART_SetConfig+0xbe>
 8005280:	4b93      	ldr	r3, [pc, #588]	@ (80054d0 <UART_SetConfig+0x2cc>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d816      	bhi.n	80052bc <UART_SetConfig+0xb8>
 800528e:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <UART_SetConfig+0x90>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052b1 	.word	0x080052b1
 800529c:	080052ab 	.word	0x080052ab
 80052a0:	080052b7 	.word	0x080052b7
 80052a4:	2301      	movs	r3, #1
 80052a6:	77fb      	strb	r3, [r7, #31]
 80052a8:	e150      	b.n	800554c <UART_SetConfig+0x348>
 80052aa:	2302      	movs	r3, #2
 80052ac:	77fb      	strb	r3, [r7, #31]
 80052ae:	e14d      	b.n	800554c <UART_SetConfig+0x348>
 80052b0:	2304      	movs	r3, #4
 80052b2:	77fb      	strb	r3, [r7, #31]
 80052b4:	e14a      	b.n	800554c <UART_SetConfig+0x348>
 80052b6:	2308      	movs	r3, #8
 80052b8:	77fb      	strb	r3, [r7, #31]
 80052ba:	e147      	b.n	800554c <UART_SetConfig+0x348>
 80052bc:	2310      	movs	r3, #16
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	e144      	b.n	800554c <UART_SetConfig+0x348>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a83      	ldr	r2, [pc, #524]	@ (80054d4 <UART_SetConfig+0x2d0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d132      	bne.n	8005332 <UART_SetConfig+0x12e>
 80052cc:	4b80      	ldr	r3, [pc, #512]	@ (80054d0 <UART_SetConfig+0x2cc>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b0c      	cmp	r3, #12
 80052d8:	d828      	bhi.n	800532c <UART_SetConfig+0x128>
 80052da:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <UART_SetConfig+0xdc>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005315 	.word	0x08005315
 80052e4:	0800532d 	.word	0x0800532d
 80052e8:	0800532d 	.word	0x0800532d
 80052ec:	0800532d 	.word	0x0800532d
 80052f0:	08005321 	.word	0x08005321
 80052f4:	0800532d 	.word	0x0800532d
 80052f8:	0800532d 	.word	0x0800532d
 80052fc:	0800532d 	.word	0x0800532d
 8005300:	0800531b 	.word	0x0800531b
 8005304:	0800532d 	.word	0x0800532d
 8005308:	0800532d 	.word	0x0800532d
 800530c:	0800532d 	.word	0x0800532d
 8005310:	08005327 	.word	0x08005327
 8005314:	2300      	movs	r3, #0
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e118      	b.n	800554c <UART_SetConfig+0x348>
 800531a:	2302      	movs	r3, #2
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e115      	b.n	800554c <UART_SetConfig+0x348>
 8005320:	2304      	movs	r3, #4
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e112      	b.n	800554c <UART_SetConfig+0x348>
 8005326:	2308      	movs	r3, #8
 8005328:	77fb      	strb	r3, [r7, #31]
 800532a:	e10f      	b.n	800554c <UART_SetConfig+0x348>
 800532c:	2310      	movs	r3, #16
 800532e:	77fb      	strb	r3, [r7, #31]
 8005330:	e10c      	b.n	800554c <UART_SetConfig+0x348>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a68      	ldr	r2, [pc, #416]	@ (80054d8 <UART_SetConfig+0x2d4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d120      	bne.n	800537e <UART_SetConfig+0x17a>
 800533c:	4b64      	ldr	r3, [pc, #400]	@ (80054d0 <UART_SetConfig+0x2cc>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005346:	2b30      	cmp	r3, #48	@ 0x30
 8005348:	d013      	beq.n	8005372 <UART_SetConfig+0x16e>
 800534a:	2b30      	cmp	r3, #48	@ 0x30
 800534c:	d814      	bhi.n	8005378 <UART_SetConfig+0x174>
 800534e:	2b20      	cmp	r3, #32
 8005350:	d009      	beq.n	8005366 <UART_SetConfig+0x162>
 8005352:	2b20      	cmp	r3, #32
 8005354:	d810      	bhi.n	8005378 <UART_SetConfig+0x174>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <UART_SetConfig+0x15c>
 800535a:	2b10      	cmp	r3, #16
 800535c:	d006      	beq.n	800536c <UART_SetConfig+0x168>
 800535e:	e00b      	b.n	8005378 <UART_SetConfig+0x174>
 8005360:	2300      	movs	r3, #0
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e0f2      	b.n	800554c <UART_SetConfig+0x348>
 8005366:	2302      	movs	r3, #2
 8005368:	77fb      	strb	r3, [r7, #31]
 800536a:	e0ef      	b.n	800554c <UART_SetConfig+0x348>
 800536c:	2304      	movs	r3, #4
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e0ec      	b.n	800554c <UART_SetConfig+0x348>
 8005372:	2308      	movs	r3, #8
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e0e9      	b.n	800554c <UART_SetConfig+0x348>
 8005378:	2310      	movs	r3, #16
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e0e6      	b.n	800554c <UART_SetConfig+0x348>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a56      	ldr	r2, [pc, #344]	@ (80054dc <UART_SetConfig+0x2d8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d120      	bne.n	80053ca <UART_SetConfig+0x1c6>
 8005388:	4b51      	ldr	r3, [pc, #324]	@ (80054d0 <UART_SetConfig+0x2cc>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005392:	2bc0      	cmp	r3, #192	@ 0xc0
 8005394:	d013      	beq.n	80053be <UART_SetConfig+0x1ba>
 8005396:	2bc0      	cmp	r3, #192	@ 0xc0
 8005398:	d814      	bhi.n	80053c4 <UART_SetConfig+0x1c0>
 800539a:	2b80      	cmp	r3, #128	@ 0x80
 800539c:	d009      	beq.n	80053b2 <UART_SetConfig+0x1ae>
 800539e:	2b80      	cmp	r3, #128	@ 0x80
 80053a0:	d810      	bhi.n	80053c4 <UART_SetConfig+0x1c0>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <UART_SetConfig+0x1a8>
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d006      	beq.n	80053b8 <UART_SetConfig+0x1b4>
 80053aa:	e00b      	b.n	80053c4 <UART_SetConfig+0x1c0>
 80053ac:	2300      	movs	r3, #0
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e0cc      	b.n	800554c <UART_SetConfig+0x348>
 80053b2:	2302      	movs	r3, #2
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e0c9      	b.n	800554c <UART_SetConfig+0x348>
 80053b8:	2304      	movs	r3, #4
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e0c6      	b.n	800554c <UART_SetConfig+0x348>
 80053be:	2308      	movs	r3, #8
 80053c0:	77fb      	strb	r3, [r7, #31]
 80053c2:	e0c3      	b.n	800554c <UART_SetConfig+0x348>
 80053c4:	2310      	movs	r3, #16
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e0c0      	b.n	800554c <UART_SetConfig+0x348>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a44      	ldr	r2, [pc, #272]	@ (80054e0 <UART_SetConfig+0x2dc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d125      	bne.n	8005420 <UART_SetConfig+0x21c>
 80053d4:	4b3e      	ldr	r3, [pc, #248]	@ (80054d0 <UART_SetConfig+0x2cc>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e2:	d017      	beq.n	8005414 <UART_SetConfig+0x210>
 80053e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e8:	d817      	bhi.n	800541a <UART_SetConfig+0x216>
 80053ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ee:	d00b      	beq.n	8005408 <UART_SetConfig+0x204>
 80053f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f4:	d811      	bhi.n	800541a <UART_SetConfig+0x216>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <UART_SetConfig+0x1fe>
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053fe:	d006      	beq.n	800540e <UART_SetConfig+0x20a>
 8005400:	e00b      	b.n	800541a <UART_SetConfig+0x216>
 8005402:	2300      	movs	r3, #0
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e0a1      	b.n	800554c <UART_SetConfig+0x348>
 8005408:	2302      	movs	r3, #2
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e09e      	b.n	800554c <UART_SetConfig+0x348>
 800540e:	2304      	movs	r3, #4
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e09b      	b.n	800554c <UART_SetConfig+0x348>
 8005414:	2308      	movs	r3, #8
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e098      	b.n	800554c <UART_SetConfig+0x348>
 800541a:	2310      	movs	r3, #16
 800541c:	77fb      	strb	r3, [r7, #31]
 800541e:	e095      	b.n	800554c <UART_SetConfig+0x348>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2f      	ldr	r2, [pc, #188]	@ (80054e4 <UART_SetConfig+0x2e0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d125      	bne.n	8005476 <UART_SetConfig+0x272>
 800542a:	4b29      	ldr	r3, [pc, #164]	@ (80054d0 <UART_SetConfig+0x2cc>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005434:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005438:	d017      	beq.n	800546a <UART_SetConfig+0x266>
 800543a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800543e:	d817      	bhi.n	8005470 <UART_SetConfig+0x26c>
 8005440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005444:	d00b      	beq.n	800545e <UART_SetConfig+0x25a>
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800544a:	d811      	bhi.n	8005470 <UART_SetConfig+0x26c>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <UART_SetConfig+0x254>
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005454:	d006      	beq.n	8005464 <UART_SetConfig+0x260>
 8005456:	e00b      	b.n	8005470 <UART_SetConfig+0x26c>
 8005458:	2301      	movs	r3, #1
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e076      	b.n	800554c <UART_SetConfig+0x348>
 800545e:	2302      	movs	r3, #2
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e073      	b.n	800554c <UART_SetConfig+0x348>
 8005464:	2304      	movs	r3, #4
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e070      	b.n	800554c <UART_SetConfig+0x348>
 800546a:	2308      	movs	r3, #8
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e06d      	b.n	800554c <UART_SetConfig+0x348>
 8005470:	2310      	movs	r3, #16
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e06a      	b.n	800554c <UART_SetConfig+0x348>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1b      	ldr	r2, [pc, #108]	@ (80054e8 <UART_SetConfig+0x2e4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d138      	bne.n	80054f2 <UART_SetConfig+0x2ee>
 8005480:	4b13      	ldr	r3, [pc, #76]	@ (80054d0 <UART_SetConfig+0x2cc>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005486:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800548a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800548e:	d017      	beq.n	80054c0 <UART_SetConfig+0x2bc>
 8005490:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005494:	d82a      	bhi.n	80054ec <UART_SetConfig+0x2e8>
 8005496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549a:	d00b      	beq.n	80054b4 <UART_SetConfig+0x2b0>
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a0:	d824      	bhi.n	80054ec <UART_SetConfig+0x2e8>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <UART_SetConfig+0x2aa>
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054aa:	d006      	beq.n	80054ba <UART_SetConfig+0x2b6>
 80054ac:	e01e      	b.n	80054ec <UART_SetConfig+0x2e8>
 80054ae:	2300      	movs	r3, #0
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e04b      	b.n	800554c <UART_SetConfig+0x348>
 80054b4:	2302      	movs	r3, #2
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e048      	b.n	800554c <UART_SetConfig+0x348>
 80054ba:	2304      	movs	r3, #4
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e045      	b.n	800554c <UART_SetConfig+0x348>
 80054c0:	2308      	movs	r3, #8
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e042      	b.n	800554c <UART_SetConfig+0x348>
 80054c6:	bf00      	nop
 80054c8:	efff69f3 	.word	0xefff69f3
 80054cc:	40011000 	.word	0x40011000
 80054d0:	40023800 	.word	0x40023800
 80054d4:	40004400 	.word	0x40004400
 80054d8:	40004800 	.word	0x40004800
 80054dc:	40004c00 	.word	0x40004c00
 80054e0:	40005000 	.word	0x40005000
 80054e4:	40011400 	.word	0x40011400
 80054e8:	40007800 	.word	0x40007800
 80054ec:	2310      	movs	r3, #16
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e02c      	b.n	800554c <UART_SetConfig+0x348>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a72      	ldr	r2, [pc, #456]	@ (80056c0 <UART_SetConfig+0x4bc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d125      	bne.n	8005548 <UART_SetConfig+0x344>
 80054fc:	4b71      	ldr	r3, [pc, #452]	@ (80056c4 <UART_SetConfig+0x4c0>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005502:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005506:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800550a:	d017      	beq.n	800553c <UART_SetConfig+0x338>
 800550c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005510:	d817      	bhi.n	8005542 <UART_SetConfig+0x33e>
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005516:	d00b      	beq.n	8005530 <UART_SetConfig+0x32c>
 8005518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551c:	d811      	bhi.n	8005542 <UART_SetConfig+0x33e>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <UART_SetConfig+0x326>
 8005522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005526:	d006      	beq.n	8005536 <UART_SetConfig+0x332>
 8005528:	e00b      	b.n	8005542 <UART_SetConfig+0x33e>
 800552a:	2300      	movs	r3, #0
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	e00d      	b.n	800554c <UART_SetConfig+0x348>
 8005530:	2302      	movs	r3, #2
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e00a      	b.n	800554c <UART_SetConfig+0x348>
 8005536:	2304      	movs	r3, #4
 8005538:	77fb      	strb	r3, [r7, #31]
 800553a:	e007      	b.n	800554c <UART_SetConfig+0x348>
 800553c:	2308      	movs	r3, #8
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e004      	b.n	800554c <UART_SetConfig+0x348>
 8005542:	2310      	movs	r3, #16
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e001      	b.n	800554c <UART_SetConfig+0x348>
 8005548:	2310      	movs	r3, #16
 800554a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	d15b      	bne.n	800560e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d828      	bhi.n	80055ae <UART_SetConfig+0x3aa>
 800555c:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <UART_SetConfig+0x360>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe f94a 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 800558c:	61b8      	str	r0, [r7, #24]
        break;
 800558e:	e013      	b.n	80055b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe f95a 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 8005594:	61b8      	str	r0, [r7, #24]
        break;
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b4b      	ldr	r3, [pc, #300]	@ (80056c8 <UART_SetConfig+0x4c4>)
 800559a:	61bb      	str	r3, [r7, #24]
        break;
 800559c:	e00c      	b.n	80055b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe f86d 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80055a2:	61b8      	str	r0, [r7, #24]
        break;
 80055a4:	e008      	b.n	80055b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055aa:	61bb      	str	r3, [r7, #24]
        break;
 80055ac:	e004      	b.n	80055b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77bb      	strb	r3, [r7, #30]
        break;
 80055b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d074      	beq.n	80056a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	005a      	lsls	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	441a      	add	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d916      	bls.n	8005608 <UART_SetConfig+0x404>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d212      	bcs.n	8005608 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f023 030f 	bic.w	r3, r3, #15
 80055ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	89fb      	ldrh	r3, [r7, #14]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	89fa      	ldrh	r2, [r7, #14]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e04f      	b.n	80056a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	77bb      	strb	r3, [r7, #30]
 800560c:	e04c      	b.n	80056a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800560e:	7ffb      	ldrb	r3, [r7, #31]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d828      	bhi.n	8005666 <UART_SetConfig+0x462>
 8005614:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <UART_SetConfig+0x418>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005641 	.word	0x08005641
 8005620:	08005649 	.word	0x08005649
 8005624:	08005651 	.word	0x08005651
 8005628:	08005667 	.word	0x08005667
 800562c:	08005657 	.word	0x08005657
 8005630:	08005667 	.word	0x08005667
 8005634:	08005667 	.word	0x08005667
 8005638:	08005667 	.word	0x08005667
 800563c:	0800565f 	.word	0x0800565f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7fe f8ee 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8005644:	61b8      	str	r0, [r7, #24]
        break;
 8005646:	e013      	b.n	8005670 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe f8fe 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 800564c:	61b8      	str	r0, [r7, #24]
        break;
 800564e:	e00f      	b.n	8005670 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005650:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <UART_SetConfig+0x4c4>)
 8005652:	61bb      	str	r3, [r7, #24]
        break;
 8005654:	e00c      	b.n	8005670 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005656:	f7fe f811 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800565a:	61b8      	str	r0, [r7, #24]
        break;
 800565c:	e008      	b.n	8005670 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005662:	61bb      	str	r3, [r7, #24]
        break;
 8005664:	e004      	b.n	8005670 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	77bb      	strb	r3, [r7, #30]
        break;
 800566e:	bf00      	nop
    }

    if (pclk != 0U)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d018      	beq.n	80056a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	085a      	lsrs	r2, r3, #1
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	441a      	add	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d909      	bls.n	80056a4 <UART_SetConfig+0x4a0>
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005696:	d205      	bcs.n	80056a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	e001      	b.n	80056a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80056b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40007c00 	.word	0x40007c00
 80056c4:	40023800 	.word	0x40023800
 80056c8:	00f42400 	.word	0x00f42400

080056cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ca:	d10a      	bne.n	80057e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b098      	sub	sp, #96	@ 0x60
 8005814:	af02      	add	r7, sp, #8
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005820:	f7fb fea4 	bl	800156c <HAL_GetTick>
 8005824:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b08      	cmp	r3, #8
 8005832:	d12e      	bne.n	8005892 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005834:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800583c:	2200      	movs	r2, #0
 800583e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f88c 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d021      	beq.n	8005892 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005862:	653b      	str	r3, [r7, #80]	@ 0x50
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800586c:	647b      	str	r3, [r7, #68]	@ 0x44
 800586e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800587a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e6      	bne.n	800584e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e062      	b.n	8005958 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b04      	cmp	r3, #4
 800589e:	d149      	bne.n	8005934 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a8:	2200      	movs	r2, #0
 80058aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f856 	bl	8005960 <UART_WaitOnFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d03c      	beq.n	8005934 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	623b      	str	r3, [r7, #32]
   return(result);
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3308      	adds	r3, #8
 800590a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800590c:	61fa      	str	r2, [r7, #28]
 800590e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	69b9      	ldr	r1, [r7, #24]
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	617b      	str	r3, [r7, #20]
   return(result);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e5      	bne.n	80058ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e011      	b.n	8005958 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3758      	adds	r7, #88	@ 0x58
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	4613      	mov	r3, r2
 800596e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005970:	e04f      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d04b      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597a:	f7fb fdf7 	bl	800156c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <UART_WaitOnFlagUntilTimeout+0x30>
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e04e      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d037      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b80      	cmp	r3, #128	@ 0x80
 80059a6:	d034      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d031      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d110      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f85e 	bl	8005a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2208      	movs	r2, #8
 80059ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e029      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ec:	d111      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f844 	bl	8005a86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e00f      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d0a0      	beq.n	8005972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b089      	sub	sp, #36	@ 0x24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6979      	ldr	r1, [r7, #20]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005a7a:	bf00      	nop
 8005a7c:	3724      	adds	r7, #36	@ 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b095      	sub	sp, #84	@ 0x54
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e5      	bne.n	8005ac0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d118      	bne.n	8005b2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f023 0310 	bic.w	r3, r3, #16
 8005b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6979      	ldr	r1, [r7, #20]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	613b      	str	r3, [r7, #16]
   return(result);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e6      	bne.n	8005afc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b42:	bf00      	nop
 8005b44:	3754      	adds	r7, #84	@ 0x54
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b090      	sub	sp, #64	@ 0x40
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b64:	d037      	beq.n	8005bd6 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8005b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	69b9      	ldr	r1, [r7, #24]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e6      	bne.n	8005ba2 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bd4:	e002      	b.n	8005bdc <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8005bd6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005bd8:	f7ff fae0 	bl	800519c <HAL_UART_TxCpltCallback>
}
 8005bdc:	bf00      	nop
 8005bde:	3740      	adds	r7, #64	@ 0x40
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7ff fadc 	bl	80051b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c26:	2b80      	cmp	r3, #128	@ 0x80
 8005c28:	d109      	bne.n	8005c3e <UART_DMAError+0x3e>
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b21      	cmp	r3, #33	@ 0x21
 8005c2e:	d106      	bne.n	8005c3e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005c38:	6978      	ldr	r0, [r7, #20]
 8005c3a:	f7ff fefe 	bl	8005a3a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b40      	cmp	r3, #64	@ 0x40
 8005c4a:	d109      	bne.n	8005c60 <UART_DMAError+0x60>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b22      	cmp	r3, #34	@ 0x22
 8005c50:	d106      	bne.n	8005c60 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005c5a:	6978      	ldr	r0, [r7, #20]
 8005c5c:	f7ff ff13 	bl	8005a86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c66:	f043 0210 	orr.w	r2, r3, #16
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	f7ff faa7 	bl	80051c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff fa91 	bl	80051c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e6      	bne.n	8005cb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff fa53 	bl	800519c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf6:	bf00      	nop
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <arm_fir_init_f32>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	9e06      	ldr	r6, [sp, #24]
 8005d04:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 8005d08:	460f      	mov	r7, r1
 8005d0a:	6082      	str	r2, [r0, #8]
 8005d0c:	4434      	add	r4, r6
 8005d0e:	4605      	mov	r5, r0
 8005d10:	461e      	mov	r6, r3
 8005d12:	8007      	strh	r7, [r0, #0]
 8005d14:	19e2      	adds	r2, r4, r7
 8005d16:	2100      	movs	r1, #0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	f001 fab1 	bl	8007282 <memset>
 8005d20:	606e      	str	r6, [r5, #4]
 8005d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d24 <arm_fir_f32>:
 8005d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	4606      	mov	r6, r0
 8005d2a:	ed2d 8b10 	vpush	{d8-d15}
 8005d2e:	b089      	sub	sp, #36	@ 0x24
 8005d30:	8834      	ldrh	r4, [r6, #0]
 8005d32:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8005d36:	9004      	str	r0, [sp, #16]
 8005d38:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 8005d3c:	9305      	str	r3, [sp, #20]
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	4420      	add	r0, r4
 8005d42:	9402      	str	r4, [sp, #8]
 8005d44:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8005d48:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	9001      	str	r0, [sp, #4]
 8005d50:	f000 81eb 	beq.w	800612a <arm_fir_f32+0x406>
 8005d54:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8005d58:	469e      	mov	lr, r3
 8005d5a:	f004 0a07 	and.w	sl, r4, #7
 8005d5e:	f100 0720 	add.w	r7, r0, #32
 8005d62:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005d66:	f101 0620 	add.w	r6, r1, #32
 8005d6a:	9107      	str	r1, [sp, #28]
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	eb08 0003 	add.w	r0, r8, r3
 8005d72:	3b04      	subs	r3, #4
 8005d74:	f10c 0420 	add.w	r4, ip, #32
 8005d78:	f102 0520 	add.w	r5, r2, #32
 8005d7c:	f8cd c018 	str.w	ip, [sp, #24]
 8005d80:	4652      	mov	r2, sl
 8005d82:	4684      	mov	ip, r0
 8005d84:	468a      	mov	sl, r1
 8005d86:	4648      	mov	r0, r9
 8005d88:	4699      	mov	r9, r3
 8005d8a:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8005d8e:	1f21      	subs	r1, r4, #4
 8005d90:	ed9f 3aef 	vldr	s6, [pc, #956]	@ 8006150 <arm_fir_f32+0x42c>
 8005d94:	f847 3c20 	str.w	r3, [r7, #-32]
 8005d98:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8005d9c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8005da0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8005da4:	f847 3c18 	str.w	r3, [r7, #-24]
 8005da8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8005dac:	f847 3c14 	str.w	r3, [r7, #-20]
 8005db0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8005db4:	f847 3c10 	str.w	r3, [r7, #-16]
 8005db8:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8005dbc:	f847 3c0c 	str.w	r3, [r7, #-12]
 8005dc0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005dc4:	f847 3c08 	str.w	r3, [r7, #-8]
 8005dc8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005dcc:	f847 3c04 	str.w	r3, [r7, #-4]
 8005dd0:	ed14 8a08 	vldr	s16, [r4, #-32]	@ 0xffffffe0
 8005dd4:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8005dd8:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 8005ddc:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 8005de0:	ed14 1a04 	vldr	s2, [r4, #-16]
 8005de4:	ed54 0a03 	vldr	s1, [r4, #-12]
 8005de8:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005dec:	2800      	cmp	r0, #0
 8005dee:	f000 81f6 	beq.w	80061de <arm_fir_f32+0x4ba>
 8005df2:	eeb0 9a43 	vmov.f32	s18, s6
 8005df6:	f108 0120 	add.w	r1, r8, #32
 8005dfa:	eeb0 aa43 	vmov.f32	s20, s6
 8005dfe:	f104 031c 	add.w	r3, r4, #28
 8005e02:	eef0 aa43 	vmov.f32	s21, s6
 8005e06:	4683      	mov	fp, r0
 8005e08:	eeb0 ba43 	vmov.f32	s22, s6
 8005e0c:	eef0 ba43 	vmov.f32	s23, s6
 8005e10:	eeb0 ca43 	vmov.f32	s24, s6
 8005e14:	eeb0 4a43 	vmov.f32	s8, s6
 8005e18:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8005e1c:	f1bb 0b01 	subs.w	fp, fp, #1
 8005e20:	ed53 8a08 	vldr	s17, [r3, #-32]	@ 0xffffffe0
 8005e24:	f101 0120 	add.w	r1, r1, #32
 8005e28:	ee23 fa88 	vmul.f32	s30, s7, s16
 8005e2c:	ed51 4a0f 	vldr	s9, [r1, #-60]	@ 0xffffffc4
 8005e30:	ee63 eaa2 	vmul.f32	s29, s7, s5
 8005e34:	ed13 8a07 	vldr	s16, [r3, #-28]	@ 0xffffffe4
 8005e38:	ee23 ea82 	vmul.f32	s28, s7, s4
 8005e3c:	ed11 5a0e 	vldr	s10, [r1, #-56]	@ 0xffffffc8
 8005e40:	ee63 daa1 	vmul.f32	s27, s7, s3
 8005e44:	ed51 5a0d 	vldr	s11, [r1, #-52]	@ 0xffffffcc
 8005e48:	ee23 da81 	vmul.f32	s26, s7, s2
 8005e4c:	ed11 6a0c 	vldr	s12, [r1, #-48]	@ 0xffffffd0
 8005e50:	ee63 caa0 	vmul.f32	s25, s7, s1
 8005e54:	ed51 6a0b 	vldr	s13, [r1, #-44]	@ 0xffffffd4
 8005e58:	ee63 9a80 	vmul.f32	s19, s7, s0
 8005e5c:	ed11 7a0a 	vldr	s14, [r1, #-40]	@ 0xffffffd8
 8005e60:	ee63 3aa8 	vmul.f32	s7, s7, s17
 8005e64:	ed51 7a09 	vldr	s15, [r1, #-36]	@ 0xffffffdc
 8005e68:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8005e6c:	f103 0320 	add.w	r3, r3, #32
 8005e70:	ee24 faa2 	vmul.f32	s30, s9, s5
 8005e74:	ed53 2a0e 	vldr	s5, [r3, #-56]	@ 0xffffffc8
 8005e78:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8005e7c:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8005e80:	ee64 ea82 	vmul.f32	s29, s9, s4
 8005e84:	ee24 eaa1 	vmul.f32	s28, s9, s3
 8005e88:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8005e8c:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005e90:	ee64 da81 	vmul.f32	s27, s9, s2
 8005e94:	ee24 daa0 	vmul.f32	s26, s9, s1
 8005e98:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8005e9c:	ee39 9a89 	vadd.f32	s18, s19, s18
 8005ea0:	ee64 ca80 	vmul.f32	s25, s9, s0
 8005ea4:	ee68 9aa4 	vmul.f32	s19, s17, s9
 8005ea8:	ee33 3a83 	vadd.f32	s6, s7, s6
 8005eac:	ee64 4a88 	vmul.f32	s9, s9, s16
 8005eb0:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8005eb4:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8005eb8:	ee25 fa02 	vmul.f32	s30, s10, s4
 8005ebc:	ed13 2a0d 	vldr	s4, [r3, #-52]	@ 0xffffffcc
 8005ec0:	ee65 ea21 	vmul.f32	s29, s10, s3
 8005ec4:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005ec8:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8005ecc:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8005ed0:	ee25 ea01 	vmul.f32	s28, s10, s2
 8005ed4:	ee65 da20 	vmul.f32	s27, s10, s1
 8005ed8:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005edc:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8005ee0:	ee25 da00 	vmul.f32	s26, s10, s0
 8005ee4:	ee68 ca85 	vmul.f32	s25, s17, s10
 8005ee8:	ee39 9a89 	vadd.f32	s18, s19, s18
 8005eec:	ee68 9a05 	vmul.f32	s19, s16, s10
 8005ef0:	ee25 5a22 	vmul.f32	s10, s10, s5
 8005ef4:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8005ef8:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8005efc:	ee25 faa1 	vmul.f32	s30, s11, s3
 8005f00:	ed53 1a0c 	vldr	s3, [r3, #-48]	@ 0xffffffd0
 8005f04:	ee65 ea81 	vmul.f32	s29, s11, s2
 8005f08:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005f0c:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8005f10:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8005f14:	ee25 eaa0 	vmul.f32	s28, s11, s1
 8005f18:	ee65 da80 	vmul.f32	s27, s11, s0
 8005f1c:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005f20:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8005f24:	ee28 daa5 	vmul.f32	s26, s17, s11
 8005f28:	ee68 ca25 	vmul.f32	s25, s16, s11
 8005f2c:	ee39 9a89 	vadd.f32	s18, s19, s18
 8005f30:	ee62 9aa5 	vmul.f32	s19, s5, s11
 8005f34:	ee65 5a82 	vmul.f32	s11, s11, s4
 8005f38:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8005f3c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8005f40:	ee75 5a85 	vadd.f32	s11, s11, s10
 8005f44:	ee26 fa01 	vmul.f32	s30, s12, s2
 8005f48:	ed13 1a0b 	vldr	s2, [r3, #-44]	@ 0xffffffd4
 8005f4c:	ee22 5a06 	vmul.f32	s10, s4, s12
 8005f50:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8005f54:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8005f58:	ee66 ea20 	vmul.f32	s29, s12, s1
 8005f5c:	ee26 ea00 	vmul.f32	s28, s12, s0
 8005f60:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8005f64:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005f68:	ee68 da86 	vmul.f32	s27, s17, s12
 8005f6c:	ee28 da06 	vmul.f32	s26, s16, s12
 8005f70:	ee62 ca86 	vmul.f32	s25, s5, s12
 8005f74:	ee39 9a89 	vadd.f32	s18, s19, s18
 8005f78:	ee26 6a21 	vmul.f32	s12, s12, s3
 8005f7c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8005f80:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8005f84:	ee26 faa0 	vmul.f32	s30, s13, s1
 8005f88:	ed53 0a0a 	vldr	s1, [r3, #-40]	@ 0xffffffd8
 8005f8c:	ee66 ea80 	vmul.f32	s29, s13, s0
 8005f90:	ee36 6a25 	vadd.f32	s12, s12, s11
 8005f94:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8005f98:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8005f9c:	ee28 eaa6 	vmul.f32	s28, s17, s13
 8005fa0:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8005fa4:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005fa8:	ee68 da26 	vmul.f32	s27, s16, s13
 8005fac:	ee22 daa6 	vmul.f32	s26, s5, s13
 8005fb0:	ee7c ca8a 	vadd.f32	s25, s25, s20
 8005fb4:	ee35 9a09 	vadd.f32	s18, s10, s18
 8005fb8:	ee22 aa26 	vmul.f32	s20, s4, s13
 8005fbc:	ee66 6a81 	vmul.f32	s13, s13, s2
 8005fc0:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8005fc4:	ee35 9a89 	vadd.f32	s18, s11, s18
 8005fc8:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8005fcc:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8005fd0:	ee27 fa00 	vmul.f32	s30, s14, s0
 8005fd4:	ed13 0a09 	vldr	s0, [r3, #-36]	@ 0xffffffdc
 8005fd8:	ee68 ea87 	vmul.f32	s29, s17, s14
 8005fdc:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8005fe0:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8005fe4:	ee28 ea07 	vmul.f32	s28, s16, s14
 8005fe8:	ee62 da87 	vmul.f32	s27, s5, s14
 8005fec:	ee22 da07 	vmul.f32	s26, s4, s14
 8005ff0:	ee7a ca2c 	vadd.f32	s25, s20, s25
 8005ff4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005ff8:	ee21 aa87 	vmul.f32	s20, s3, s14
 8005ffc:	ee27 3a20 	vmul.f32	s6, s14, s1
 8006000:	ee21 6a07 	vmul.f32	s12, s2, s14
 8006004:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006008:	ee68 5a27 	vmul.f32	s11, s16, s15
 800600c:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8006010:	ee62 4a27 	vmul.f32	s9, s4, s15
 8006014:	ee3d da2a 	vadd.f32	s26, s26, s21
 8006018:	ee7a ca2c 	vadd.f32	s25, s20, s25
 800601c:	ee61 aaa7 	vmul.f32	s21, s3, s15
 8006020:	ee21 aa27 	vmul.f32	s20, s2, s15
 8006024:	ee36 7a09 	vadd.f32	s14, s12, s18
 8006028:	ee3f 4a04 	vadd.f32	s8, s30, s8
 800602c:	ee20 9aa7 	vmul.f32	s18, s1, s15
 8006030:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8006034:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8006038:	ee3d ba8b 	vadd.f32	s22, s27, s22
 800603c:	ee33 3a26 	vadd.f32	s6, s6, s13
 8006040:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006044:	ee38 4a84 	vadd.f32	s8, s17, s8
 8006048:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800604c:	ee75 ba2b 	vadd.f32	s23, s10, s23
 8006050:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8006054:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8006058:	ee3a aa2c 	vadd.f32	s20, s20, s25
 800605c:	ee39 9a07 	vadd.f32	s18, s18, s14
 8006060:	ee37 3a83 	vadd.f32	s6, s15, s6
 8006064:	f47f aed8 	bne.w	8005e18 <arm_fir_f32+0xf4>
 8006068:	eb09 0104 	add.w	r1, r9, r4
 800606c:	46e3      	mov	fp, ip
 800606e:	b3a2      	cbz	r2, 80060da <arm_fir_f32+0x3b6>
 8006070:	4613      	mov	r3, r2
 8006072:	ecbb 6a01 	vldmia	fp!, {s12}
 8006076:	3b01      	subs	r3, #1
 8006078:	ecf1 5a01 	vldmia	r1!, {s11}
 800607c:	ee66 8a08 	vmul.f32	s17, s12, s16
 8006080:	ee66 3a22 	vmul.f32	s7, s12, s5
 8006084:	ee66 4a02 	vmul.f32	s9, s12, s4
 8006088:	ee26 5a21 	vmul.f32	s10, s12, s3
 800608c:	ee66 6a01 	vmul.f32	s13, s12, s2
 8006090:	ee26 7a20 	vmul.f32	s14, s12, s1
 8006094:	ee66 7a00 	vmul.f32	s15, s12, s0
 8006098:	ee26 6a25 	vmul.f32	s12, s12, s11
 800609c:	eeb0 8a62 	vmov.f32	s16, s5
 80060a0:	ee34 4a28 	vadd.f32	s8, s8, s17
 80060a4:	eef0 2a42 	vmov.f32	s5, s4
 80060a8:	ee3c ca23 	vadd.f32	s24, s24, s7
 80060ac:	eeb0 2a61 	vmov.f32	s4, s3
 80060b0:	ee7b baa4 	vadd.f32	s23, s23, s9
 80060b4:	eef0 1a41 	vmov.f32	s3, s2
 80060b8:	ee3b ba05 	vadd.f32	s22, s22, s10
 80060bc:	eeb0 1a60 	vmov.f32	s2, s1
 80060c0:	ee7a aaa6 	vadd.f32	s21, s21, s13
 80060c4:	eef0 0a40 	vmov.f32	s1, s0
 80060c8:	ee3a aa07 	vadd.f32	s20, s20, s14
 80060cc:	eeb0 0a65 	vmov.f32	s0, s11
 80060d0:	ee39 9a27 	vadd.f32	s18, s18, s15
 80060d4:	ee33 3a06 	vadd.f32	s6, s6, s12
 80060d8:	d1cb      	bne.n	8006072 <arm_fir_f32+0x34e>
 80060da:	f1be 0e01 	subs.w	lr, lr, #1
 80060de:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 80060e2:	ed05 ca07 	vstr	s24, [r5, #-28]	@ 0xffffffe4
 80060e6:	f107 0720 	add.w	r7, r7, #32
 80060ea:	ed45 ba06 	vstr	s23, [r5, #-24]	@ 0xffffffe8
 80060ee:	f106 0620 	add.w	r6, r6, #32
 80060f2:	ed05 ba05 	vstr	s22, [r5, #-20]	@ 0xffffffec
 80060f6:	f104 0420 	add.w	r4, r4, #32
 80060fa:	ed45 aa04 	vstr	s21, [r5, #-16]
 80060fe:	f105 0520 	add.w	r5, r5, #32
 8006102:	ed05 aa0b 	vstr	s20, [r5, #-44]	@ 0xffffffd4
 8006106:	ed05 9a0a 	vstr	s18, [r5, #-40]	@ 0xffffffd8
 800610a:	ed05 3a09 	vstr	s6, [r5, #-36]	@ 0xffffffdc
 800610e:	f47f ae3c 	bne.w	8005d8a <arm_fir_f32+0x66>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	4652      	mov	r2, sl
 8006116:	9801      	ldr	r0, [sp, #4]
 8006118:	015b      	lsls	r3, r3, #5
 800611a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800611e:	9907      	ldr	r1, [sp, #28]
 8006120:	4418      	add	r0, r3
 8006122:	449c      	add	ip, r3
 8006124:	4419      	add	r1, r3
 8006126:	441a      	add	r2, r3
 8006128:	9001      	str	r0, [sp, #4]
 800612a:	9b05      	ldr	r3, [sp, #20]
 800612c:	f013 0e07 	ands.w	lr, r3, #7
 8006130:	d022      	beq.n	8006178 <arm_fir_f32+0x454>
 8006132:	9f01      	ldr	r7, [sp, #4]
 8006134:	4676      	mov	r6, lr
 8006136:	4665      	mov	r5, ip
 8006138:	f8dd a008 	ldr.w	sl, [sp, #8]
 800613c:	f851 9b04 	ldr.w	r9, [r1], #4
 8006140:	4653      	mov	r3, sl
 8006142:	4644      	mov	r4, r8
 8006144:	eddf 6a02 	vldr	s13, [pc, #8]	@ 8006150 <arm_fir_f32+0x42c>
 8006148:	4628      	mov	r0, r5
 800614a:	f847 9b04 	str.w	r9, [r7], #4
 800614e:	e001      	b.n	8006154 <arm_fir_f32+0x430>
 8006150:	00000000 	.word	0x00000000
 8006154:	ecb0 7a01 	vldmia	r0!, {s14}
 8006158:	3b01      	subs	r3, #1
 800615a:	ecf4 7a01 	vldmia	r4!, {s15}
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006166:	d1f5      	bne.n	8006154 <arm_fir_f32+0x430>
 8006168:	3e01      	subs	r6, #1
 800616a:	ece2 6a01 	vstmia	r2!, {s13}
 800616e:	f105 0504 	add.w	r5, r5, #4
 8006172:	d1e3      	bne.n	800613c <arm_fir_f32+0x418>
 8006174:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8006178:	9b02      	ldr	r3, [sp, #8]
 800617a:	1e59      	subs	r1, r3, #1
 800617c:	9b04      	ldr	r3, [sp, #16]
 800617e:	088e      	lsrs	r6, r1, #2
 8006180:	685c      	ldr	r4, [r3, #4]
 8006182:	d01d      	beq.n	80061c0 <arm_fir_f32+0x49c>
 8006184:	f104 0210 	add.w	r2, r4, #16
 8006188:	f10c 0310 	add.w	r3, ip, #16
 800618c:	4630      	mov	r0, r6
 800618e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8006192:	3801      	subs	r0, #1
 8006194:	f103 0310 	add.w	r3, r3, #16
 8006198:	f102 0210 	add.w	r2, r2, #16
 800619c:	f842 5c20 	str.w	r5, [r2, #-32]
 80061a0:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 80061a4:	f842 5c1c 	str.w	r5, [r2, #-28]
 80061a8:	f853 5c18 	ldr.w	r5, [r3, #-24]
 80061ac:	f842 5c18 	str.w	r5, [r2, #-24]
 80061b0:	f853 5c14 	ldr.w	r5, [r3, #-20]
 80061b4:	f842 5c14 	str.w	r5, [r2, #-20]
 80061b8:	d1e9      	bne.n	800618e <arm_fir_f32+0x46a>
 80061ba:	0133      	lsls	r3, r6, #4
 80061bc:	441c      	add	r4, r3
 80061be:	449c      	add	ip, r3
 80061c0:	f011 0303 	ands.w	r3, r1, #3
 80061c4:	d006      	beq.n	80061d4 <arm_fir_f32+0x4b0>
 80061c6:	4622      	mov	r2, r4
 80061c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80061cc:	3b01      	subs	r3, #1
 80061ce:	f842 1b04 	str.w	r1, [r2], #4
 80061d2:	d1f9      	bne.n	80061c8 <arm_fir_f32+0x4a4>
 80061d4:	b009      	add	sp, #36	@ 0x24
 80061d6:	ecbd 8b10 	vpop	{d8-d15}
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	46c3      	mov	fp, r8
 80061e0:	eeb0 9a43 	vmov.f32	s18, s6
 80061e4:	eeb0 aa43 	vmov.f32	s20, s6
 80061e8:	eef0 aa43 	vmov.f32	s21, s6
 80061ec:	eeb0 ba43 	vmov.f32	s22, s6
 80061f0:	eef0 ba43 	vmov.f32	s23, s6
 80061f4:	eeb0 ca43 	vmov.f32	s24, s6
 80061f8:	eeb0 4a43 	vmov.f32	s8, s6
 80061fc:	e737      	b.n	800606e <arm_fir_f32+0x34a>
 80061fe:	bf00      	nop

08006200 <arm_biquad_cascade_df1_init_f32>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	461d      	mov	r5, r3
 8006208:	2100      	movs	r1, #0
 800620a:	60a2      	str	r2, [r4, #8]
 800620c:	0102      	lsls	r2, r0, #4
 800620e:	6020      	str	r0, [r4, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f836 	bl	8007282 <memset>
 8006216:	6065      	str	r5, [r4, #4]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop

0800621c <arm_biquad_cascade_df1_f32>:
 800621c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006224:	4696      	mov	lr, r2
 8006226:	6886      	ldr	r6, [r0, #8]
 8006228:	6845      	ldr	r5, [r0, #4]
 800622a:	ea4f 180c 	mov.w	r8, ip, lsl #4
 800622e:	f003 0203 	and.w	r2, r3, #3
 8006232:	3614      	adds	r6, #20
 8006234:	3510      	adds	r5, #16
 8006236:	6807      	ldr	r7, [r0, #0]
 8006238:	eb0e 0908 	add.w	r9, lr, r8
 800623c:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 8006240:	ed16 3a04 	vldr	s6, [r6, #-16]
 8006244:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006248:	ed16 2a02 	vldr	s4, [r6, #-8]
 800624c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006250:	ed15 1a04 	vldr	s2, [r5, #-16]
 8006254:	ed55 0a03 	vldr	s1, [r5, #-12]
 8006258:	ed55 7a02 	vldr	s15, [r5, #-8]
 800625c:	ed15 6a01 	vldr	s12, [r5, #-4]
 8006260:	f1bc 0f00 	cmp.w	ip, #0
 8006264:	f000 80a3 	beq.w	80063ae <arm_biquad_cascade_df1_f32+0x192>
 8006268:	f101 0010 	add.w	r0, r1, #16
 800626c:	f10e 0310 	add.w	r3, lr, #16
 8006270:	4664      	mov	r4, ip
 8006272:	ed10 4a04 	vldr	s8, [r0, #-16]
 8006276:	ee23 7a01 	vmul.f32	s14, s6, s2
 800627a:	ee62 0aa0 	vmul.f32	s1, s5, s1
 800627e:	3c01      	subs	r4, #1
 8006280:	ee23 5a84 	vmul.f32	s10, s7, s8
 8006284:	f100 0010 	add.w	r0, r0, #16
 8006288:	ee22 0a27 	vmul.f32	s0, s4, s15
 800628c:	f103 0310 	add.w	r3, r3, #16
 8006290:	ee21 6a86 	vmul.f32	s12, s3, s12
 8006294:	ee75 4a07 	vadd.f32	s9, s10, s14
 8006298:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800629c:	ee63 5a04 	vmul.f32	s11, s6, s8
 80062a0:	ee34 7aa0 	vadd.f32	s14, s9, s1
 80062a4:	ee22 1a81 	vmul.f32	s2, s5, s2
 80062a8:	ee22 4a84 	vmul.f32	s8, s5, s8
 80062ac:	ee37 7a00 	vadd.f32	s14, s14, s0
 80062b0:	ee37 6a06 	vadd.f32	s12, s14, s12
 80062b4:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 80062b8:	ee22 7a06 	vmul.f32	s14, s4, s12
 80062bc:	ed50 7a07 	vldr	s15, [r0, #-28]	@ 0xffffffe4
 80062c0:	ee21 6a86 	vmul.f32	s12, s3, s12
 80062c4:	ee23 5aa7 	vmul.f32	s10, s7, s15
 80062c8:	ee23 0a27 	vmul.f32	s0, s6, s15
 80062cc:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80062d0:	ee35 5a25 	vadd.f32	s10, s10, s11
 80062d4:	ee75 5a01 	vadd.f32	s11, s10, s2
 80062d8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80062dc:	ee75 6aa6 	vadd.f32	s13, s11, s13
 80062e0:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80062e4:	ee62 7a26 	vmul.f32	s15, s4, s13
 80062e8:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 80062ec:	ee61 5aa6 	vmul.f32	s11, s3, s13
 80062f0:	ee23 5aa0 	vmul.f32	s10, s7, s1
 80062f4:	ee23 7a20 	vmul.f32	s14, s6, s1
 80062f8:	ee35 5a00 	vadd.f32	s10, s10, s0
 80062fc:	ee75 6a04 	vadd.f32	s13, s10, s8
 8006300:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006304:	ee36 6a86 	vadd.f32	s12, s13, s12
 8006308:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800630c:	ee62 7a06 	vmul.f32	s15, s4, s12
 8006310:	ed10 1a05 	vldr	s2, [r0, #-20]	@ 0xffffffec
 8006314:	ee63 6a81 	vmul.f32	s13, s7, s2
 8006318:	ee36 7a87 	vadd.f32	s14, s13, s14
 800631c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8006320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006324:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8006328:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800632c:	d1a1      	bne.n	8006272 <arm_biquad_cascade_df1_f32+0x56>
 800632e:	4441      	add	r1, r8
 8006330:	4648      	mov	r0, r9
 8006332:	b39a      	cbz	r2, 800639c <arm_biquad_cascade_df1_f32+0x180>
 8006334:	4613      	mov	r3, r2
 8006336:	e003      	b.n	8006340 <arm_biquad_cascade_df1_f32+0x124>
 8006338:	eef0 7a45 	vmov.f32	s15, s10
 800633c:	eeb0 1a47 	vmov.f32	s2, s14
 8006340:	ecb1 7a01 	vldmia	r1!, {s14}
 8006344:	ee63 4a01 	vmul.f32	s9, s6, s2
 8006348:	ee62 5aa0 	vmul.f32	s11, s5, s1
 800634c:	3b01      	subs	r3, #1
 800634e:	ee23 4a87 	vmul.f32	s8, s7, s14
 8006352:	ee22 5a27 	vmul.f32	s10, s4, s15
 8006356:	ee61 6a86 	vmul.f32	s13, s3, s12
 800635a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800635e:	eef0 0a41 	vmov.f32	s1, s2
 8006362:	eeb0 6a67 	vmov.f32	s12, s15
 8006366:	ee74 4aa5 	vadd.f32	s9, s9, s11
 800636a:	ee34 5a85 	vadd.f32	s10, s9, s10
 800636e:	ee35 5a26 	vadd.f32	s10, s10, s13
 8006372:	eca0 5a01 	vstmia	r0!, {s10}
 8006376:	d1df      	bne.n	8006338 <arm_biquad_cascade_df1_f32+0x11c>
 8006378:	3f01      	subs	r7, #1
 800637a:	ed05 7a04 	vstr	s14, [r5, #-16]
 800637e:	ed05 1a03 	vstr	s2, [r5, #-12]
 8006382:	f106 0614 	add.w	r6, r6, #20
 8006386:	ed05 5a02 	vstr	s10, [r5, #-8]
 800638a:	4671      	mov	r1, lr
 800638c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006390:	f105 0510 	add.w	r5, r5, #16
 8006394:	f47f af52 	bne.w	800623c <arm_biquad_cascade_df1_f32+0x20>
 8006398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800639c:	eeb0 5a67 	vmov.f32	s10, s15
 80063a0:	eeb0 7a41 	vmov.f32	s14, s2
 80063a4:	eef0 7a46 	vmov.f32	s15, s12
 80063a8:	eeb0 1a60 	vmov.f32	s2, s1
 80063ac:	e7e4      	b.n	8006378 <arm_biquad_cascade_df1_f32+0x15c>
 80063ae:	4670      	mov	r0, lr
 80063b0:	e7bf      	b.n	8006332 <arm_biquad_cascade_df1_f32+0x116>
 80063b2:	bf00      	nop

080063b4 <__cvt>:
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	ed2d 8b02 	vpush	{d8}
 80063ba:	eeb0 8b40 	vmov.f64	d8, d0
 80063be:	b085      	sub	sp, #20
 80063c0:	4617      	mov	r7, r2
 80063c2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80063c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063c6:	ee18 2a90 	vmov	r2, s17
 80063ca:	f025 0520 	bic.w	r5, r5, #32
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	bfb6      	itet	lt
 80063d2:	222d      	movlt	r2, #45	@ 0x2d
 80063d4:	2200      	movge	r2, #0
 80063d6:	eeb1 8b40 	vneglt.f64	d8, d0
 80063da:	2d46      	cmp	r5, #70	@ 0x46
 80063dc:	460c      	mov	r4, r1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	d004      	beq.n	80063ec <__cvt+0x38>
 80063e2:	2d45      	cmp	r5, #69	@ 0x45
 80063e4:	d100      	bne.n	80063e8 <__cvt+0x34>
 80063e6:	3401      	adds	r4, #1
 80063e8:	2102      	movs	r1, #2
 80063ea:	e000      	b.n	80063ee <__cvt+0x3a>
 80063ec:	2103      	movs	r1, #3
 80063ee:	ab03      	add	r3, sp, #12
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	ab02      	add	r3, sp, #8
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4622      	mov	r2, r4
 80063f8:	4633      	mov	r3, r6
 80063fa:	eeb0 0b48 	vmov.f64	d0, d8
 80063fe:	f001 f85f 	bl	80074c0 <_dtoa_r>
 8006402:	2d47      	cmp	r5, #71	@ 0x47
 8006404:	d114      	bne.n	8006430 <__cvt+0x7c>
 8006406:	07fb      	lsls	r3, r7, #31
 8006408:	d50a      	bpl.n	8006420 <__cvt+0x6c>
 800640a:	1902      	adds	r2, r0, r4
 800640c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	bf08      	it	eq
 8006416:	9203      	streq	r2, [sp, #12]
 8006418:	2130      	movs	r1, #48	@ 0x30
 800641a:	9b03      	ldr	r3, [sp, #12]
 800641c:	4293      	cmp	r3, r2
 800641e:	d319      	bcc.n	8006454 <__cvt+0xa0>
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006424:	1a1b      	subs	r3, r3, r0
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	b005      	add	sp, #20
 800642a:	ecbd 8b02 	vpop	{d8}
 800642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006430:	2d46      	cmp	r5, #70	@ 0x46
 8006432:	eb00 0204 	add.w	r2, r0, r4
 8006436:	d1e9      	bne.n	800640c <__cvt+0x58>
 8006438:	7803      	ldrb	r3, [r0, #0]
 800643a:	2b30      	cmp	r3, #48	@ 0x30
 800643c:	d107      	bne.n	800644e <__cvt+0x9a>
 800643e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	bf1c      	itt	ne
 8006448:	f1c4 0401 	rsbne	r4, r4, #1
 800644c:	6034      	strne	r4, [r6, #0]
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	441a      	add	r2, r3
 8006452:	e7db      	b.n	800640c <__cvt+0x58>
 8006454:	1c5c      	adds	r4, r3, #1
 8006456:	9403      	str	r4, [sp, #12]
 8006458:	7019      	strb	r1, [r3, #0]
 800645a:	e7de      	b.n	800641a <__cvt+0x66>

0800645c <__exponent>:
 800645c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800645e:	2900      	cmp	r1, #0
 8006460:	bfba      	itte	lt
 8006462:	4249      	neglt	r1, r1
 8006464:	232d      	movlt	r3, #45	@ 0x2d
 8006466:	232b      	movge	r3, #43	@ 0x2b
 8006468:	2909      	cmp	r1, #9
 800646a:	7002      	strb	r2, [r0, #0]
 800646c:	7043      	strb	r3, [r0, #1]
 800646e:	dd29      	ble.n	80064c4 <__exponent+0x68>
 8006470:	f10d 0307 	add.w	r3, sp, #7
 8006474:	461d      	mov	r5, r3
 8006476:	270a      	movs	r7, #10
 8006478:	461a      	mov	r2, r3
 800647a:	fbb1 f6f7 	udiv	r6, r1, r7
 800647e:	fb07 1416 	mls	r4, r7, r6, r1
 8006482:	3430      	adds	r4, #48	@ 0x30
 8006484:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006488:	460c      	mov	r4, r1
 800648a:	2c63      	cmp	r4, #99	@ 0x63
 800648c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006490:	4631      	mov	r1, r6
 8006492:	dcf1      	bgt.n	8006478 <__exponent+0x1c>
 8006494:	3130      	adds	r1, #48	@ 0x30
 8006496:	1e94      	subs	r4, r2, #2
 8006498:	f803 1c01 	strb.w	r1, [r3, #-1]
 800649c:	1c41      	adds	r1, r0, #1
 800649e:	4623      	mov	r3, r4
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	d30a      	bcc.n	80064ba <__exponent+0x5e>
 80064a4:	f10d 0309 	add.w	r3, sp, #9
 80064a8:	1a9b      	subs	r3, r3, r2
 80064aa:	42ac      	cmp	r4, r5
 80064ac:	bf88      	it	hi
 80064ae:	2300      	movhi	r3, #0
 80064b0:	3302      	adds	r3, #2
 80064b2:	4403      	add	r3, r0
 80064b4:	1a18      	subs	r0, r3, r0
 80064b6:	b003      	add	sp, #12
 80064b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064c2:	e7ed      	b.n	80064a0 <__exponent+0x44>
 80064c4:	2330      	movs	r3, #48	@ 0x30
 80064c6:	3130      	adds	r1, #48	@ 0x30
 80064c8:	7083      	strb	r3, [r0, #2]
 80064ca:	70c1      	strb	r1, [r0, #3]
 80064cc:	1d03      	adds	r3, r0, #4
 80064ce:	e7f1      	b.n	80064b4 <__exponent+0x58>

080064d0 <_printf_float>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b08d      	sub	sp, #52	@ 0x34
 80064d6:	460c      	mov	r4, r1
 80064d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064dc:	4616      	mov	r6, r2
 80064de:	461f      	mov	r7, r3
 80064e0:	4605      	mov	r5, r0
 80064e2:	f000 fed7 	bl	8007294 <_localeconv_r>
 80064e6:	f8d0 b000 	ldr.w	fp, [r0]
 80064ea:	4658      	mov	r0, fp
 80064ec:	f7f9 fef8 	bl	80002e0 <strlen>
 80064f0:	2300      	movs	r3, #0
 80064f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f4:	f8d8 3000 	ldr.w	r3, [r8]
 80064f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	9005      	str	r0, [sp, #20]
 8006500:	3307      	adds	r3, #7
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	f103 0108 	add.w	r1, r3, #8
 800650a:	f8c8 1000 	str.w	r1, [r8]
 800650e:	ed93 0b00 	vldr	d0, [r3]
 8006512:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006770 <_printf_float+0x2a0>
 8006516:	eeb0 7bc0 	vabs.f64	d7, d0
 800651a:	eeb4 7b46 	vcmp.f64	d7, d6
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006526:	dd24      	ble.n	8006572 <_printf_float+0xa2>
 8006528:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800652c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006530:	d502      	bpl.n	8006538 <_printf_float+0x68>
 8006532:	232d      	movs	r3, #45	@ 0x2d
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006538:	498f      	ldr	r1, [pc, #572]	@ (8006778 <_printf_float+0x2a8>)
 800653a:	4b90      	ldr	r3, [pc, #576]	@ (800677c <_printf_float+0x2ac>)
 800653c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006540:	bf94      	ite	ls
 8006542:	4688      	movls	r8, r1
 8006544:	4698      	movhi	r8, r3
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	2303      	movs	r3, #3
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	6022      	str	r2, [r4, #0]
 8006550:	f04f 0a00 	mov.w	sl, #0
 8006554:	9700      	str	r7, [sp, #0]
 8006556:	4633      	mov	r3, r6
 8006558:	aa0b      	add	r2, sp, #44	@ 0x2c
 800655a:	4621      	mov	r1, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f9d1 	bl	8006904 <_printf_common>
 8006562:	3001      	adds	r0, #1
 8006564:	f040 8089 	bne.w	800667a <_printf_float+0x1aa>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	b00d      	add	sp, #52	@ 0x34
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	eeb4 0b40 	vcmp.f64	d0, d0
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	d709      	bvc.n	8006590 <_printf_float+0xc0>
 800657c:	ee10 3a90 	vmov	r3, s1
 8006580:	2b00      	cmp	r3, #0
 8006582:	bfbc      	itt	lt
 8006584:	232d      	movlt	r3, #45	@ 0x2d
 8006586:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800658a:	497d      	ldr	r1, [pc, #500]	@ (8006780 <_printf_float+0x2b0>)
 800658c:	4b7d      	ldr	r3, [pc, #500]	@ (8006784 <_printf_float+0x2b4>)
 800658e:	e7d5      	b.n	800653c <_printf_float+0x6c>
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006598:	d139      	bne.n	800660e <_printf_float+0x13e>
 800659a:	2306      	movs	r3, #6
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065a2:	2300      	movs	r3, #0
 80065a4:	6022      	str	r2, [r4, #0]
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80065aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80065ae:	ab09      	add	r3, sp, #36	@ 0x24
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	6861      	ldr	r1, [r4, #4]
 80065b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065b8:	4628      	mov	r0, r5
 80065ba:	f7ff fefb 	bl	80063b4 <__cvt>
 80065be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065c4:	4680      	mov	r8, r0
 80065c6:	d129      	bne.n	800661c <_printf_float+0x14c>
 80065c8:	1cc8      	adds	r0, r1, #3
 80065ca:	db02      	blt.n	80065d2 <_printf_float+0x102>
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	4299      	cmp	r1, r3
 80065d0:	dd41      	ble.n	8006656 <_printf_float+0x186>
 80065d2:	f1a9 0902 	sub.w	r9, r9, #2
 80065d6:	fa5f f989 	uxtb.w	r9, r9
 80065da:	3901      	subs	r1, #1
 80065dc:	464a      	mov	r2, r9
 80065de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80065e4:	f7ff ff3a 	bl	800645c <__exponent>
 80065e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065ea:	1813      	adds	r3, r2, r0
 80065ec:	2a01      	cmp	r2, #1
 80065ee:	4682      	mov	sl, r0
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	dc02      	bgt.n	80065fa <_printf_float+0x12a>
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	07d2      	lsls	r2, r2, #31
 80065f8:	d501      	bpl.n	80065fe <_printf_float+0x12e>
 80065fa:	3301      	adds	r3, #1
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0a6      	beq.n	8006554 <_printf_float+0x84>
 8006606:	232d      	movs	r3, #45	@ 0x2d
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660c:	e7a2      	b.n	8006554 <_printf_float+0x84>
 800660e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006612:	d1c4      	bne.n	800659e <_printf_float+0xce>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1c2      	bne.n	800659e <_printf_float+0xce>
 8006618:	2301      	movs	r3, #1
 800661a:	e7bf      	b.n	800659c <_printf_float+0xcc>
 800661c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006620:	d9db      	bls.n	80065da <_printf_float+0x10a>
 8006622:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006626:	d118      	bne.n	800665a <_printf_float+0x18a>
 8006628:	2900      	cmp	r1, #0
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	dd0b      	ble.n	8006646 <_printf_float+0x176>
 800662e:	6121      	str	r1, [r4, #16]
 8006630:	b913      	cbnz	r3, 8006638 <_printf_float+0x168>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	07d0      	lsls	r0, r2, #31
 8006636:	d502      	bpl.n	800663e <_printf_float+0x16e>
 8006638:	3301      	adds	r3, #1
 800663a:	440b      	add	r3, r1
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006640:	f04f 0a00 	mov.w	sl, #0
 8006644:	e7db      	b.n	80065fe <_printf_float+0x12e>
 8006646:	b913      	cbnz	r3, 800664e <_printf_float+0x17e>
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	07d2      	lsls	r2, r2, #31
 800664c:	d501      	bpl.n	8006652 <_printf_float+0x182>
 800664e:	3302      	adds	r3, #2
 8006650:	e7f4      	b.n	800663c <_printf_float+0x16c>
 8006652:	2301      	movs	r3, #1
 8006654:	e7f2      	b.n	800663c <_printf_float+0x16c>
 8006656:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800665a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665c:	4299      	cmp	r1, r3
 800665e:	db05      	blt.n	800666c <_printf_float+0x19c>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	6121      	str	r1, [r4, #16]
 8006664:	07d8      	lsls	r0, r3, #31
 8006666:	d5ea      	bpl.n	800663e <_printf_float+0x16e>
 8006668:	1c4b      	adds	r3, r1, #1
 800666a:	e7e7      	b.n	800663c <_printf_float+0x16c>
 800666c:	2900      	cmp	r1, #0
 800666e:	bfd4      	ite	le
 8006670:	f1c1 0202 	rsble	r2, r1, #2
 8006674:	2201      	movgt	r2, #1
 8006676:	4413      	add	r3, r2
 8006678:	e7e0      	b.n	800663c <_printf_float+0x16c>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	055a      	lsls	r2, r3, #21
 800667e:	d407      	bmi.n	8006690 <_printf_float+0x1c0>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	4642      	mov	r2, r8
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	d12a      	bne.n	80066e4 <_printf_float+0x214>
 800668e:	e76b      	b.n	8006568 <_printf_float+0x98>
 8006690:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006694:	f240 80e0 	bls.w	8006858 <_printf_float+0x388>
 8006698:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800669c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a4:	d133      	bne.n	800670e <_printf_float+0x23e>
 80066a6:	4a38      	ldr	r2, [pc, #224]	@ (8006788 <_printf_float+0x2b8>)
 80066a8:	2301      	movs	r3, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	f43f af59 	beq.w	8006568 <_printf_float+0x98>
 80066b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066ba:	4543      	cmp	r3, r8
 80066bc:	db02      	blt.n	80066c4 <_printf_float+0x1f4>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	07d8      	lsls	r0, r3, #31
 80066c2:	d50f      	bpl.n	80066e4 <_printf_float+0x214>
 80066c4:	9b05      	ldr	r3, [sp, #20]
 80066c6:	465a      	mov	r2, fp
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	f43f af4a 	beq.w	8006568 <_printf_float+0x98>
 80066d4:	f04f 0900 	mov.w	r9, #0
 80066d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80066dc:	f104 0a1a 	add.w	sl, r4, #26
 80066e0:	45c8      	cmp	r8, r9
 80066e2:	dc09      	bgt.n	80066f8 <_printf_float+0x228>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	079b      	lsls	r3, r3, #30
 80066e8:	f100 8107 	bmi.w	80068fa <_printf_float+0x42a>
 80066ec:	68e0      	ldr	r0, [r4, #12]
 80066ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066f0:	4298      	cmp	r0, r3
 80066f2:	bfb8      	it	lt
 80066f4:	4618      	movlt	r0, r3
 80066f6:	e739      	b.n	800656c <_printf_float+0x9c>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4652      	mov	r2, sl
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	f43f af30 	beq.w	8006568 <_printf_float+0x98>
 8006708:	f109 0901 	add.w	r9, r9, #1
 800670c:	e7e8      	b.n	80066e0 <_printf_float+0x210>
 800670e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc3b      	bgt.n	800678c <_printf_float+0x2bc>
 8006714:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <_printf_float+0x2b8>)
 8006716:	2301      	movs	r3, #1
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f af22 	beq.w	8006568 <_printf_float+0x98>
 8006724:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006728:	ea59 0303 	orrs.w	r3, r9, r3
 800672c:	d102      	bne.n	8006734 <_printf_float+0x264>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	07d9      	lsls	r1, r3, #31
 8006732:	d5d7      	bpl.n	80066e4 <_printf_float+0x214>
 8006734:	9b05      	ldr	r3, [sp, #20]
 8006736:	465a      	mov	r2, fp
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af12 	beq.w	8006568 <_printf_float+0x98>
 8006744:	f04f 0a00 	mov.w	sl, #0
 8006748:	f104 0b1a 	add.w	fp, r4, #26
 800674c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674e:	425b      	negs	r3, r3
 8006750:	4553      	cmp	r3, sl
 8006752:	dc01      	bgt.n	8006758 <_printf_float+0x288>
 8006754:	464b      	mov	r3, r9
 8006756:	e794      	b.n	8006682 <_printf_float+0x1b2>
 8006758:	2301      	movs	r3, #1
 800675a:	465a      	mov	r2, fp
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f af00 	beq.w	8006568 <_printf_float+0x98>
 8006768:	f10a 0a01 	add.w	sl, sl, #1
 800676c:	e7ee      	b.n	800674c <_printf_float+0x27c>
 800676e:	bf00      	nop
 8006770:	ffffffff 	.word	0xffffffff
 8006774:	7fefffff 	.word	0x7fefffff
 8006778:	0800a8f8 	.word	0x0800a8f8
 800677c:	0800a8fc 	.word	0x0800a8fc
 8006780:	0800a900 	.word	0x0800a900
 8006784:	0800a904 	.word	0x0800a904
 8006788:	0800a908 	.word	0x0800a908
 800678c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800678e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006792:	4553      	cmp	r3, sl
 8006794:	bfa8      	it	ge
 8006796:	4653      	movge	r3, sl
 8006798:	2b00      	cmp	r3, #0
 800679a:	4699      	mov	r9, r3
 800679c:	dc37      	bgt.n	800680e <_printf_float+0x33e>
 800679e:	2300      	movs	r3, #0
 80067a0:	9307      	str	r3, [sp, #28]
 80067a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067a6:	f104 021a 	add.w	r2, r4, #26
 80067aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ac:	9907      	ldr	r1, [sp, #28]
 80067ae:	9306      	str	r3, [sp, #24]
 80067b0:	eba3 0309 	sub.w	r3, r3, r9
 80067b4:	428b      	cmp	r3, r1
 80067b6:	dc31      	bgt.n	800681c <_printf_float+0x34c>
 80067b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ba:	459a      	cmp	sl, r3
 80067bc:	dc3b      	bgt.n	8006836 <_printf_float+0x366>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07da      	lsls	r2, r3, #31
 80067c2:	d438      	bmi.n	8006836 <_printf_float+0x366>
 80067c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c6:	ebaa 0903 	sub.w	r9, sl, r3
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	ebaa 0303 	sub.w	r3, sl, r3
 80067d0:	4599      	cmp	r9, r3
 80067d2:	bfa8      	it	ge
 80067d4:	4699      	movge	r9, r3
 80067d6:	f1b9 0f00 	cmp.w	r9, #0
 80067da:	dc34      	bgt.n	8006846 <_printf_float+0x376>
 80067dc:	f04f 0800 	mov.w	r8, #0
 80067e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e4:	f104 0b1a 	add.w	fp, r4, #26
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	ebaa 0303 	sub.w	r3, sl, r3
 80067ee:	eba3 0309 	sub.w	r3, r3, r9
 80067f2:	4543      	cmp	r3, r8
 80067f4:	f77f af76 	ble.w	80066e4 <_printf_float+0x214>
 80067f8:	2301      	movs	r3, #1
 80067fa:	465a      	mov	r2, fp
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f aeb0 	beq.w	8006568 <_printf_float+0x98>
 8006808:	f108 0801 	add.w	r8, r8, #1
 800680c:	e7ec      	b.n	80067e8 <_printf_float+0x318>
 800680e:	4642      	mov	r2, r8
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	d1c1      	bne.n	800679e <_printf_float+0x2ce>
 800681a:	e6a5      	b.n	8006568 <_printf_float+0x98>
 800681c:	2301      	movs	r3, #1
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	9206      	str	r2, [sp, #24]
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f ae9e 	beq.w	8006568 <_printf_float+0x98>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	9a06      	ldr	r2, [sp, #24]
 8006830:	3301      	adds	r3, #1
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	e7b9      	b.n	80067aa <_printf_float+0x2da>
 8006836:	9b05      	ldr	r3, [sp, #20]
 8006838:	465a      	mov	r2, fp
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	d1bf      	bne.n	80067c4 <_printf_float+0x2f4>
 8006844:	e690      	b.n	8006568 <_printf_float+0x98>
 8006846:	9a06      	ldr	r2, [sp, #24]
 8006848:	464b      	mov	r3, r9
 800684a:	4442      	add	r2, r8
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	d1c2      	bne.n	80067dc <_printf_float+0x30c>
 8006856:	e687      	b.n	8006568 <_printf_float+0x98>
 8006858:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800685c:	f1b9 0f01 	cmp.w	r9, #1
 8006860:	dc01      	bgt.n	8006866 <_printf_float+0x396>
 8006862:	07db      	lsls	r3, r3, #31
 8006864:	d536      	bpl.n	80068d4 <_printf_float+0x404>
 8006866:	2301      	movs	r3, #1
 8006868:	4642      	mov	r2, r8
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f ae79 	beq.w	8006568 <_printf_float+0x98>
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	465a      	mov	r2, fp
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f ae71 	beq.w	8006568 <_printf_float+0x98>
 8006886:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800688a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006892:	f109 39ff 	add.w	r9, r9, #4294967295
 8006896:	d018      	beq.n	80068ca <_printf_float+0x3fa>
 8006898:	464b      	mov	r3, r9
 800689a:	f108 0201 	add.w	r2, r8, #1
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b8      	blx	r7
 80068a4:	3001      	adds	r0, #1
 80068a6:	d10c      	bne.n	80068c2 <_printf_float+0x3f2>
 80068a8:	e65e      	b.n	8006568 <_printf_float+0x98>
 80068aa:	2301      	movs	r3, #1
 80068ac:	465a      	mov	r2, fp
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b8      	blx	r7
 80068b4:	3001      	adds	r0, #1
 80068b6:	f43f ae57 	beq.w	8006568 <_printf_float+0x98>
 80068ba:	f108 0801 	add.w	r8, r8, #1
 80068be:	45c8      	cmp	r8, r9
 80068c0:	dbf3      	blt.n	80068aa <_printf_float+0x3da>
 80068c2:	4653      	mov	r3, sl
 80068c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068c8:	e6dc      	b.n	8006684 <_printf_float+0x1b4>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	f104 0b1a 	add.w	fp, r4, #26
 80068d2:	e7f4      	b.n	80068be <_printf_float+0x3ee>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4642      	mov	r2, r8
 80068d8:	e7e1      	b.n	800689e <_printf_float+0x3ce>
 80068da:	2301      	movs	r3, #1
 80068dc:	464a      	mov	r2, r9
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f ae3f 	beq.w	8006568 <_printf_float+0x98>
 80068ea:	f108 0801 	add.w	r8, r8, #1
 80068ee:	68e3      	ldr	r3, [r4, #12]
 80068f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068f2:	1a5b      	subs	r3, r3, r1
 80068f4:	4543      	cmp	r3, r8
 80068f6:	dcf0      	bgt.n	80068da <_printf_float+0x40a>
 80068f8:	e6f8      	b.n	80066ec <_printf_float+0x21c>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	f104 0919 	add.w	r9, r4, #25
 8006902:	e7f4      	b.n	80068ee <_printf_float+0x41e>

08006904 <_printf_common>:
 8006904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	4616      	mov	r6, r2
 800690a:	4698      	mov	r8, r3
 800690c:	688a      	ldr	r2, [r1, #8]
 800690e:	690b      	ldr	r3, [r1, #16]
 8006910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006914:	4293      	cmp	r3, r2
 8006916:	bfb8      	it	lt
 8006918:	4613      	movlt	r3, r2
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006920:	4607      	mov	r7, r0
 8006922:	460c      	mov	r4, r1
 8006924:	b10a      	cbz	r2, 800692a <_printf_common+0x26>
 8006926:	3301      	adds	r3, #1
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	0699      	lsls	r1, r3, #26
 800692e:	bf42      	ittt	mi
 8006930:	6833      	ldrmi	r3, [r6, #0]
 8006932:	3302      	addmi	r3, #2
 8006934:	6033      	strmi	r3, [r6, #0]
 8006936:	6825      	ldr	r5, [r4, #0]
 8006938:	f015 0506 	ands.w	r5, r5, #6
 800693c:	d106      	bne.n	800694c <_printf_common+0x48>
 800693e:	f104 0a19 	add.w	sl, r4, #25
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	6832      	ldr	r2, [r6, #0]
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	42ab      	cmp	r3, r5
 800694a:	dc26      	bgt.n	800699a <_printf_common+0x96>
 800694c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	3b00      	subs	r3, #0
 8006954:	bf18      	it	ne
 8006956:	2301      	movne	r3, #1
 8006958:	0692      	lsls	r2, r2, #26
 800695a:	d42b      	bmi.n	80069b4 <_printf_common+0xb0>
 800695c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006960:	4641      	mov	r1, r8
 8006962:	4638      	mov	r0, r7
 8006964:	47c8      	blx	r9
 8006966:	3001      	adds	r0, #1
 8006968:	d01e      	beq.n	80069a8 <_printf_common+0xa4>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	6922      	ldr	r2, [r4, #16]
 800696e:	f003 0306 	and.w	r3, r3, #6
 8006972:	2b04      	cmp	r3, #4
 8006974:	bf02      	ittt	eq
 8006976:	68e5      	ldreq	r5, [r4, #12]
 8006978:	6833      	ldreq	r3, [r6, #0]
 800697a:	1aed      	subeq	r5, r5, r3
 800697c:	68a3      	ldr	r3, [r4, #8]
 800697e:	bf0c      	ite	eq
 8006980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006984:	2500      	movne	r5, #0
 8006986:	4293      	cmp	r3, r2
 8006988:	bfc4      	itt	gt
 800698a:	1a9b      	subgt	r3, r3, r2
 800698c:	18ed      	addgt	r5, r5, r3
 800698e:	2600      	movs	r6, #0
 8006990:	341a      	adds	r4, #26
 8006992:	42b5      	cmp	r5, r6
 8006994:	d11a      	bne.n	80069cc <_printf_common+0xc8>
 8006996:	2000      	movs	r0, #0
 8006998:	e008      	b.n	80069ac <_printf_common+0xa8>
 800699a:	2301      	movs	r3, #1
 800699c:	4652      	mov	r2, sl
 800699e:	4641      	mov	r1, r8
 80069a0:	4638      	mov	r0, r7
 80069a2:	47c8      	blx	r9
 80069a4:	3001      	adds	r0, #1
 80069a6:	d103      	bne.n	80069b0 <_printf_common+0xac>
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	3501      	adds	r5, #1
 80069b2:	e7c6      	b.n	8006942 <_printf_common+0x3e>
 80069b4:	18e1      	adds	r1, r4, r3
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	2030      	movs	r0, #48	@ 0x30
 80069ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069be:	4422      	add	r2, r4
 80069c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069c8:	3302      	adds	r3, #2
 80069ca:	e7c7      	b.n	800695c <_printf_common+0x58>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4622      	mov	r2, r4
 80069d0:	4641      	mov	r1, r8
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c8      	blx	r9
 80069d6:	3001      	adds	r0, #1
 80069d8:	d0e6      	beq.n	80069a8 <_printf_common+0xa4>
 80069da:	3601      	adds	r6, #1
 80069dc:	e7d9      	b.n	8006992 <_printf_common+0x8e>
	...

080069e0 <_printf_i>:
 80069e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e4:	7e0f      	ldrb	r7, [r1, #24]
 80069e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069e8:	2f78      	cmp	r7, #120	@ 0x78
 80069ea:	4691      	mov	r9, r2
 80069ec:	4680      	mov	r8, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	469a      	mov	sl, r3
 80069f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069f6:	d807      	bhi.n	8006a08 <_printf_i+0x28>
 80069f8:	2f62      	cmp	r7, #98	@ 0x62
 80069fa:	d80a      	bhi.n	8006a12 <_printf_i+0x32>
 80069fc:	2f00      	cmp	r7, #0
 80069fe:	f000 80d2 	beq.w	8006ba6 <_printf_i+0x1c6>
 8006a02:	2f58      	cmp	r7, #88	@ 0x58
 8006a04:	f000 80b9 	beq.w	8006b7a <_printf_i+0x19a>
 8006a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a10:	e03a      	b.n	8006a88 <_printf_i+0xa8>
 8006a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a16:	2b15      	cmp	r3, #21
 8006a18:	d8f6      	bhi.n	8006a08 <_printf_i+0x28>
 8006a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a20 <_printf_i+0x40>)
 8006a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a20:	08006a79 	.word	0x08006a79
 8006a24:	08006a8d 	.word	0x08006a8d
 8006a28:	08006a09 	.word	0x08006a09
 8006a2c:	08006a09 	.word	0x08006a09
 8006a30:	08006a09 	.word	0x08006a09
 8006a34:	08006a09 	.word	0x08006a09
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	08006a09 	.word	0x08006a09
 8006a40:	08006a09 	.word	0x08006a09
 8006a44:	08006a09 	.word	0x08006a09
 8006a48:	08006a09 	.word	0x08006a09
 8006a4c:	08006b8d 	.word	0x08006b8d
 8006a50:	08006ab7 	.word	0x08006ab7
 8006a54:	08006b47 	.word	0x08006b47
 8006a58:	08006a09 	.word	0x08006a09
 8006a5c:	08006a09 	.word	0x08006a09
 8006a60:	08006baf 	.word	0x08006baf
 8006a64:	08006a09 	.word	0x08006a09
 8006a68:	08006ab7 	.word	0x08006ab7
 8006a6c:	08006a09 	.word	0x08006a09
 8006a70:	08006a09 	.word	0x08006a09
 8006a74:	08006b4f 	.word	0x08006b4f
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	1d1a      	adds	r2, r3, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6032      	str	r2, [r6, #0]
 8006a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e09d      	b.n	8006bc8 <_printf_i+0x1e8>
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1d19      	adds	r1, r3, #4
 8006a92:	6031      	str	r1, [r6, #0]
 8006a94:	0606      	lsls	r6, r0, #24
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0xbc>
 8006a98:	681d      	ldr	r5, [r3, #0]
 8006a9a:	e003      	b.n	8006aa4 <_printf_i+0xc4>
 8006a9c:	0645      	lsls	r5, r0, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0xb8>
 8006aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	da03      	bge.n	8006ab0 <_printf_i+0xd0>
 8006aa8:	232d      	movs	r3, #45	@ 0x2d
 8006aaa:	426d      	negs	r5, r5
 8006aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab0:	4859      	ldr	r0, [pc, #356]	@ (8006c18 <_printf_i+0x238>)
 8006ab2:	230a      	movs	r3, #10
 8006ab4:	e011      	b.n	8006ada <_printf_i+0xfa>
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	6833      	ldr	r3, [r6, #0]
 8006aba:	0608      	lsls	r0, r1, #24
 8006abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ac0:	d402      	bmi.n	8006ac8 <_printf_i+0xe8>
 8006ac2:	0649      	lsls	r1, r1, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b2ad      	uxthmi	r5, r5
 8006ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006aca:	4853      	ldr	r0, [pc, #332]	@ (8006c18 <_printf_i+0x238>)
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	bf14      	ite	ne
 8006ad0:	230a      	movne	r3, #10
 8006ad2:	2308      	moveq	r3, #8
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ada:	6866      	ldr	r6, [r4, #4]
 8006adc:	60a6      	str	r6, [r4, #8]
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	bfa2      	ittt	ge
 8006ae2:	6821      	ldrge	r1, [r4, #0]
 8006ae4:	f021 0104 	bicge.w	r1, r1, #4
 8006ae8:	6021      	strge	r1, [r4, #0]
 8006aea:	b90d      	cbnz	r5, 8006af0 <_printf_i+0x110>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	d04b      	beq.n	8006b88 <_printf_i+0x1a8>
 8006af0:	4616      	mov	r6, r2
 8006af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006af6:	fb03 5711 	mls	r7, r3, r1, r5
 8006afa:	5dc7      	ldrb	r7, [r0, r7]
 8006afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b00:	462f      	mov	r7, r5
 8006b02:	42bb      	cmp	r3, r7
 8006b04:	460d      	mov	r5, r1
 8006b06:	d9f4      	bls.n	8006af2 <_printf_i+0x112>
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d10b      	bne.n	8006b24 <_printf_i+0x144>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	07df      	lsls	r7, r3, #31
 8006b10:	d508      	bpl.n	8006b24 <_printf_i+0x144>
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	6861      	ldr	r1, [r4, #4]
 8006b16:	4299      	cmp	r1, r3
 8006b18:	bfde      	ittt	le
 8006b1a:	2330      	movle	r3, #48	@ 0x30
 8006b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b24:	1b92      	subs	r2, r2, r6
 8006b26:	6122      	str	r2, [r4, #16]
 8006b28:	f8cd a000 	str.w	sl, [sp]
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	aa03      	add	r2, sp, #12
 8006b30:	4621      	mov	r1, r4
 8006b32:	4640      	mov	r0, r8
 8006b34:	f7ff fee6 	bl	8006904 <_printf_common>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d14a      	bne.n	8006bd2 <_printf_i+0x1f2>
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	b004      	add	sp, #16
 8006b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	f043 0320 	orr.w	r3, r3, #32
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	4833      	ldr	r0, [pc, #204]	@ (8006c1c <_printf_i+0x23c>)
 8006b50:	2778      	movs	r7, #120	@ 0x78
 8006b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	6831      	ldr	r1, [r6, #0]
 8006b5a:	061f      	lsls	r7, r3, #24
 8006b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b60:	d402      	bmi.n	8006b68 <_printf_i+0x188>
 8006b62:	065f      	lsls	r7, r3, #25
 8006b64:	bf48      	it	mi
 8006b66:	b2ad      	uxthmi	r5, r5
 8006b68:	6031      	str	r1, [r6, #0]
 8006b6a:	07d9      	lsls	r1, r3, #31
 8006b6c:	bf44      	itt	mi
 8006b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b72:	6023      	strmi	r3, [r4, #0]
 8006b74:	b11d      	cbz	r5, 8006b7e <_printf_i+0x19e>
 8006b76:	2310      	movs	r3, #16
 8006b78:	e7ac      	b.n	8006ad4 <_printf_i+0xf4>
 8006b7a:	4827      	ldr	r0, [pc, #156]	@ (8006c18 <_printf_i+0x238>)
 8006b7c:	e7e9      	b.n	8006b52 <_printf_i+0x172>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	f023 0320 	bic.w	r3, r3, #32
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	e7f6      	b.n	8006b76 <_printf_i+0x196>
 8006b88:	4616      	mov	r6, r2
 8006b8a:	e7bd      	b.n	8006b08 <_printf_i+0x128>
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	6825      	ldr	r5, [r4, #0]
 8006b90:	6961      	ldr	r1, [r4, #20]
 8006b92:	1d18      	adds	r0, r3, #4
 8006b94:	6030      	str	r0, [r6, #0]
 8006b96:	062e      	lsls	r6, r5, #24
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	d501      	bpl.n	8006ba0 <_printf_i+0x1c0>
 8006b9c:	6019      	str	r1, [r3, #0]
 8006b9e:	e002      	b.n	8006ba6 <_printf_i+0x1c6>
 8006ba0:	0668      	lsls	r0, r5, #25
 8006ba2:	d5fb      	bpl.n	8006b9c <_printf_i+0x1bc>
 8006ba4:	8019      	strh	r1, [r3, #0]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6123      	str	r3, [r4, #16]
 8006baa:	4616      	mov	r6, r2
 8006bac:	e7bc      	b.n	8006b28 <_printf_i+0x148>
 8006bae:	6833      	ldr	r3, [r6, #0]
 8006bb0:	1d1a      	adds	r2, r3, #4
 8006bb2:	6032      	str	r2, [r6, #0]
 8006bb4:	681e      	ldr	r6, [r3, #0]
 8006bb6:	6862      	ldr	r2, [r4, #4]
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7f9 fb40 	bl	8000240 <memchr>
 8006bc0:	b108      	cbz	r0, 8006bc6 <_printf_i+0x1e6>
 8006bc2:	1b80      	subs	r0, r0, r6
 8006bc4:	6060      	str	r0, [r4, #4]
 8006bc6:	6863      	ldr	r3, [r4, #4]
 8006bc8:	6123      	str	r3, [r4, #16]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd0:	e7aa      	b.n	8006b28 <_printf_i+0x148>
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4640      	mov	r0, r8
 8006bda:	47d0      	blx	sl
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d0ad      	beq.n	8006b3c <_printf_i+0x15c>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	079b      	lsls	r3, r3, #30
 8006be4:	d413      	bmi.n	8006c0e <_printf_i+0x22e>
 8006be6:	68e0      	ldr	r0, [r4, #12]
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	4298      	cmp	r0, r3
 8006bec:	bfb8      	it	lt
 8006bee:	4618      	movlt	r0, r3
 8006bf0:	e7a6      	b.n	8006b40 <_printf_i+0x160>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	47d0      	blx	sl
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d09d      	beq.n	8006b3c <_printf_i+0x15c>
 8006c00:	3501      	adds	r5, #1
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	9903      	ldr	r1, [sp, #12]
 8006c06:	1a5b      	subs	r3, r3, r1
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dcf2      	bgt.n	8006bf2 <_printf_i+0x212>
 8006c0c:	e7eb      	b.n	8006be6 <_printf_i+0x206>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	f104 0619 	add.w	r6, r4, #25
 8006c14:	e7f5      	b.n	8006c02 <_printf_i+0x222>
 8006c16:	bf00      	nop
 8006c18:	0800a90a 	.word	0x0800a90a
 8006c1c:	0800a91b 	.word	0x0800a91b

08006c20 <_scanf_float>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	b087      	sub	sp, #28
 8006c26:	4617      	mov	r7, r2
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	688b      	ldr	r3, [r1, #8]
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c32:	bf81      	itttt	hi
 8006c34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c38:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c40:	608b      	strhi	r3, [r1, #8]
 8006c42:	680b      	ldr	r3, [r1, #0]
 8006c44:	460a      	mov	r2, r1
 8006c46:	f04f 0500 	mov.w	r5, #0
 8006c4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c4e:	f842 3b1c 	str.w	r3, [r2], #28
 8006c52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c56:	4680      	mov	r8, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	bf98      	it	ls
 8006c5c:	f04f 0b00 	movls.w	fp, #0
 8006c60:	9201      	str	r2, [sp, #4]
 8006c62:	4616      	mov	r6, r2
 8006c64:	46aa      	mov	sl, r5
 8006c66:	46a9      	mov	r9, r5
 8006c68:	9502      	str	r5, [sp, #8]
 8006c6a:	68a2      	ldr	r2, [r4, #8]
 8006c6c:	b152      	cbz	r2, 8006c84 <_scanf_float+0x64>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c74:	d864      	bhi.n	8006d40 <_scanf_float+0x120>
 8006c76:	2b40      	cmp	r3, #64	@ 0x40
 8006c78:	d83c      	bhi.n	8006cf4 <_scanf_float+0xd4>
 8006c7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c7e:	b2c8      	uxtb	r0, r1
 8006c80:	280e      	cmp	r0, #14
 8006c82:	d93a      	bls.n	8006cfa <_scanf_float+0xda>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	d003      	beq.n	8006c92 <_scanf_float+0x72>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c96:	f1ba 0f01 	cmp.w	sl, #1
 8006c9a:	f200 8117 	bhi.w	8006ecc <_scanf_float+0x2ac>
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	429e      	cmp	r6, r3
 8006ca2:	f200 8108 	bhi.w	8006eb6 <_scanf_float+0x296>
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	b007      	add	sp, #28
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006cb2:	2a0d      	cmp	r2, #13
 8006cb4:	d8e6      	bhi.n	8006c84 <_scanf_float+0x64>
 8006cb6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cbc <_scanf_float+0x9c>)
 8006cb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cbc:	08006e03 	.word	0x08006e03
 8006cc0:	08006c85 	.word	0x08006c85
 8006cc4:	08006c85 	.word	0x08006c85
 8006cc8:	08006c85 	.word	0x08006c85
 8006ccc:	08006e63 	.word	0x08006e63
 8006cd0:	08006e3b 	.word	0x08006e3b
 8006cd4:	08006c85 	.word	0x08006c85
 8006cd8:	08006c85 	.word	0x08006c85
 8006cdc:	08006e11 	.word	0x08006e11
 8006ce0:	08006c85 	.word	0x08006c85
 8006ce4:	08006c85 	.word	0x08006c85
 8006ce8:	08006c85 	.word	0x08006c85
 8006cec:	08006c85 	.word	0x08006c85
 8006cf0:	08006dc9 	.word	0x08006dc9
 8006cf4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006cf8:	e7db      	b.n	8006cb2 <_scanf_float+0x92>
 8006cfa:	290e      	cmp	r1, #14
 8006cfc:	d8c2      	bhi.n	8006c84 <_scanf_float+0x64>
 8006cfe:	a001      	add	r0, pc, #4	@ (adr r0, 8006d04 <_scanf_float+0xe4>)
 8006d00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d04:	08006db9 	.word	0x08006db9
 8006d08:	08006c85 	.word	0x08006c85
 8006d0c:	08006db9 	.word	0x08006db9
 8006d10:	08006e4f 	.word	0x08006e4f
 8006d14:	08006c85 	.word	0x08006c85
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d9f 	.word	0x08006d9f
 8006d20:	08006d9f 	.word	0x08006d9f
 8006d24:	08006d9f 	.word	0x08006d9f
 8006d28:	08006d9f 	.word	0x08006d9f
 8006d2c:	08006d9f 	.word	0x08006d9f
 8006d30:	08006d9f 	.word	0x08006d9f
 8006d34:	08006d9f 	.word	0x08006d9f
 8006d38:	08006d9f 	.word	0x08006d9f
 8006d3c:	08006d9f 	.word	0x08006d9f
 8006d40:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d42:	d809      	bhi.n	8006d58 <_scanf_float+0x138>
 8006d44:	2b60      	cmp	r3, #96	@ 0x60
 8006d46:	d8b2      	bhi.n	8006cae <_scanf_float+0x8e>
 8006d48:	2b54      	cmp	r3, #84	@ 0x54
 8006d4a:	d07b      	beq.n	8006e44 <_scanf_float+0x224>
 8006d4c:	2b59      	cmp	r3, #89	@ 0x59
 8006d4e:	d199      	bne.n	8006c84 <_scanf_float+0x64>
 8006d50:	2d07      	cmp	r5, #7
 8006d52:	d197      	bne.n	8006c84 <_scanf_float+0x64>
 8006d54:	2508      	movs	r5, #8
 8006d56:	e02c      	b.n	8006db2 <_scanf_float+0x192>
 8006d58:	2b74      	cmp	r3, #116	@ 0x74
 8006d5a:	d073      	beq.n	8006e44 <_scanf_float+0x224>
 8006d5c:	2b79      	cmp	r3, #121	@ 0x79
 8006d5e:	e7f6      	b.n	8006d4e <_scanf_float+0x12e>
 8006d60:	6821      	ldr	r1, [r4, #0]
 8006d62:	05c8      	lsls	r0, r1, #23
 8006d64:	d51b      	bpl.n	8006d9e <_scanf_float+0x17e>
 8006d66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d6a:	6021      	str	r1, [r4, #0]
 8006d6c:	f109 0901 	add.w	r9, r9, #1
 8006d70:	f1bb 0f00 	cmp.w	fp, #0
 8006d74:	d003      	beq.n	8006d7e <_scanf_float+0x15e>
 8006d76:	3201      	adds	r2, #1
 8006d78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d7c:	60a2      	str	r2, [r4, #8]
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60a3      	str	r3, [r4, #8]
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	f340 8087 	ble.w	8006ea4 <_scanf_float+0x284>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	e765      	b.n	8006c6a <_scanf_float+0x4a>
 8006d9e:	eb1a 0105 	adds.w	r1, sl, r5
 8006da2:	f47f af6f 	bne.w	8006c84 <_scanf_float+0x64>
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006dac:	6022      	str	r2, [r4, #0]
 8006dae:	460d      	mov	r5, r1
 8006db0:	468a      	mov	sl, r1
 8006db2:	f806 3b01 	strb.w	r3, [r6], #1
 8006db6:	e7e2      	b.n	8006d7e <_scanf_float+0x15e>
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	0610      	lsls	r0, r2, #24
 8006dbc:	f57f af62 	bpl.w	8006c84 <_scanf_float+0x64>
 8006dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dc4:	6022      	str	r2, [r4, #0]
 8006dc6:	e7f4      	b.n	8006db2 <_scanf_float+0x192>
 8006dc8:	f1ba 0f00 	cmp.w	sl, #0
 8006dcc:	d10e      	bne.n	8006dec <_scanf_float+0x1cc>
 8006dce:	f1b9 0f00 	cmp.w	r9, #0
 8006dd2:	d10e      	bne.n	8006df2 <_scanf_float+0x1d2>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006dde:	d108      	bne.n	8006df2 <_scanf_float+0x1d2>
 8006de0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	f04f 0a01 	mov.w	sl, #1
 8006dea:	e7e2      	b.n	8006db2 <_scanf_float+0x192>
 8006dec:	f1ba 0f02 	cmp.w	sl, #2
 8006df0:	d055      	beq.n	8006e9e <_scanf_float+0x27e>
 8006df2:	2d01      	cmp	r5, #1
 8006df4:	d002      	beq.n	8006dfc <_scanf_float+0x1dc>
 8006df6:	2d04      	cmp	r5, #4
 8006df8:	f47f af44 	bne.w	8006c84 <_scanf_float+0x64>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	b2ed      	uxtb	r5, r5
 8006e00:	e7d7      	b.n	8006db2 <_scanf_float+0x192>
 8006e02:	f1ba 0f01 	cmp.w	sl, #1
 8006e06:	f47f af3d 	bne.w	8006c84 <_scanf_float+0x64>
 8006e0a:	f04f 0a02 	mov.w	sl, #2
 8006e0e:	e7d0      	b.n	8006db2 <_scanf_float+0x192>
 8006e10:	b97d      	cbnz	r5, 8006e32 <_scanf_float+0x212>
 8006e12:	f1b9 0f00 	cmp.w	r9, #0
 8006e16:	f47f af38 	bne.w	8006c8a <_scanf_float+0x6a>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e24:	f040 8101 	bne.w	800702a <_scanf_float+0x40a>
 8006e28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e2c:	6022      	str	r2, [r4, #0]
 8006e2e:	2501      	movs	r5, #1
 8006e30:	e7bf      	b.n	8006db2 <_scanf_float+0x192>
 8006e32:	2d03      	cmp	r5, #3
 8006e34:	d0e2      	beq.n	8006dfc <_scanf_float+0x1dc>
 8006e36:	2d05      	cmp	r5, #5
 8006e38:	e7de      	b.n	8006df8 <_scanf_float+0x1d8>
 8006e3a:	2d02      	cmp	r5, #2
 8006e3c:	f47f af22 	bne.w	8006c84 <_scanf_float+0x64>
 8006e40:	2503      	movs	r5, #3
 8006e42:	e7b6      	b.n	8006db2 <_scanf_float+0x192>
 8006e44:	2d06      	cmp	r5, #6
 8006e46:	f47f af1d 	bne.w	8006c84 <_scanf_float+0x64>
 8006e4a:	2507      	movs	r5, #7
 8006e4c:	e7b1      	b.n	8006db2 <_scanf_float+0x192>
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	0591      	lsls	r1, r2, #22
 8006e52:	f57f af17 	bpl.w	8006c84 <_scanf_float+0x64>
 8006e56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e5a:	6022      	str	r2, [r4, #0]
 8006e5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e60:	e7a7      	b.n	8006db2 <_scanf_float+0x192>
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e6c:	d006      	beq.n	8006e7c <_scanf_float+0x25c>
 8006e6e:	0550      	lsls	r0, r2, #21
 8006e70:	f57f af08 	bpl.w	8006c84 <_scanf_float+0x64>
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
 8006e78:	f000 80d7 	beq.w	800702a <_scanf_float+0x40a>
 8006e7c:	0591      	lsls	r1, r2, #22
 8006e7e:	bf58      	it	pl
 8006e80:	9902      	ldrpl	r1, [sp, #8]
 8006e82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e86:	bf58      	it	pl
 8006e88:	eba9 0101 	subpl.w	r1, r9, r1
 8006e8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e90:	bf58      	it	pl
 8006e92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e96:	6022      	str	r2, [r4, #0]
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	e789      	b.n	8006db2 <_scanf_float+0x192>
 8006e9e:	f04f 0a03 	mov.w	sl, #3
 8006ea2:	e786      	b.n	8006db2 <_scanf_float+0x192>
 8006ea4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	4640      	mov	r0, r8
 8006eac:	4798      	blx	r3
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f aedb 	beq.w	8006c6a <_scanf_float+0x4a>
 8006eb4:	e6e6      	b.n	8006c84 <_scanf_float+0x64>
 8006eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4798      	blx	r3
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	e6e8      	b.n	8006c9e <_scanf_float+0x7e>
 8006ecc:	1e6b      	subs	r3, r5, #1
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d824      	bhi.n	8006f1c <_scanf_float+0x2fc>
 8006ed2:	2d02      	cmp	r5, #2
 8006ed4:	d836      	bhi.n	8006f44 <_scanf_float+0x324>
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	429e      	cmp	r6, r3
 8006eda:	f67f aee4 	bls.w	8006ca6 <_scanf_float+0x86>
 8006ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	e7f0      	b.n	8006ed6 <_scanf_float+0x2b6>
 8006ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ef8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006efc:	463a      	mov	r2, r7
 8006efe:	4640      	mov	r0, r8
 8006f00:	4798      	blx	r3
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f0c:	fa5f fa8a 	uxtb.w	sl, sl
 8006f10:	f1ba 0f02 	cmp.w	sl, #2
 8006f14:	d1ee      	bne.n	8006ef4 <_scanf_float+0x2d4>
 8006f16:	3d03      	subs	r5, #3
 8006f18:	b2ed      	uxtb	r5, r5
 8006f1a:	1b76      	subs	r6, r6, r5
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	05da      	lsls	r2, r3, #23
 8006f20:	d530      	bpl.n	8006f84 <_scanf_float+0x364>
 8006f22:	055b      	lsls	r3, r3, #21
 8006f24:	d511      	bpl.n	8006f4a <_scanf_float+0x32a>
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	429e      	cmp	r6, r3
 8006f2a:	f67f aebc 	bls.w	8006ca6 <_scanf_float+0x86>
 8006f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f36:	463a      	mov	r2, r7
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4798      	blx	r3
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	e7f0      	b.n	8006f26 <_scanf_float+0x306>
 8006f44:	46aa      	mov	sl, r5
 8006f46:	46b3      	mov	fp, r6
 8006f48:	e7de      	b.n	8006f08 <_scanf_float+0x2e8>
 8006f4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	2965      	cmp	r1, #101	@ 0x65
 8006f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f56:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	d00c      	beq.n	8006f78 <_scanf_float+0x358>
 8006f5e:	2945      	cmp	r1, #69	@ 0x45
 8006f60:	d00a      	beq.n	8006f78 <_scanf_float+0x358>
 8006f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f66:	463a      	mov	r2, r7
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4798      	blx	r3
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	1eb5      	subs	r5, r6, #2
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f7c:	463a      	mov	r2, r7
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4798      	blx	r3
 8006f82:	462e      	mov	r6, r5
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	f012 0210 	ands.w	r2, r2, #16
 8006f8a:	d001      	beq.n	8006f90 <_scanf_float+0x370>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e68b      	b.n	8006ca8 <_scanf_float+0x88>
 8006f90:	7032      	strb	r2, [r6, #0]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9c:	d11a      	bne.n	8006fd4 <_scanf_float+0x3b4>
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	454b      	cmp	r3, r9
 8006fa2:	eba3 0209 	sub.w	r2, r3, r9
 8006fa6:	d121      	bne.n	8006fec <_scanf_float+0x3cc>
 8006fa8:	9901      	ldr	r1, [sp, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	4640      	mov	r0, r8
 8006fae:	f002 fb3d 	bl	800962c <_strtod_r>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f011 0f02 	tst.w	r1, #2
 8006fbc:	f103 0204 	add.w	r2, r3, #4
 8006fc0:	d01f      	beq.n	8007002 <_scanf_float+0x3e2>
 8006fc2:	9903      	ldr	r1, [sp, #12]
 8006fc4:	600a      	str	r2, [r1, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	ed83 0b00 	vstr	d0, [r3]
 8006fcc:	68e3      	ldr	r3, [r4, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60e3      	str	r3, [r4, #12]
 8006fd2:	e7db      	b.n	8006f8c <_scanf_float+0x36c>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0e6      	beq.n	8006fa8 <_scanf_float+0x388>
 8006fda:	9905      	ldr	r1, [sp, #20]
 8006fdc:	230a      	movs	r3, #10
 8006fde:	3101      	adds	r1, #1
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	f002 fba3 	bl	800972c <_strtol_r>
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	9e05      	ldr	r6, [sp, #20]
 8006fea:	1ac2      	subs	r2, r0, r3
 8006fec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ff0:	429e      	cmp	r6, r3
 8006ff2:	bf28      	it	cs
 8006ff4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006ff8:	490d      	ldr	r1, [pc, #52]	@ (8007030 <_scanf_float+0x410>)
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 f8de 	bl	80071bc <siprintf>
 8007000:	e7d2      	b.n	8006fa8 <_scanf_float+0x388>
 8007002:	f011 0f04 	tst.w	r1, #4
 8007006:	9903      	ldr	r1, [sp, #12]
 8007008:	600a      	str	r2, [r1, #0]
 800700a:	d1dc      	bne.n	8006fc6 <_scanf_float+0x3a6>
 800700c:	eeb4 0b40 	vcmp.f64	d0, d0
 8007010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007014:	681d      	ldr	r5, [r3, #0]
 8007016:	d705      	bvc.n	8007024 <_scanf_float+0x404>
 8007018:	4806      	ldr	r0, [pc, #24]	@ (8007034 <_scanf_float+0x414>)
 800701a:	f000 f9c1 	bl	80073a0 <nanf>
 800701e:	ed85 0a00 	vstr	s0, [r5]
 8007022:	e7d3      	b.n	8006fcc <_scanf_float+0x3ac>
 8007024:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007028:	e7f9      	b.n	800701e <_scanf_float+0x3fe>
 800702a:	f04f 0900 	mov.w	r9, #0
 800702e:	e630      	b.n	8006c92 <_scanf_float+0x72>
 8007030:	0800a92c 	.word	0x0800a92c
 8007034:	0800acc5 	.word	0x0800acc5

08007038 <std>:
 8007038:	2300      	movs	r3, #0
 800703a:	b510      	push	{r4, lr}
 800703c:	4604      	mov	r4, r0
 800703e:	e9c0 3300 	strd	r3, r3, [r0]
 8007042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007046:	6083      	str	r3, [r0, #8]
 8007048:	8181      	strh	r1, [r0, #12]
 800704a:	6643      	str	r3, [r0, #100]	@ 0x64
 800704c:	81c2      	strh	r2, [r0, #14]
 800704e:	6183      	str	r3, [r0, #24]
 8007050:	4619      	mov	r1, r3
 8007052:	2208      	movs	r2, #8
 8007054:	305c      	adds	r0, #92	@ 0x5c
 8007056:	f000 f914 	bl	8007282 <memset>
 800705a:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <std+0x58>)
 800705c:	6263      	str	r3, [r4, #36]	@ 0x24
 800705e:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <std+0x5c>)
 8007060:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <std+0x60>)
 8007064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <std+0x64>)
 8007068:	6323      	str	r3, [r4, #48]	@ 0x30
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <std+0x68>)
 800706c:	6224      	str	r4, [r4, #32]
 800706e:	429c      	cmp	r4, r3
 8007070:	d006      	beq.n	8007080 <std+0x48>
 8007072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007076:	4294      	cmp	r4, r2
 8007078:	d002      	beq.n	8007080 <std+0x48>
 800707a:	33d0      	adds	r3, #208	@ 0xd0
 800707c:	429c      	cmp	r4, r3
 800707e:	d105      	bne.n	800708c <std+0x54>
 8007080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f000 b978 	b.w	800737c <__retarget_lock_init_recursive>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	080071fd 	.word	0x080071fd
 8007094:	0800721f 	.word	0x0800721f
 8007098:	08007257 	.word	0x08007257
 800709c:	0800727b 	.word	0x0800727b
 80070a0:	20000980 	.word	0x20000980

080070a4 <stdio_exit_handler>:
 80070a4:	4a02      	ldr	r2, [pc, #8]	@ (80070b0 <stdio_exit_handler+0xc>)
 80070a6:	4903      	ldr	r1, [pc, #12]	@ (80070b4 <stdio_exit_handler+0x10>)
 80070a8:	4803      	ldr	r0, [pc, #12]	@ (80070b8 <stdio_exit_handler+0x14>)
 80070aa:	f000 b869 	b.w	8007180 <_fwalk_sglue>
 80070ae:	bf00      	nop
 80070b0:	200002a8 	.word	0x200002a8
 80070b4:	08009ae9 	.word	0x08009ae9
 80070b8:	200002b8 	.word	0x200002b8

080070bc <cleanup_stdio>:
 80070bc:	6841      	ldr	r1, [r0, #4]
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <cleanup_stdio+0x34>)
 80070c0:	4299      	cmp	r1, r3
 80070c2:	b510      	push	{r4, lr}
 80070c4:	4604      	mov	r4, r0
 80070c6:	d001      	beq.n	80070cc <cleanup_stdio+0x10>
 80070c8:	f002 fd0e 	bl	8009ae8 <_fflush_r>
 80070cc:	68a1      	ldr	r1, [r4, #8]
 80070ce:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <cleanup_stdio+0x38>)
 80070d0:	4299      	cmp	r1, r3
 80070d2:	d002      	beq.n	80070da <cleanup_stdio+0x1e>
 80070d4:	4620      	mov	r0, r4
 80070d6:	f002 fd07 	bl	8009ae8 <_fflush_r>
 80070da:	68e1      	ldr	r1, [r4, #12]
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <cleanup_stdio+0x3c>)
 80070de:	4299      	cmp	r1, r3
 80070e0:	d004      	beq.n	80070ec <cleanup_stdio+0x30>
 80070e2:	4620      	mov	r0, r4
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e8:	f002 bcfe 	b.w	8009ae8 <_fflush_r>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	bf00      	nop
 80070f0:	20000980 	.word	0x20000980
 80070f4:	200009e8 	.word	0x200009e8
 80070f8:	20000a50 	.word	0x20000a50

080070fc <global_stdio_init.part.0>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	4b0b      	ldr	r3, [pc, #44]	@ (800712c <global_stdio_init.part.0+0x30>)
 8007100:	4c0b      	ldr	r4, [pc, #44]	@ (8007130 <global_stdio_init.part.0+0x34>)
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <global_stdio_init.part.0+0x38>)
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	4620      	mov	r0, r4
 8007108:	2200      	movs	r2, #0
 800710a:	2104      	movs	r1, #4
 800710c:	f7ff ff94 	bl	8007038 <std>
 8007110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007114:	2201      	movs	r2, #1
 8007116:	2109      	movs	r1, #9
 8007118:	f7ff ff8e 	bl	8007038 <std>
 800711c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007120:	2202      	movs	r2, #2
 8007122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007126:	2112      	movs	r1, #18
 8007128:	f7ff bf86 	b.w	8007038 <std>
 800712c:	20000ab8 	.word	0x20000ab8
 8007130:	20000980 	.word	0x20000980
 8007134:	080070a5 	.word	0x080070a5

08007138 <__sfp_lock_acquire>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__sfp_lock_acquire+0x8>)
 800713a:	f000 b920 	b.w	800737e <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	20000ac1 	.word	0x20000ac1

08007144 <__sfp_lock_release>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__sfp_lock_release+0x8>)
 8007146:	f000 b91b 	b.w	8007380 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	20000ac1 	.word	0x20000ac1

08007150 <__sinit>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4604      	mov	r4, r0
 8007154:	f7ff fff0 	bl	8007138 <__sfp_lock_acquire>
 8007158:	6a23      	ldr	r3, [r4, #32]
 800715a:	b11b      	cbz	r3, 8007164 <__sinit+0x14>
 800715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007160:	f7ff bff0 	b.w	8007144 <__sfp_lock_release>
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <__sinit+0x28>)
 8007166:	6223      	str	r3, [r4, #32]
 8007168:	4b04      	ldr	r3, [pc, #16]	@ (800717c <__sinit+0x2c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f5      	bne.n	800715c <__sinit+0xc>
 8007170:	f7ff ffc4 	bl	80070fc <global_stdio_init.part.0>
 8007174:	e7f2      	b.n	800715c <__sinit+0xc>
 8007176:	bf00      	nop
 8007178:	080070bd 	.word	0x080070bd
 800717c:	20000ab8 	.word	0x20000ab8

08007180 <_fwalk_sglue>:
 8007180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007184:	4607      	mov	r7, r0
 8007186:	4688      	mov	r8, r1
 8007188:	4614      	mov	r4, r2
 800718a:	2600      	movs	r6, #0
 800718c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007190:	f1b9 0901 	subs.w	r9, r9, #1
 8007194:	d505      	bpl.n	80071a2 <_fwalk_sglue+0x22>
 8007196:	6824      	ldr	r4, [r4, #0]
 8007198:	2c00      	cmp	r4, #0
 800719a:	d1f7      	bne.n	800718c <_fwalk_sglue+0xc>
 800719c:	4630      	mov	r0, r6
 800719e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d907      	bls.n	80071b8 <_fwalk_sglue+0x38>
 80071a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071ac:	3301      	adds	r3, #1
 80071ae:	d003      	beq.n	80071b8 <_fwalk_sglue+0x38>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	4306      	orrs	r6, r0
 80071b8:	3568      	adds	r5, #104	@ 0x68
 80071ba:	e7e9      	b.n	8007190 <_fwalk_sglue+0x10>

080071bc <siprintf>:
 80071bc:	b40e      	push	{r1, r2, r3}
 80071be:	b500      	push	{lr}
 80071c0:	b09c      	sub	sp, #112	@ 0x70
 80071c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80071c4:	9002      	str	r0, [sp, #8]
 80071c6:	9006      	str	r0, [sp, #24]
 80071c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071cc:	4809      	ldr	r0, [pc, #36]	@ (80071f4 <siprintf+0x38>)
 80071ce:	9107      	str	r1, [sp, #28]
 80071d0:	9104      	str	r1, [sp, #16]
 80071d2:	4909      	ldr	r1, [pc, #36]	@ (80071f8 <siprintf+0x3c>)
 80071d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d8:	9105      	str	r1, [sp, #20]
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	a902      	add	r1, sp, #8
 80071e0:	f002 fb02 	bl	80097e8 <_svfiprintf_r>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	b01c      	add	sp, #112	@ 0x70
 80071ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f0:	b003      	add	sp, #12
 80071f2:	4770      	bx	lr
 80071f4:	200002b4 	.word	0x200002b4
 80071f8:	ffff0208 	.word	0xffff0208

080071fc <__sread>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	460c      	mov	r4, r1
 8007200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007204:	f000 f86c 	bl	80072e0 <_read_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	bfab      	itete	ge
 800720c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800720e:	89a3      	ldrhlt	r3, [r4, #12]
 8007210:	181b      	addge	r3, r3, r0
 8007212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007216:	bfac      	ite	ge
 8007218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800721a:	81a3      	strhlt	r3, [r4, #12]
 800721c:	bd10      	pop	{r4, pc}

0800721e <__swrite>:
 800721e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007222:	461f      	mov	r7, r3
 8007224:	898b      	ldrh	r3, [r1, #12]
 8007226:	05db      	lsls	r3, r3, #23
 8007228:	4605      	mov	r5, r0
 800722a:	460c      	mov	r4, r1
 800722c:	4616      	mov	r6, r2
 800722e:	d505      	bpl.n	800723c <__swrite+0x1e>
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	2302      	movs	r3, #2
 8007236:	2200      	movs	r2, #0
 8007238:	f000 f840 	bl	80072bc <_lseek_r>
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	4632      	mov	r2, r6
 800724a:	463b      	mov	r3, r7
 800724c:	4628      	mov	r0, r5
 800724e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007252:	f000 b857 	b.w	8007304 <_write_r>

08007256 <__sseek>:
 8007256:	b510      	push	{r4, lr}
 8007258:	460c      	mov	r4, r1
 800725a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725e:	f000 f82d 	bl	80072bc <_lseek_r>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	bf15      	itete	ne
 8007268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800726a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800726e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007272:	81a3      	strheq	r3, [r4, #12]
 8007274:	bf18      	it	ne
 8007276:	81a3      	strhne	r3, [r4, #12]
 8007278:	bd10      	pop	{r4, pc}

0800727a <__sclose>:
 800727a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727e:	f000 b80d 	b.w	800729c <_close_r>

08007282 <memset>:
 8007282:	4402      	add	r2, r0
 8007284:	4603      	mov	r3, r0
 8007286:	4293      	cmp	r3, r2
 8007288:	d100      	bne.n	800728c <memset+0xa>
 800728a:	4770      	bx	lr
 800728c:	f803 1b01 	strb.w	r1, [r3], #1
 8007290:	e7f9      	b.n	8007286 <memset+0x4>
	...

08007294 <_localeconv_r>:
 8007294:	4800      	ldr	r0, [pc, #0]	@ (8007298 <_localeconv_r+0x4>)
 8007296:	4770      	bx	lr
 8007298:	200003f4 	.word	0x200003f4

0800729c <_close_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d06      	ldr	r5, [pc, #24]	@ (80072b8 <_close_r+0x1c>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7f9 ff04 	bl	80010b4 <_close>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_close_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_close_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	20000abc 	.word	0x20000abc

080072bc <_lseek_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	@ (80072dc <_lseek_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7f9 ff19 	bl	8001102 <_lseek>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_lseek_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_lseek_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20000abc 	.word	0x20000abc

080072e0 <_read_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d07      	ldr	r5, [pc, #28]	@ (8007300 <_read_r+0x20>)
 80072e4:	4604      	mov	r4, r0
 80072e6:	4608      	mov	r0, r1
 80072e8:	4611      	mov	r1, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	602a      	str	r2, [r5, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f7f9 fea7 	bl	8001042 <_read>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_read_r+0x1e>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_read_r+0x1e>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	20000abc 	.word	0x20000abc

08007304 <_write_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d07      	ldr	r5, [pc, #28]	@ (8007324 <_write_r+0x20>)
 8007308:	4604      	mov	r4, r0
 800730a:	4608      	mov	r0, r1
 800730c:	4611      	mov	r1, r2
 800730e:	2200      	movs	r2, #0
 8007310:	602a      	str	r2, [r5, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f7f9 feb2 	bl	800107c <_write>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_write_r+0x1e>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_write_r+0x1e>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	20000abc 	.word	0x20000abc

08007328 <__errno>:
 8007328:	4b01      	ldr	r3, [pc, #4]	@ (8007330 <__errno+0x8>)
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	200002b4 	.word	0x200002b4

08007334 <__libc_init_array>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4d0d      	ldr	r5, [pc, #52]	@ (800736c <__libc_init_array+0x38>)
 8007338:	4c0d      	ldr	r4, [pc, #52]	@ (8007370 <__libc_init_array+0x3c>)
 800733a:	1b64      	subs	r4, r4, r5
 800733c:	10a4      	asrs	r4, r4, #2
 800733e:	2600      	movs	r6, #0
 8007340:	42a6      	cmp	r6, r4
 8007342:	d109      	bne.n	8007358 <__libc_init_array+0x24>
 8007344:	4d0b      	ldr	r5, [pc, #44]	@ (8007374 <__libc_init_array+0x40>)
 8007346:	4c0c      	ldr	r4, [pc, #48]	@ (8007378 <__libc_init_array+0x44>)
 8007348:	f003 fab0 	bl	800a8ac <_init>
 800734c:	1b64      	subs	r4, r4, r5
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	2600      	movs	r6, #0
 8007352:	42a6      	cmp	r6, r4
 8007354:	d105      	bne.n	8007362 <__libc_init_array+0x2e>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	f855 3b04 	ldr.w	r3, [r5], #4
 800735c:	4798      	blx	r3
 800735e:	3601      	adds	r6, #1
 8007360:	e7ee      	b.n	8007340 <__libc_init_array+0xc>
 8007362:	f855 3b04 	ldr.w	r3, [r5], #4
 8007366:	4798      	blx	r3
 8007368:	3601      	adds	r6, #1
 800736a:	e7f2      	b.n	8007352 <__libc_init_array+0x1e>
 800736c:	0800ad30 	.word	0x0800ad30
 8007370:	0800ad30 	.word	0x0800ad30
 8007374:	0800ad30 	.word	0x0800ad30
 8007378:	0800ad34 	.word	0x0800ad34

0800737c <__retarget_lock_init_recursive>:
 800737c:	4770      	bx	lr

0800737e <__retarget_lock_acquire_recursive>:
 800737e:	4770      	bx	lr

08007380 <__retarget_lock_release_recursive>:
 8007380:	4770      	bx	lr

08007382 <memcpy>:
 8007382:	440a      	add	r2, r1
 8007384:	4291      	cmp	r1, r2
 8007386:	f100 33ff 	add.w	r3, r0, #4294967295
 800738a:	d100      	bne.n	800738e <memcpy+0xc>
 800738c:	4770      	bx	lr
 800738e:	b510      	push	{r4, lr}
 8007390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007398:	4291      	cmp	r1, r2
 800739a:	d1f9      	bne.n	8007390 <memcpy+0xe>
 800739c:	bd10      	pop	{r4, pc}
	...

080073a0 <nanf>:
 80073a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80073a8 <nanf+0x8>
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	7fc00000 	.word	0x7fc00000

080073ac <quorem>:
 80073ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	6903      	ldr	r3, [r0, #16]
 80073b2:	690c      	ldr	r4, [r1, #16]
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	4607      	mov	r7, r0
 80073b8:	db7e      	blt.n	80074b8 <quorem+0x10c>
 80073ba:	3c01      	subs	r4, #1
 80073bc:	f101 0814 	add.w	r8, r1, #20
 80073c0:	00a3      	lsls	r3, r4, #2
 80073c2:	f100 0514 	add.w	r5, r0, #20
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073d6:	3301      	adds	r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073de:	fbb2 f6f3 	udiv	r6, r2, r3
 80073e2:	d32e      	bcc.n	8007442 <quorem+0x96>
 80073e4:	f04f 0a00 	mov.w	sl, #0
 80073e8:	46c4      	mov	ip, r8
 80073ea:	46ae      	mov	lr, r5
 80073ec:	46d3      	mov	fp, sl
 80073ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073f2:	b298      	uxth	r0, r3
 80073f4:	fb06 a000 	mla	r0, r6, r0, sl
 80073f8:	0c02      	lsrs	r2, r0, #16
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	fb06 2303 	mla	r3, r6, r3, r2
 8007400:	f8de 2000 	ldr.w	r2, [lr]
 8007404:	b280      	uxth	r0, r0
 8007406:	b292      	uxth	r2, r2
 8007408:	1a12      	subs	r2, r2, r0
 800740a:	445a      	add	r2, fp
 800740c:	f8de 0000 	ldr.w	r0, [lr]
 8007410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007414:	b29b      	uxth	r3, r3
 8007416:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800741a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800741e:	b292      	uxth	r2, r2
 8007420:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007424:	45e1      	cmp	r9, ip
 8007426:	f84e 2b04 	str.w	r2, [lr], #4
 800742a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800742e:	d2de      	bcs.n	80073ee <quorem+0x42>
 8007430:	9b00      	ldr	r3, [sp, #0]
 8007432:	58eb      	ldr	r3, [r5, r3]
 8007434:	b92b      	cbnz	r3, 8007442 <quorem+0x96>
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	3b04      	subs	r3, #4
 800743a:	429d      	cmp	r5, r3
 800743c:	461a      	mov	r2, r3
 800743e:	d32f      	bcc.n	80074a0 <quorem+0xf4>
 8007440:	613c      	str	r4, [r7, #16]
 8007442:	4638      	mov	r0, r7
 8007444:	f001 f956 	bl	80086f4 <__mcmp>
 8007448:	2800      	cmp	r0, #0
 800744a:	db25      	blt.n	8007498 <quorem+0xec>
 800744c:	4629      	mov	r1, r5
 800744e:	2000      	movs	r0, #0
 8007450:	f858 2b04 	ldr.w	r2, [r8], #4
 8007454:	f8d1 c000 	ldr.w	ip, [r1]
 8007458:	fa1f fe82 	uxth.w	lr, r2
 800745c:	fa1f f38c 	uxth.w	r3, ip
 8007460:	eba3 030e 	sub.w	r3, r3, lr
 8007464:	4403      	add	r3, r0
 8007466:	0c12      	lsrs	r2, r2, #16
 8007468:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800746c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007470:	b29b      	uxth	r3, r3
 8007472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007476:	45c1      	cmp	r9, r8
 8007478:	f841 3b04 	str.w	r3, [r1], #4
 800747c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007480:	d2e6      	bcs.n	8007450 <quorem+0xa4>
 8007482:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800748a:	b922      	cbnz	r2, 8007496 <quorem+0xea>
 800748c:	3b04      	subs	r3, #4
 800748e:	429d      	cmp	r5, r3
 8007490:	461a      	mov	r2, r3
 8007492:	d30b      	bcc.n	80074ac <quorem+0x100>
 8007494:	613c      	str	r4, [r7, #16]
 8007496:	3601      	adds	r6, #1
 8007498:	4630      	mov	r0, r6
 800749a:	b003      	add	sp, #12
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	3b04      	subs	r3, #4
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	d1cb      	bne.n	8007440 <quorem+0x94>
 80074a8:	3c01      	subs	r4, #1
 80074aa:	e7c6      	b.n	800743a <quorem+0x8e>
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	3b04      	subs	r3, #4
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d1ef      	bne.n	8007494 <quorem+0xe8>
 80074b4:	3c01      	subs	r4, #1
 80074b6:	e7ea      	b.n	800748e <quorem+0xe2>
 80074b8:	2000      	movs	r0, #0
 80074ba:	e7ee      	b.n	800749a <quorem+0xee>
 80074bc:	0000      	movs	r0, r0
	...

080074c0 <_dtoa_r>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	ed2d 8b02 	vpush	{d8}
 80074c8:	69c7      	ldr	r7, [r0, #28]
 80074ca:	b091      	sub	sp, #68	@ 0x44
 80074cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80074d0:	ec55 4b10 	vmov	r4, r5, d0
 80074d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80074d6:	9107      	str	r1, [sp, #28]
 80074d8:	4681      	mov	r9, r0
 80074da:	9209      	str	r2, [sp, #36]	@ 0x24
 80074dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80074de:	b97f      	cbnz	r7, 8007500 <_dtoa_r+0x40>
 80074e0:	2010      	movs	r0, #16
 80074e2:	f000 fd8d 	bl	8008000 <malloc>
 80074e6:	4602      	mov	r2, r0
 80074e8:	f8c9 001c 	str.w	r0, [r9, #28]
 80074ec:	b920      	cbnz	r0, 80074f8 <_dtoa_r+0x38>
 80074ee:	4ba0      	ldr	r3, [pc, #640]	@ (8007770 <_dtoa_r+0x2b0>)
 80074f0:	21ef      	movs	r1, #239	@ 0xef
 80074f2:	48a0      	ldr	r0, [pc, #640]	@ (8007774 <_dtoa_r+0x2b4>)
 80074f4:	f002 fb64 	bl	8009bc0 <__assert_func>
 80074f8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80074fc:	6007      	str	r7, [r0, #0]
 80074fe:	60c7      	str	r7, [r0, #12]
 8007500:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007504:	6819      	ldr	r1, [r3, #0]
 8007506:	b159      	cbz	r1, 8007520 <_dtoa_r+0x60>
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	604a      	str	r2, [r1, #4]
 800750c:	2301      	movs	r3, #1
 800750e:	4093      	lsls	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
 8007512:	4648      	mov	r0, r9
 8007514:	f000 fe6a 	bl	80081ec <_Bfree>
 8007518:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	1e2b      	subs	r3, r5, #0
 8007522:	bfbb      	ittet	lt
 8007524:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007528:	9303      	strlt	r3, [sp, #12]
 800752a:	2300      	movge	r3, #0
 800752c:	2201      	movlt	r2, #1
 800752e:	bfac      	ite	ge
 8007530:	6033      	strge	r3, [r6, #0]
 8007532:	6032      	strlt	r2, [r6, #0]
 8007534:	4b90      	ldr	r3, [pc, #576]	@ (8007778 <_dtoa_r+0x2b8>)
 8007536:	9e03      	ldr	r6, [sp, #12]
 8007538:	43b3      	bics	r3, r6
 800753a:	d110      	bne.n	800755e <_dtoa_r+0x9e>
 800753c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800753e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007548:	4323      	orrs	r3, r4
 800754a:	f000 84de 	beq.w	8007f0a <_dtoa_r+0xa4a>
 800754e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007550:	4f8a      	ldr	r7, [pc, #552]	@ (800777c <_dtoa_r+0x2bc>)
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 84e0 	beq.w	8007f18 <_dtoa_r+0xa58>
 8007558:	1cfb      	adds	r3, r7, #3
 800755a:	f000 bcdb 	b.w	8007f14 <_dtoa_r+0xa54>
 800755e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007562:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756a:	d10a      	bne.n	8007582 <_dtoa_r+0xc2>
 800756c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800756e:	2301      	movs	r3, #1
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007574:	b113      	cbz	r3, 800757c <_dtoa_r+0xbc>
 8007576:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007578:	4b81      	ldr	r3, [pc, #516]	@ (8007780 <_dtoa_r+0x2c0>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	4f81      	ldr	r7, [pc, #516]	@ (8007784 <_dtoa_r+0x2c4>)
 800757e:	f000 bccb 	b.w	8007f18 <_dtoa_r+0xa58>
 8007582:	aa0e      	add	r2, sp, #56	@ 0x38
 8007584:	a90f      	add	r1, sp, #60	@ 0x3c
 8007586:	4648      	mov	r0, r9
 8007588:	eeb0 0b48 	vmov.f64	d0, d8
 800758c:	f001 f9d2 	bl	8008934 <__d2b>
 8007590:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007594:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007596:	9001      	str	r0, [sp, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d045      	beq.n	8007628 <_dtoa_r+0x168>
 800759c:	eeb0 7b48 	vmov.f64	d7, d8
 80075a0:	ee18 1a90 	vmov	r1, s17
 80075a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80075a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80075ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80075b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80075b4:	2500      	movs	r5, #0
 80075b6:	ee07 1a90 	vmov	s15, r1
 80075ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80075be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007758 <_dtoa_r+0x298>
 80075c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80075c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007760 <_dtoa_r+0x2a0>
 80075ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80075ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007768 <_dtoa_r+0x2a8>
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80075da:	eeb0 7b46 	vmov.f64	d7, d6
 80075de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80075e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80075e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	ee16 8a90 	vmov	r8, s13
 80075f2:	d508      	bpl.n	8007606 <_dtoa_r+0x146>
 80075f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80075f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80075fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007600:	bf18      	it	ne
 8007602:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007606:	f1b8 0f16 	cmp.w	r8, #22
 800760a:	d82b      	bhi.n	8007664 <_dtoa_r+0x1a4>
 800760c:	495e      	ldr	r1, [pc, #376]	@ (8007788 <_dtoa_r+0x2c8>)
 800760e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007612:	ed91 7b00 	vldr	d7, [r1]
 8007616:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	d501      	bpl.n	8007624 <_dtoa_r+0x164>
 8007620:	f108 38ff 	add.w	r8, r8, #4294967295
 8007624:	2100      	movs	r1, #0
 8007626:	e01e      	b.n	8007666 <_dtoa_r+0x1a6>
 8007628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800762a:	4413      	add	r3, r2
 800762c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007630:	2920      	cmp	r1, #32
 8007632:	bfc1      	itttt	gt
 8007634:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007638:	408e      	lslgt	r6, r1
 800763a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800763e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007642:	bfd6      	itet	le
 8007644:	f1c1 0120 	rsble	r1, r1, #32
 8007648:	4331      	orrgt	r1, r6
 800764a:	fa04 f101 	lslle.w	r1, r4, r1
 800764e:	ee07 1a90 	vmov	s15, r1
 8007652:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007656:	3b01      	subs	r3, #1
 8007658:	ee17 1a90 	vmov	r1, s15
 800765c:	2501      	movs	r5, #1
 800765e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007662:	e7a8      	b.n	80075b6 <_dtoa_r+0xf6>
 8007664:	2101      	movs	r1, #1
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	1e53      	subs	r3, r2, #1
 800766a:	9306      	str	r3, [sp, #24]
 800766c:	bf45      	ittet	mi
 800766e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007672:	9305      	strmi	r3, [sp, #20]
 8007674:	2300      	movpl	r3, #0
 8007676:	2300      	movmi	r3, #0
 8007678:	bf4c      	ite	mi
 800767a:	9306      	strmi	r3, [sp, #24]
 800767c:	9305      	strpl	r3, [sp, #20]
 800767e:	f1b8 0f00 	cmp.w	r8, #0
 8007682:	910c      	str	r1, [sp, #48]	@ 0x30
 8007684:	db18      	blt.n	80076b8 <_dtoa_r+0x1f8>
 8007686:	9b06      	ldr	r3, [sp, #24]
 8007688:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800768c:	4443      	add	r3, r8
 800768e:	9306      	str	r3, [sp, #24]
 8007690:	2300      	movs	r3, #0
 8007692:	9a07      	ldr	r2, [sp, #28]
 8007694:	2a09      	cmp	r2, #9
 8007696:	d849      	bhi.n	800772c <_dtoa_r+0x26c>
 8007698:	2a05      	cmp	r2, #5
 800769a:	bfc4      	itt	gt
 800769c:	3a04      	subgt	r2, #4
 800769e:	9207      	strgt	r2, [sp, #28]
 80076a0:	9a07      	ldr	r2, [sp, #28]
 80076a2:	f1a2 0202 	sub.w	r2, r2, #2
 80076a6:	bfcc      	ite	gt
 80076a8:	2400      	movgt	r4, #0
 80076aa:	2401      	movle	r4, #1
 80076ac:	2a03      	cmp	r2, #3
 80076ae:	d848      	bhi.n	8007742 <_dtoa_r+0x282>
 80076b0:	e8df f002 	tbb	[pc, r2]
 80076b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80076b8:	9b05      	ldr	r3, [sp, #20]
 80076ba:	2200      	movs	r2, #0
 80076bc:	eba3 0308 	sub.w	r3, r3, r8
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80076c4:	f1c8 0300 	rsb	r3, r8, #0
 80076c8:	e7e3      	b.n	8007692 <_dtoa_r+0x1d2>
 80076ca:	2200      	movs	r2, #0
 80076cc:	9208      	str	r2, [sp, #32]
 80076ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	dc39      	bgt.n	8007748 <_dtoa_r+0x288>
 80076d4:	f04f 0b01 	mov.w	fp, #1
 80076d8:	46da      	mov	sl, fp
 80076da:	465a      	mov	r2, fp
 80076dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80076e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80076e4:	2100      	movs	r1, #0
 80076e6:	2004      	movs	r0, #4
 80076e8:	f100 0614 	add.w	r6, r0, #20
 80076ec:	4296      	cmp	r6, r2
 80076ee:	d930      	bls.n	8007752 <_dtoa_r+0x292>
 80076f0:	6079      	str	r1, [r7, #4]
 80076f2:	4648      	mov	r0, r9
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	f000 fd39 	bl	800816c <_Balloc>
 80076fa:	9b04      	ldr	r3, [sp, #16]
 80076fc:	4607      	mov	r7, r0
 80076fe:	2800      	cmp	r0, #0
 8007700:	d146      	bne.n	8007790 <_dtoa_r+0x2d0>
 8007702:	4b22      	ldr	r3, [pc, #136]	@ (800778c <_dtoa_r+0x2cc>)
 8007704:	4602      	mov	r2, r0
 8007706:	f240 11af 	movw	r1, #431	@ 0x1af
 800770a:	e6f2      	b.n	80074f2 <_dtoa_r+0x32>
 800770c:	2201      	movs	r2, #1
 800770e:	e7dd      	b.n	80076cc <_dtoa_r+0x20c>
 8007710:	2200      	movs	r2, #0
 8007712:	9208      	str	r2, [sp, #32]
 8007714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007716:	eb08 0b02 	add.w	fp, r8, r2
 800771a:	f10b 0a01 	add.w	sl, fp, #1
 800771e:	4652      	mov	r2, sl
 8007720:	2a01      	cmp	r2, #1
 8007722:	bfb8      	it	lt
 8007724:	2201      	movlt	r2, #1
 8007726:	e7db      	b.n	80076e0 <_dtoa_r+0x220>
 8007728:	2201      	movs	r2, #1
 800772a:	e7f2      	b.n	8007712 <_dtoa_r+0x252>
 800772c:	2401      	movs	r4, #1
 800772e:	2200      	movs	r2, #0
 8007730:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007734:	f04f 3bff 	mov.w	fp, #4294967295
 8007738:	2100      	movs	r1, #0
 800773a:	46da      	mov	sl, fp
 800773c:	2212      	movs	r2, #18
 800773e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007740:	e7ce      	b.n	80076e0 <_dtoa_r+0x220>
 8007742:	2201      	movs	r2, #1
 8007744:	9208      	str	r2, [sp, #32]
 8007746:	e7f5      	b.n	8007734 <_dtoa_r+0x274>
 8007748:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800774c:	46da      	mov	sl, fp
 800774e:	465a      	mov	r2, fp
 8007750:	e7c6      	b.n	80076e0 <_dtoa_r+0x220>
 8007752:	3101      	adds	r1, #1
 8007754:	0040      	lsls	r0, r0, #1
 8007756:	e7c7      	b.n	80076e8 <_dtoa_r+0x228>
 8007758:	636f4361 	.word	0x636f4361
 800775c:	3fd287a7 	.word	0x3fd287a7
 8007760:	8b60c8b3 	.word	0x8b60c8b3
 8007764:	3fc68a28 	.word	0x3fc68a28
 8007768:	509f79fb 	.word	0x509f79fb
 800776c:	3fd34413 	.word	0x3fd34413
 8007770:	0800a93e 	.word	0x0800a93e
 8007774:	0800a955 	.word	0x0800a955
 8007778:	7ff00000 	.word	0x7ff00000
 800777c:	0800a93a 	.word	0x0800a93a
 8007780:	0800a909 	.word	0x0800a909
 8007784:	0800a908 	.word	0x0800a908
 8007788:	0800aa50 	.word	0x0800aa50
 800778c:	0800a9ad 	.word	0x0800a9ad
 8007790:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007794:	f1ba 0f0e 	cmp.w	sl, #14
 8007798:	6010      	str	r0, [r2, #0]
 800779a:	d86f      	bhi.n	800787c <_dtoa_r+0x3bc>
 800779c:	2c00      	cmp	r4, #0
 800779e:	d06d      	beq.n	800787c <_dtoa_r+0x3bc>
 80077a0:	f1b8 0f00 	cmp.w	r8, #0
 80077a4:	f340 80c2 	ble.w	800792c <_dtoa_r+0x46c>
 80077a8:	4aca      	ldr	r2, [pc, #808]	@ (8007ad4 <_dtoa_r+0x614>)
 80077aa:	f008 010f 	and.w	r1, r8, #15
 80077ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80077b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80077b6:	ed92 7b00 	vldr	d7, [r2]
 80077ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 80077be:	f000 80a9 	beq.w	8007914 <_dtoa_r+0x454>
 80077c2:	4ac5      	ldr	r2, [pc, #788]	@ (8007ad8 <_dtoa_r+0x618>)
 80077c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80077c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80077cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80077d0:	f001 010f 	and.w	r1, r1, #15
 80077d4:	2203      	movs	r2, #3
 80077d6:	48c0      	ldr	r0, [pc, #768]	@ (8007ad8 <_dtoa_r+0x618>)
 80077d8:	2900      	cmp	r1, #0
 80077da:	f040 809d 	bne.w	8007918 <_dtoa_r+0x458>
 80077de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80077e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80077e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80077ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077f0:	2900      	cmp	r1, #0
 80077f2:	f000 80c1 	beq.w	8007978 <_dtoa_r+0x4b8>
 80077f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80077fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80077fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007802:	f140 80b9 	bpl.w	8007978 <_dtoa_r+0x4b8>
 8007806:	f1ba 0f00 	cmp.w	sl, #0
 800780a:	f000 80b5 	beq.w	8007978 <_dtoa_r+0x4b8>
 800780e:	f1bb 0f00 	cmp.w	fp, #0
 8007812:	dd31      	ble.n	8007878 <_dtoa_r+0x3b8>
 8007814:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007818:	ee27 7b06 	vmul.f64	d7, d7, d6
 800781c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007820:	f108 31ff 	add.w	r1, r8, #4294967295
 8007824:	9104      	str	r1, [sp, #16]
 8007826:	3201      	adds	r2, #1
 8007828:	465c      	mov	r4, fp
 800782a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800782e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007832:	ee07 2a90 	vmov	s15, r2
 8007836:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800783a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800783e:	ee15 2a90 	vmov	r2, s11
 8007842:	ec51 0b15 	vmov	r0, r1, d5
 8007846:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800784a:	2c00      	cmp	r4, #0
 800784c:	f040 8098 	bne.w	8007980 <_dtoa_r+0x4c0>
 8007850:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007854:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007858:	ec41 0b17 	vmov	d7, r0, r1
 800785c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007864:	f300 8261 	bgt.w	8007d2a <_dtoa_r+0x86a>
 8007868:	eeb1 7b47 	vneg.f64	d7, d7
 800786c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007874:	f100 80f5 	bmi.w	8007a62 <_dtoa_r+0x5a2>
 8007878:	ed8d 8b02 	vstr	d8, [sp, #8]
 800787c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800787e:	2a00      	cmp	r2, #0
 8007880:	f2c0 812c 	blt.w	8007adc <_dtoa_r+0x61c>
 8007884:	f1b8 0f0e 	cmp.w	r8, #14
 8007888:	f300 8128 	bgt.w	8007adc <_dtoa_r+0x61c>
 800788c:	4b91      	ldr	r3, [pc, #580]	@ (8007ad4 <_dtoa_r+0x614>)
 800788e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007892:	ed93 6b00 	vldr	d6, [r3]
 8007896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	da03      	bge.n	80078a4 <_dtoa_r+0x3e4>
 800789c:	f1ba 0f00 	cmp.w	sl, #0
 80078a0:	f340 80d2 	ble.w	8007a48 <_dtoa_r+0x588>
 80078a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80078a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078ac:	463e      	mov	r6, r7
 80078ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80078b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80078b6:	ee15 3a10 	vmov	r3, s10
 80078ba:	3330      	adds	r3, #48	@ 0x30
 80078bc:	f806 3b01 	strb.w	r3, [r6], #1
 80078c0:	1bf3      	subs	r3, r6, r7
 80078c2:	459a      	cmp	sl, r3
 80078c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80078c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80078cc:	f040 80f8 	bne.w	8007ac0 <_dtoa_r+0x600>
 80078d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80078d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80078d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078dc:	f300 80dd 	bgt.w	8007a9a <_dtoa_r+0x5da>
 80078e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80078e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e8:	d104      	bne.n	80078f4 <_dtoa_r+0x434>
 80078ea:	ee15 3a10 	vmov	r3, s10
 80078ee:	07db      	lsls	r3, r3, #31
 80078f0:	f100 80d3 	bmi.w	8007a9a <_dtoa_r+0x5da>
 80078f4:	9901      	ldr	r1, [sp, #4]
 80078f6:	4648      	mov	r0, r9
 80078f8:	f000 fc78 	bl	80081ec <_Bfree>
 80078fc:	2300      	movs	r3, #0
 80078fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007900:	7033      	strb	r3, [r6, #0]
 8007902:	f108 0301 	add.w	r3, r8, #1
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8304 	beq.w	8007f18 <_dtoa_r+0xa58>
 8007910:	601e      	str	r6, [r3, #0]
 8007912:	e301      	b.n	8007f18 <_dtoa_r+0xa58>
 8007914:	2202      	movs	r2, #2
 8007916:	e75e      	b.n	80077d6 <_dtoa_r+0x316>
 8007918:	07cc      	lsls	r4, r1, #31
 800791a:	d504      	bpl.n	8007926 <_dtoa_r+0x466>
 800791c:	ed90 6b00 	vldr	d6, [r0]
 8007920:	3201      	adds	r2, #1
 8007922:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007926:	1049      	asrs	r1, r1, #1
 8007928:	3008      	adds	r0, #8
 800792a:	e755      	b.n	80077d8 <_dtoa_r+0x318>
 800792c:	d022      	beq.n	8007974 <_dtoa_r+0x4b4>
 800792e:	f1c8 0100 	rsb	r1, r8, #0
 8007932:	4a68      	ldr	r2, [pc, #416]	@ (8007ad4 <_dtoa_r+0x614>)
 8007934:	f001 000f 	and.w	r0, r1, #15
 8007938:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800793c:	ed92 7b00 	vldr	d7, [r2]
 8007940:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007944:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007948:	4863      	ldr	r0, [pc, #396]	@ (8007ad8 <_dtoa_r+0x618>)
 800794a:	1109      	asrs	r1, r1, #4
 800794c:	2400      	movs	r4, #0
 800794e:	2202      	movs	r2, #2
 8007950:	b929      	cbnz	r1, 800795e <_dtoa_r+0x49e>
 8007952:	2c00      	cmp	r4, #0
 8007954:	f43f af49 	beq.w	80077ea <_dtoa_r+0x32a>
 8007958:	ed8d 7b02 	vstr	d7, [sp, #8]
 800795c:	e745      	b.n	80077ea <_dtoa_r+0x32a>
 800795e:	07ce      	lsls	r6, r1, #31
 8007960:	d505      	bpl.n	800796e <_dtoa_r+0x4ae>
 8007962:	ed90 6b00 	vldr	d6, [r0]
 8007966:	3201      	adds	r2, #1
 8007968:	2401      	movs	r4, #1
 800796a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800796e:	1049      	asrs	r1, r1, #1
 8007970:	3008      	adds	r0, #8
 8007972:	e7ed      	b.n	8007950 <_dtoa_r+0x490>
 8007974:	2202      	movs	r2, #2
 8007976:	e738      	b.n	80077ea <_dtoa_r+0x32a>
 8007978:	f8cd 8010 	str.w	r8, [sp, #16]
 800797c:	4654      	mov	r4, sl
 800797e:	e754      	b.n	800782a <_dtoa_r+0x36a>
 8007980:	4a54      	ldr	r2, [pc, #336]	@ (8007ad4 <_dtoa_r+0x614>)
 8007982:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007986:	ed12 4b02 	vldr	d4, [r2, #-8]
 800798a:	9a08      	ldr	r2, [sp, #32]
 800798c:	ec41 0b17 	vmov	d7, r0, r1
 8007990:	443c      	add	r4, r7
 8007992:	b34a      	cbz	r2, 80079e8 <_dtoa_r+0x528>
 8007994:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007998:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800799c:	463e      	mov	r6, r7
 800799e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80079a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80079a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80079aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079ae:	ee14 2a90 	vmov	r2, s9
 80079b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80079b6:	3230      	adds	r2, #48	@ 0x30
 80079b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80079bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	f806 2b01 	strb.w	r2, [r6], #1
 80079c8:	d438      	bmi.n	8007a3c <_dtoa_r+0x57c>
 80079ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 80079ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80079d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d6:	d462      	bmi.n	8007a9e <_dtoa_r+0x5de>
 80079d8:	42a6      	cmp	r6, r4
 80079da:	f43f af4d 	beq.w	8007878 <_dtoa_r+0x3b8>
 80079de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80079e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80079e6:	e7e0      	b.n	80079aa <_dtoa_r+0x4ea>
 80079e8:	4621      	mov	r1, r4
 80079ea:	463e      	mov	r6, r7
 80079ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 80079f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80079f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079f8:	ee14 2a90 	vmov	r2, s9
 80079fc:	3230      	adds	r2, #48	@ 0x30
 80079fe:	f806 2b01 	strb.w	r2, [r6], #1
 8007a02:	42a6      	cmp	r6, r4
 8007a04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a0c:	d119      	bne.n	8007a42 <_dtoa_r+0x582>
 8007a0e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007a12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007a16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1e:	dc3e      	bgt.n	8007a9e <_dtoa_r+0x5de>
 8007a20:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007a24:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2c:	f57f af24 	bpl.w	8007878 <_dtoa_r+0x3b8>
 8007a30:	460e      	mov	r6, r1
 8007a32:	3901      	subs	r1, #1
 8007a34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a38:	2b30      	cmp	r3, #48	@ 0x30
 8007a3a:	d0f9      	beq.n	8007a30 <_dtoa_r+0x570>
 8007a3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a40:	e758      	b.n	80078f4 <_dtoa_r+0x434>
 8007a42:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a46:	e7d5      	b.n	80079f4 <_dtoa_r+0x534>
 8007a48:	d10b      	bne.n	8007a62 <_dtoa_r+0x5a2>
 8007a4a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007a4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007a52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5e:	f2c0 8161 	blt.w	8007d24 <_dtoa_r+0x864>
 8007a62:	2400      	movs	r4, #0
 8007a64:	4625      	mov	r5, r4
 8007a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	463e      	mov	r6, r7
 8007a6e:	f04f 0800 	mov.w	r8, #0
 8007a72:	4621      	mov	r1, r4
 8007a74:	4648      	mov	r0, r9
 8007a76:	f000 fbb9 	bl	80081ec <_Bfree>
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	d0de      	beq.n	8007a3c <_dtoa_r+0x57c>
 8007a7e:	f1b8 0f00 	cmp.w	r8, #0
 8007a82:	d005      	beq.n	8007a90 <_dtoa_r+0x5d0>
 8007a84:	45a8      	cmp	r8, r5
 8007a86:	d003      	beq.n	8007a90 <_dtoa_r+0x5d0>
 8007a88:	4641      	mov	r1, r8
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	f000 fbae 	bl	80081ec <_Bfree>
 8007a90:	4629      	mov	r1, r5
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 fbaa 	bl	80081ec <_Bfree>
 8007a98:	e7d0      	b.n	8007a3c <_dtoa_r+0x57c>
 8007a9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007a9e:	4633      	mov	r3, r6
 8007aa0:	461e      	mov	r6, r3
 8007aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aa6:	2a39      	cmp	r2, #57	@ 0x39
 8007aa8:	d106      	bne.n	8007ab8 <_dtoa_r+0x5f8>
 8007aaa:	429f      	cmp	r7, r3
 8007aac:	d1f8      	bne.n	8007aa0 <_dtoa_r+0x5e0>
 8007aae:	9a04      	ldr	r2, [sp, #16]
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	9204      	str	r2, [sp, #16]
 8007ab4:	2230      	movs	r2, #48	@ 0x30
 8007ab6:	703a      	strb	r2, [r7, #0]
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	3201      	adds	r2, #1
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e7bd      	b.n	8007a3c <_dtoa_r+0x57c>
 8007ac0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ac4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007acc:	f47f aeef 	bne.w	80078ae <_dtoa_r+0x3ee>
 8007ad0:	e710      	b.n	80078f4 <_dtoa_r+0x434>
 8007ad2:	bf00      	nop
 8007ad4:	0800aa50 	.word	0x0800aa50
 8007ad8:	0800aa28 	.word	0x0800aa28
 8007adc:	9908      	ldr	r1, [sp, #32]
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	f000 80e3 	beq.w	8007caa <_dtoa_r+0x7ea>
 8007ae4:	9907      	ldr	r1, [sp, #28]
 8007ae6:	2901      	cmp	r1, #1
 8007ae8:	f300 80c8 	bgt.w	8007c7c <_dtoa_r+0x7bc>
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	f000 80c1 	beq.w	8007c74 <_dtoa_r+0x7b4>
 8007af2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007af6:	9e05      	ldr	r6, [sp, #20]
 8007af8:	461c      	mov	r4, r3
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	9b05      	ldr	r3, [sp, #20]
 8007afe:	4413      	add	r3, r2
 8007b00:	9305      	str	r3, [sp, #20]
 8007b02:	9b06      	ldr	r3, [sp, #24]
 8007b04:	2101      	movs	r1, #1
 8007b06:	4413      	add	r3, r2
 8007b08:	4648      	mov	r0, r9
 8007b0a:	9306      	str	r3, [sp, #24]
 8007b0c:	f000 fc6c 	bl	80083e8 <__i2b>
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	4605      	mov	r5, r0
 8007b14:	b166      	cbz	r6, 8007b30 <_dtoa_r+0x670>
 8007b16:	9a06      	ldr	r2, [sp, #24]
 8007b18:	2a00      	cmp	r2, #0
 8007b1a:	dd09      	ble.n	8007b30 <_dtoa_r+0x670>
 8007b1c:	42b2      	cmp	r2, r6
 8007b1e:	9905      	ldr	r1, [sp, #20]
 8007b20:	bfa8      	it	ge
 8007b22:	4632      	movge	r2, r6
 8007b24:	1a89      	subs	r1, r1, r2
 8007b26:	9105      	str	r1, [sp, #20]
 8007b28:	9906      	ldr	r1, [sp, #24]
 8007b2a:	1ab6      	subs	r6, r6, r2
 8007b2c:	1a8a      	subs	r2, r1, r2
 8007b2e:	9206      	str	r2, [sp, #24]
 8007b30:	b1fb      	cbz	r3, 8007b72 <_dtoa_r+0x6b2>
 8007b32:	9a08      	ldr	r2, [sp, #32]
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	f000 80bc 	beq.w	8007cb2 <_dtoa_r+0x7f2>
 8007b3a:	b19c      	cbz	r4, 8007b64 <_dtoa_r+0x6a4>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4648      	mov	r0, r9
 8007b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b44:	f000 fd10 	bl	8008568 <__pow5mult>
 8007b48:	9a01      	ldr	r2, [sp, #4]
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	4648      	mov	r0, r9
 8007b50:	f000 fc60 	bl	8008414 <__multiply>
 8007b54:	9901      	ldr	r1, [sp, #4]
 8007b56:	9004      	str	r0, [sp, #16]
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f000 fb47 	bl	80081ec <_Bfree>
 8007b5e:	9a04      	ldr	r2, [sp, #16]
 8007b60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b62:	9201      	str	r2, [sp, #4]
 8007b64:	1b1a      	subs	r2, r3, r4
 8007b66:	d004      	beq.n	8007b72 <_dtoa_r+0x6b2>
 8007b68:	9901      	ldr	r1, [sp, #4]
 8007b6a:	4648      	mov	r0, r9
 8007b6c:	f000 fcfc 	bl	8008568 <__pow5mult>
 8007b70:	9001      	str	r0, [sp, #4]
 8007b72:	2101      	movs	r1, #1
 8007b74:	4648      	mov	r0, r9
 8007b76:	f000 fc37 	bl	80083e8 <__i2b>
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 81d0 	beq.w	8007f24 <_dtoa_r+0xa64>
 8007b84:	461a      	mov	r2, r3
 8007b86:	4601      	mov	r1, r0
 8007b88:	4648      	mov	r0, r9
 8007b8a:	f000 fced 	bl	8008568 <__pow5mult>
 8007b8e:	9b07      	ldr	r3, [sp, #28]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	4604      	mov	r4, r0
 8007b94:	f300 8095 	bgt.w	8007cc2 <_dtoa_r+0x802>
 8007b98:	9b02      	ldr	r3, [sp, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 808b 	bne.w	8007cb6 <_dtoa_r+0x7f6>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	f040 8087 	bne.w	8007cba <_dtoa_r+0x7fa>
 8007bac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007bb0:	0d12      	lsrs	r2, r2, #20
 8007bb2:	0512      	lsls	r2, r2, #20
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	f000 8082 	beq.w	8007cbe <_dtoa_r+0x7fe>
 8007bba:	9b05      	ldr	r3, [sp, #20]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	9b06      	ldr	r3, [sp, #24]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9306      	str	r3, [sp, #24]
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 81af 	beq.w	8007f30 <_dtoa_r+0xa70>
 8007bd2:	6922      	ldr	r2, [r4, #16]
 8007bd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007bd8:	6910      	ldr	r0, [r2, #16]
 8007bda:	f000 fbb9 	bl	8008350 <__hi0bits>
 8007bde:	f1c0 0020 	rsb	r0, r0, #32
 8007be2:	9b06      	ldr	r3, [sp, #24]
 8007be4:	4418      	add	r0, r3
 8007be6:	f010 001f 	ands.w	r0, r0, #31
 8007bea:	d076      	beq.n	8007cda <_dtoa_r+0x81a>
 8007bec:	f1c0 0220 	rsb	r2, r0, #32
 8007bf0:	2a04      	cmp	r2, #4
 8007bf2:	dd69      	ble.n	8007cc8 <_dtoa_r+0x808>
 8007bf4:	9b05      	ldr	r3, [sp, #20]
 8007bf6:	f1c0 001c 	rsb	r0, r0, #28
 8007bfa:	4403      	add	r3, r0
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	9b06      	ldr	r3, [sp, #24]
 8007c00:	4406      	add	r6, r0
 8007c02:	4403      	add	r3, r0
 8007c04:	9306      	str	r3, [sp, #24]
 8007c06:	9b05      	ldr	r3, [sp, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dd05      	ble.n	8007c18 <_dtoa_r+0x758>
 8007c0c:	9901      	ldr	r1, [sp, #4]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4648      	mov	r0, r9
 8007c12:	f000 fd03 	bl	800861c <__lshift>
 8007c16:	9001      	str	r0, [sp, #4]
 8007c18:	9b06      	ldr	r3, [sp, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dd05      	ble.n	8007c2a <_dtoa_r+0x76a>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	461a      	mov	r2, r3
 8007c22:	4648      	mov	r0, r9
 8007c24:	f000 fcfa 	bl	800861c <__lshift>
 8007c28:	4604      	mov	r4, r0
 8007c2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d056      	beq.n	8007cde <_dtoa_r+0x81e>
 8007c30:	9801      	ldr	r0, [sp, #4]
 8007c32:	4621      	mov	r1, r4
 8007c34:	f000 fd5e 	bl	80086f4 <__mcmp>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	da50      	bge.n	8007cde <_dtoa_r+0x81e>
 8007c3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	9901      	ldr	r1, [sp, #4]
 8007c44:	2300      	movs	r3, #0
 8007c46:	220a      	movs	r2, #10
 8007c48:	4648      	mov	r0, r9
 8007c4a:	f000 faf1 	bl	8008230 <__multadd>
 8007c4e:	9b08      	ldr	r3, [sp, #32]
 8007c50:	9001      	str	r0, [sp, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 816e 	beq.w	8007f34 <_dtoa_r+0xa74>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	220a      	movs	r2, #10
 8007c5e:	4648      	mov	r0, r9
 8007c60:	f000 fae6 	bl	8008230 <__multadd>
 8007c64:	f1bb 0f00 	cmp.w	fp, #0
 8007c68:	4605      	mov	r5, r0
 8007c6a:	dc64      	bgt.n	8007d36 <_dtoa_r+0x876>
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	dc3e      	bgt.n	8007cf0 <_dtoa_r+0x830>
 8007c72:	e060      	b.n	8007d36 <_dtoa_r+0x876>
 8007c74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c7a:	e73c      	b.n	8007af6 <_dtoa_r+0x636>
 8007c7c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	bfbf      	itttt	lt
 8007c84:	1ae2      	sublt	r2, r4, r3
 8007c86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c88:	189b      	addlt	r3, r3, r2
 8007c8a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007c8c:	bfae      	itee	ge
 8007c8e:	1b1c      	subge	r4, r3, r4
 8007c90:	4623      	movlt	r3, r4
 8007c92:	2400      	movlt	r4, #0
 8007c94:	f1ba 0f00 	cmp.w	sl, #0
 8007c98:	bfb5      	itete	lt
 8007c9a:	9a05      	ldrlt	r2, [sp, #20]
 8007c9c:	9e05      	ldrge	r6, [sp, #20]
 8007c9e:	eba2 060a 	sublt.w	r6, r2, sl
 8007ca2:	4652      	movge	r2, sl
 8007ca4:	bfb8      	it	lt
 8007ca6:	2200      	movlt	r2, #0
 8007ca8:	e727      	b.n	8007afa <_dtoa_r+0x63a>
 8007caa:	9e05      	ldr	r6, [sp, #20]
 8007cac:	9d08      	ldr	r5, [sp, #32]
 8007cae:	461c      	mov	r4, r3
 8007cb0:	e730      	b.n	8007b14 <_dtoa_r+0x654>
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	e758      	b.n	8007b68 <_dtoa_r+0x6a8>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	e786      	b.n	8007bc8 <_dtoa_r+0x708>
 8007cba:	9b02      	ldr	r3, [sp, #8]
 8007cbc:	e784      	b.n	8007bc8 <_dtoa_r+0x708>
 8007cbe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007cc0:	e783      	b.n	8007bca <_dtoa_r+0x70a>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cc6:	e784      	b.n	8007bd2 <_dtoa_r+0x712>
 8007cc8:	d09d      	beq.n	8007c06 <_dtoa_r+0x746>
 8007cca:	9b05      	ldr	r3, [sp, #20]
 8007ccc:	321c      	adds	r2, #28
 8007cce:	4413      	add	r3, r2
 8007cd0:	9305      	str	r3, [sp, #20]
 8007cd2:	9b06      	ldr	r3, [sp, #24]
 8007cd4:	4416      	add	r6, r2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	e794      	b.n	8007c04 <_dtoa_r+0x744>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	e7f5      	b.n	8007cca <_dtoa_r+0x80a>
 8007cde:	f1ba 0f00 	cmp.w	sl, #0
 8007ce2:	f8cd 8010 	str.w	r8, [sp, #16]
 8007ce6:	46d3      	mov	fp, sl
 8007ce8:	dc21      	bgt.n	8007d2e <_dtoa_r+0x86e>
 8007cea:	9b07      	ldr	r3, [sp, #28]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	dd1e      	ble.n	8007d2e <_dtoa_r+0x86e>
 8007cf0:	f1bb 0f00 	cmp.w	fp, #0
 8007cf4:	f47f aeb7 	bne.w	8007a66 <_dtoa_r+0x5a6>
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	465b      	mov	r3, fp
 8007cfc:	2205      	movs	r2, #5
 8007cfe:	4648      	mov	r0, r9
 8007d00:	f000 fa96 	bl	8008230 <__multadd>
 8007d04:	4601      	mov	r1, r0
 8007d06:	4604      	mov	r4, r0
 8007d08:	9801      	ldr	r0, [sp, #4]
 8007d0a:	f000 fcf3 	bl	80086f4 <__mcmp>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f77f aea9 	ble.w	8007a66 <_dtoa_r+0x5a6>
 8007d14:	463e      	mov	r6, r7
 8007d16:	2331      	movs	r3, #49	@ 0x31
 8007d18:	f806 3b01 	strb.w	r3, [r6], #1
 8007d1c:	9b04      	ldr	r3, [sp, #16]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	e6a4      	b.n	8007a6e <_dtoa_r+0x5ae>
 8007d24:	f8cd 8010 	str.w	r8, [sp, #16]
 8007d28:	4654      	mov	r4, sl
 8007d2a:	4625      	mov	r5, r4
 8007d2c:	e7f2      	b.n	8007d14 <_dtoa_r+0x854>
 8007d2e:	9b08      	ldr	r3, [sp, #32]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 8103 	beq.w	8007f3c <_dtoa_r+0xa7c>
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	dd05      	ble.n	8007d46 <_dtoa_r+0x886>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	4648      	mov	r0, r9
 8007d40:	f000 fc6c 	bl	800861c <__lshift>
 8007d44:	4605      	mov	r5, r0
 8007d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d058      	beq.n	8007dfe <_dtoa_r+0x93e>
 8007d4c:	6869      	ldr	r1, [r5, #4]
 8007d4e:	4648      	mov	r0, r9
 8007d50:	f000 fa0c 	bl	800816c <_Balloc>
 8007d54:	4606      	mov	r6, r0
 8007d56:	b928      	cbnz	r0, 8007d64 <_dtoa_r+0x8a4>
 8007d58:	4b82      	ldr	r3, [pc, #520]	@ (8007f64 <_dtoa_r+0xaa4>)
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d60:	f7ff bbc7 	b.w	80074f2 <_dtoa_r+0x32>
 8007d64:	692a      	ldr	r2, [r5, #16]
 8007d66:	3202      	adds	r2, #2
 8007d68:	0092      	lsls	r2, r2, #2
 8007d6a:	f105 010c 	add.w	r1, r5, #12
 8007d6e:	300c      	adds	r0, #12
 8007d70:	f7ff fb07 	bl	8007382 <memcpy>
 8007d74:	2201      	movs	r2, #1
 8007d76:	4631      	mov	r1, r6
 8007d78:	4648      	mov	r0, r9
 8007d7a:	f000 fc4f 	bl	800861c <__lshift>
 8007d7e:	1c7b      	adds	r3, r7, #1
 8007d80:	9305      	str	r3, [sp, #20]
 8007d82:	eb07 030b 	add.w	r3, r7, fp
 8007d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	46a8      	mov	r8, r5
 8007d90:	9308      	str	r3, [sp, #32]
 8007d92:	4605      	mov	r5, r0
 8007d94:	9b05      	ldr	r3, [sp, #20]
 8007d96:	9801      	ldr	r0, [sp, #4]
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d9e:	f7ff fb05 	bl	80073ac <quorem>
 8007da2:	4641      	mov	r1, r8
 8007da4:	9002      	str	r0, [sp, #8]
 8007da6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007daa:	9801      	ldr	r0, [sp, #4]
 8007dac:	f000 fca2 	bl	80086f4 <__mcmp>
 8007db0:	462a      	mov	r2, r5
 8007db2:	9006      	str	r0, [sp, #24]
 8007db4:	4621      	mov	r1, r4
 8007db6:	4648      	mov	r0, r9
 8007db8:	f000 fcb8 	bl	800872c <__mdiff>
 8007dbc:	68c2      	ldr	r2, [r0, #12]
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	b9fa      	cbnz	r2, 8007e02 <_dtoa_r+0x942>
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	9801      	ldr	r0, [sp, #4]
 8007dc6:	f000 fc95 	bl	80086f4 <__mcmp>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4648      	mov	r0, r9
 8007dd0:	920a      	str	r2, [sp, #40]	@ 0x28
 8007dd2:	f000 fa0b 	bl	80081ec <_Bfree>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dda:	9e05      	ldr	r6, [sp, #20]
 8007ddc:	ea43 0102 	orr.w	r1, r3, r2
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	4319      	orrs	r1, r3
 8007de4:	d10f      	bne.n	8007e06 <_dtoa_r+0x946>
 8007de6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007dea:	d028      	beq.n	8007e3e <_dtoa_r+0x97e>
 8007dec:	9b06      	ldr	r3, [sp, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	dd02      	ble.n	8007df8 <_dtoa_r+0x938>
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007df8:	f88b a000 	strb.w	sl, [fp]
 8007dfc:	e639      	b.n	8007a72 <_dtoa_r+0x5b2>
 8007dfe:	4628      	mov	r0, r5
 8007e00:	e7bd      	b.n	8007d7e <_dtoa_r+0x8be>
 8007e02:	2201      	movs	r2, #1
 8007e04:	e7e2      	b.n	8007dcc <_dtoa_r+0x90c>
 8007e06:	9b06      	ldr	r3, [sp, #24]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	db04      	blt.n	8007e16 <_dtoa_r+0x956>
 8007e0c:	9907      	ldr	r1, [sp, #28]
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	9908      	ldr	r1, [sp, #32]
 8007e12:	430b      	orrs	r3, r1
 8007e14:	d120      	bne.n	8007e58 <_dtoa_r+0x998>
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	ddee      	ble.n	8007df8 <_dtoa_r+0x938>
 8007e1a:	9901      	ldr	r1, [sp, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	4648      	mov	r0, r9
 8007e20:	f000 fbfc 	bl	800861c <__lshift>
 8007e24:	4621      	mov	r1, r4
 8007e26:	9001      	str	r0, [sp, #4]
 8007e28:	f000 fc64 	bl	80086f4 <__mcmp>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	dc03      	bgt.n	8007e38 <_dtoa_r+0x978>
 8007e30:	d1e2      	bne.n	8007df8 <_dtoa_r+0x938>
 8007e32:	f01a 0f01 	tst.w	sl, #1
 8007e36:	d0df      	beq.n	8007df8 <_dtoa_r+0x938>
 8007e38:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007e3c:	d1d9      	bne.n	8007df2 <_dtoa_r+0x932>
 8007e3e:	2339      	movs	r3, #57	@ 0x39
 8007e40:	f88b 3000 	strb.w	r3, [fp]
 8007e44:	4633      	mov	r3, r6
 8007e46:	461e      	mov	r6, r3
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e4e:	2a39      	cmp	r2, #57	@ 0x39
 8007e50:	d053      	beq.n	8007efa <_dtoa_r+0xa3a>
 8007e52:	3201      	adds	r2, #1
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	e60c      	b.n	8007a72 <_dtoa_r+0x5b2>
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	dd07      	ble.n	8007e6c <_dtoa_r+0x9ac>
 8007e5c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007e60:	d0ed      	beq.n	8007e3e <_dtoa_r+0x97e>
 8007e62:	f10a 0301 	add.w	r3, sl, #1
 8007e66:	f88b 3000 	strb.w	r3, [fp]
 8007e6a:	e602      	b.n	8007a72 <_dtoa_r+0x5b2>
 8007e6c:	9b05      	ldr	r3, [sp, #20]
 8007e6e:	9a05      	ldr	r2, [sp, #20]
 8007e70:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d029      	beq.n	8007ece <_dtoa_r+0xa0e>
 8007e7a:	9901      	ldr	r1, [sp, #4]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	220a      	movs	r2, #10
 8007e80:	4648      	mov	r0, r9
 8007e82:	f000 f9d5 	bl	8008230 <__multadd>
 8007e86:	45a8      	cmp	r8, r5
 8007e88:	9001      	str	r0, [sp, #4]
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	f04f 020a 	mov.w	r2, #10
 8007e92:	4641      	mov	r1, r8
 8007e94:	4648      	mov	r0, r9
 8007e96:	d107      	bne.n	8007ea8 <_dtoa_r+0x9e8>
 8007e98:	f000 f9ca 	bl	8008230 <__multadd>
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	9b05      	ldr	r3, [sp, #20]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	9305      	str	r3, [sp, #20]
 8007ea6:	e775      	b.n	8007d94 <_dtoa_r+0x8d4>
 8007ea8:	f000 f9c2 	bl	8008230 <__multadd>
 8007eac:	4629      	mov	r1, r5
 8007eae:	4680      	mov	r8, r0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	220a      	movs	r2, #10
 8007eb4:	4648      	mov	r0, r9
 8007eb6:	f000 f9bb 	bl	8008230 <__multadd>
 8007eba:	4605      	mov	r5, r0
 8007ebc:	e7f0      	b.n	8007ea0 <_dtoa_r+0x9e0>
 8007ebe:	f1bb 0f00 	cmp.w	fp, #0
 8007ec2:	bfcc      	ite	gt
 8007ec4:	465e      	movgt	r6, fp
 8007ec6:	2601      	movle	r6, #1
 8007ec8:	443e      	add	r6, r7
 8007eca:	f04f 0800 	mov.w	r8, #0
 8007ece:	9901      	ldr	r1, [sp, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	4648      	mov	r0, r9
 8007ed4:	f000 fba2 	bl	800861c <__lshift>
 8007ed8:	4621      	mov	r1, r4
 8007eda:	9001      	str	r0, [sp, #4]
 8007edc:	f000 fc0a 	bl	80086f4 <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	dcaf      	bgt.n	8007e44 <_dtoa_r+0x984>
 8007ee4:	d102      	bne.n	8007eec <_dtoa_r+0xa2c>
 8007ee6:	f01a 0f01 	tst.w	sl, #1
 8007eea:	d1ab      	bne.n	8007e44 <_dtoa_r+0x984>
 8007eec:	4633      	mov	r3, r6
 8007eee:	461e      	mov	r6, r3
 8007ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ef4:	2a30      	cmp	r2, #48	@ 0x30
 8007ef6:	d0fa      	beq.n	8007eee <_dtoa_r+0xa2e>
 8007ef8:	e5bb      	b.n	8007a72 <_dtoa_r+0x5b2>
 8007efa:	429f      	cmp	r7, r3
 8007efc:	d1a3      	bne.n	8007e46 <_dtoa_r+0x986>
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	3301      	adds	r3, #1
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	2331      	movs	r3, #49	@ 0x31
 8007f06:	703b      	strb	r3, [r7, #0]
 8007f08:	e5b3      	b.n	8007a72 <_dtoa_r+0x5b2>
 8007f0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f0c:	4f16      	ldr	r7, [pc, #88]	@ (8007f68 <_dtoa_r+0xaa8>)
 8007f0e:	b11b      	cbz	r3, 8007f18 <_dtoa_r+0xa58>
 8007f10:	f107 0308 	add.w	r3, r7, #8
 8007f14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	4638      	mov	r0, r7
 8007f1a:	b011      	add	sp, #68	@ 0x44
 8007f1c:	ecbd 8b02 	vpop	{d8}
 8007f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f24:	9b07      	ldr	r3, [sp, #28]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	f77f ae36 	ble.w	8007b98 <_dtoa_r+0x6d8>
 8007f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f30:	2001      	movs	r0, #1
 8007f32:	e656      	b.n	8007be2 <_dtoa_r+0x722>
 8007f34:	f1bb 0f00 	cmp.w	fp, #0
 8007f38:	f77f aed7 	ble.w	8007cea <_dtoa_r+0x82a>
 8007f3c:	463e      	mov	r6, r7
 8007f3e:	9801      	ldr	r0, [sp, #4]
 8007f40:	4621      	mov	r1, r4
 8007f42:	f7ff fa33 	bl	80073ac <quorem>
 8007f46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007f4a:	f806 ab01 	strb.w	sl, [r6], #1
 8007f4e:	1bf2      	subs	r2, r6, r7
 8007f50:	4593      	cmp	fp, r2
 8007f52:	ddb4      	ble.n	8007ebe <_dtoa_r+0x9fe>
 8007f54:	9901      	ldr	r1, [sp, #4]
 8007f56:	2300      	movs	r3, #0
 8007f58:	220a      	movs	r2, #10
 8007f5a:	4648      	mov	r0, r9
 8007f5c:	f000 f968 	bl	8008230 <__multadd>
 8007f60:	9001      	str	r0, [sp, #4]
 8007f62:	e7ec      	b.n	8007f3e <_dtoa_r+0xa7e>
 8007f64:	0800a9ad 	.word	0x0800a9ad
 8007f68:	0800a931 	.word	0x0800a931

08007f6c <_free_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4605      	mov	r5, r0
 8007f70:	2900      	cmp	r1, #0
 8007f72:	d041      	beq.n	8007ff8 <_free_r+0x8c>
 8007f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f78:	1f0c      	subs	r4, r1, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bfb8      	it	lt
 8007f7e:	18e4      	addlt	r4, r4, r3
 8007f80:	f000 f8e8 	bl	8008154 <__malloc_lock>
 8007f84:	4a1d      	ldr	r2, [pc, #116]	@ (8007ffc <_free_r+0x90>)
 8007f86:	6813      	ldr	r3, [r2, #0]
 8007f88:	b933      	cbnz	r3, 8007f98 <_free_r+0x2c>
 8007f8a:	6063      	str	r3, [r4, #4]
 8007f8c:	6014      	str	r4, [r2, #0]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f94:	f000 b8e4 	b.w	8008160 <__malloc_unlock>
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d908      	bls.n	8007fae <_free_r+0x42>
 8007f9c:	6820      	ldr	r0, [r4, #0]
 8007f9e:	1821      	adds	r1, r4, r0
 8007fa0:	428b      	cmp	r3, r1
 8007fa2:	bf01      	itttt	eq
 8007fa4:	6819      	ldreq	r1, [r3, #0]
 8007fa6:	685b      	ldreq	r3, [r3, #4]
 8007fa8:	1809      	addeq	r1, r1, r0
 8007faa:	6021      	streq	r1, [r4, #0]
 8007fac:	e7ed      	b.n	8007f8a <_free_r+0x1e>
 8007fae:	461a      	mov	r2, r3
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	b10b      	cbz	r3, 8007fb8 <_free_r+0x4c>
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	d9fa      	bls.n	8007fae <_free_r+0x42>
 8007fb8:	6811      	ldr	r1, [r2, #0]
 8007fba:	1850      	adds	r0, r2, r1
 8007fbc:	42a0      	cmp	r0, r4
 8007fbe:	d10b      	bne.n	8007fd8 <_free_r+0x6c>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	1850      	adds	r0, r2, r1
 8007fc6:	4283      	cmp	r3, r0
 8007fc8:	6011      	str	r1, [r2, #0]
 8007fca:	d1e0      	bne.n	8007f8e <_free_r+0x22>
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	6053      	str	r3, [r2, #4]
 8007fd2:	4408      	add	r0, r1
 8007fd4:	6010      	str	r0, [r2, #0]
 8007fd6:	e7da      	b.n	8007f8e <_free_r+0x22>
 8007fd8:	d902      	bls.n	8007fe0 <_free_r+0x74>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	e7d6      	b.n	8007f8e <_free_r+0x22>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	1821      	adds	r1, r4, r0
 8007fe4:	428b      	cmp	r3, r1
 8007fe6:	bf04      	itt	eq
 8007fe8:	6819      	ldreq	r1, [r3, #0]
 8007fea:	685b      	ldreq	r3, [r3, #4]
 8007fec:	6063      	str	r3, [r4, #4]
 8007fee:	bf04      	itt	eq
 8007ff0:	1809      	addeq	r1, r1, r0
 8007ff2:	6021      	streq	r1, [r4, #0]
 8007ff4:	6054      	str	r4, [r2, #4]
 8007ff6:	e7ca      	b.n	8007f8e <_free_r+0x22>
 8007ff8:	bd38      	pop	{r3, r4, r5, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000ac8 	.word	0x20000ac8

08008000 <malloc>:
 8008000:	4b02      	ldr	r3, [pc, #8]	@ (800800c <malloc+0xc>)
 8008002:	4601      	mov	r1, r0
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	f000 b825 	b.w	8008054 <_malloc_r>
 800800a:	bf00      	nop
 800800c:	200002b4 	.word	0x200002b4

08008010 <sbrk_aligned>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4e0f      	ldr	r6, [pc, #60]	@ (8008050 <sbrk_aligned+0x40>)
 8008014:	460c      	mov	r4, r1
 8008016:	6831      	ldr	r1, [r6, #0]
 8008018:	4605      	mov	r5, r0
 800801a:	b911      	cbnz	r1, 8008022 <sbrk_aligned+0x12>
 800801c:	f001 fdb8 	bl	8009b90 <_sbrk_r>
 8008020:	6030      	str	r0, [r6, #0]
 8008022:	4621      	mov	r1, r4
 8008024:	4628      	mov	r0, r5
 8008026:	f001 fdb3 	bl	8009b90 <_sbrk_r>
 800802a:	1c43      	adds	r3, r0, #1
 800802c:	d103      	bne.n	8008036 <sbrk_aligned+0x26>
 800802e:	f04f 34ff 	mov.w	r4, #4294967295
 8008032:	4620      	mov	r0, r4
 8008034:	bd70      	pop	{r4, r5, r6, pc}
 8008036:	1cc4      	adds	r4, r0, #3
 8008038:	f024 0403 	bic.w	r4, r4, #3
 800803c:	42a0      	cmp	r0, r4
 800803e:	d0f8      	beq.n	8008032 <sbrk_aligned+0x22>
 8008040:	1a21      	subs	r1, r4, r0
 8008042:	4628      	mov	r0, r5
 8008044:	f001 fda4 	bl	8009b90 <_sbrk_r>
 8008048:	3001      	adds	r0, #1
 800804a:	d1f2      	bne.n	8008032 <sbrk_aligned+0x22>
 800804c:	e7ef      	b.n	800802e <sbrk_aligned+0x1e>
 800804e:	bf00      	nop
 8008050:	20000ac4 	.word	0x20000ac4

08008054 <_malloc_r>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	1ccd      	adds	r5, r1, #3
 800805a:	f025 0503 	bic.w	r5, r5, #3
 800805e:	3508      	adds	r5, #8
 8008060:	2d0c      	cmp	r5, #12
 8008062:	bf38      	it	cc
 8008064:	250c      	movcc	r5, #12
 8008066:	2d00      	cmp	r5, #0
 8008068:	4606      	mov	r6, r0
 800806a:	db01      	blt.n	8008070 <_malloc_r+0x1c>
 800806c:	42a9      	cmp	r1, r5
 800806e:	d904      	bls.n	800807a <_malloc_r+0x26>
 8008070:	230c      	movs	r3, #12
 8008072:	6033      	str	r3, [r6, #0]
 8008074:	2000      	movs	r0, #0
 8008076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008150 <_malloc_r+0xfc>
 800807e:	f000 f869 	bl	8008154 <__malloc_lock>
 8008082:	f8d8 3000 	ldr.w	r3, [r8]
 8008086:	461c      	mov	r4, r3
 8008088:	bb44      	cbnz	r4, 80080dc <_malloc_r+0x88>
 800808a:	4629      	mov	r1, r5
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff ffbf 	bl	8008010 <sbrk_aligned>
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	4604      	mov	r4, r0
 8008096:	d158      	bne.n	800814a <_malloc_r+0xf6>
 8008098:	f8d8 4000 	ldr.w	r4, [r8]
 800809c:	4627      	mov	r7, r4
 800809e:	2f00      	cmp	r7, #0
 80080a0:	d143      	bne.n	800812a <_malloc_r+0xd6>
 80080a2:	2c00      	cmp	r4, #0
 80080a4:	d04b      	beq.n	800813e <_malloc_r+0xea>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	4639      	mov	r1, r7
 80080aa:	4630      	mov	r0, r6
 80080ac:	eb04 0903 	add.w	r9, r4, r3
 80080b0:	f001 fd6e 	bl	8009b90 <_sbrk_r>
 80080b4:	4581      	cmp	r9, r0
 80080b6:	d142      	bne.n	800813e <_malloc_r+0xea>
 80080b8:	6821      	ldr	r1, [r4, #0]
 80080ba:	1a6d      	subs	r5, r5, r1
 80080bc:	4629      	mov	r1, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	f7ff ffa6 	bl	8008010 <sbrk_aligned>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d03a      	beq.n	800813e <_malloc_r+0xea>
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	442b      	add	r3, r5
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	f8d8 3000 	ldr.w	r3, [r8]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	bb62      	cbnz	r2, 8008130 <_malloc_r+0xdc>
 80080d6:	f8c8 7000 	str.w	r7, [r8]
 80080da:	e00f      	b.n	80080fc <_malloc_r+0xa8>
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	1b52      	subs	r2, r2, r5
 80080e0:	d420      	bmi.n	8008124 <_malloc_r+0xd0>
 80080e2:	2a0b      	cmp	r2, #11
 80080e4:	d917      	bls.n	8008116 <_malloc_r+0xc2>
 80080e6:	1961      	adds	r1, r4, r5
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	6025      	str	r5, [r4, #0]
 80080ec:	bf18      	it	ne
 80080ee:	6059      	strne	r1, [r3, #4]
 80080f0:	6863      	ldr	r3, [r4, #4]
 80080f2:	bf08      	it	eq
 80080f4:	f8c8 1000 	streq.w	r1, [r8]
 80080f8:	5162      	str	r2, [r4, r5]
 80080fa:	604b      	str	r3, [r1, #4]
 80080fc:	4630      	mov	r0, r6
 80080fe:	f000 f82f 	bl	8008160 <__malloc_unlock>
 8008102:	f104 000b 	add.w	r0, r4, #11
 8008106:	1d23      	adds	r3, r4, #4
 8008108:	f020 0007 	bic.w	r0, r0, #7
 800810c:	1ac2      	subs	r2, r0, r3
 800810e:	bf1c      	itt	ne
 8008110:	1a1b      	subne	r3, r3, r0
 8008112:	50a3      	strne	r3, [r4, r2]
 8008114:	e7af      	b.n	8008076 <_malloc_r+0x22>
 8008116:	6862      	ldr	r2, [r4, #4]
 8008118:	42a3      	cmp	r3, r4
 800811a:	bf0c      	ite	eq
 800811c:	f8c8 2000 	streq.w	r2, [r8]
 8008120:	605a      	strne	r2, [r3, #4]
 8008122:	e7eb      	b.n	80080fc <_malloc_r+0xa8>
 8008124:	4623      	mov	r3, r4
 8008126:	6864      	ldr	r4, [r4, #4]
 8008128:	e7ae      	b.n	8008088 <_malloc_r+0x34>
 800812a:	463c      	mov	r4, r7
 800812c:	687f      	ldr	r7, [r7, #4]
 800812e:	e7b6      	b.n	800809e <_malloc_r+0x4a>
 8008130:	461a      	mov	r2, r3
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	42a3      	cmp	r3, r4
 8008136:	d1fb      	bne.n	8008130 <_malloc_r+0xdc>
 8008138:	2300      	movs	r3, #0
 800813a:	6053      	str	r3, [r2, #4]
 800813c:	e7de      	b.n	80080fc <_malloc_r+0xa8>
 800813e:	230c      	movs	r3, #12
 8008140:	6033      	str	r3, [r6, #0]
 8008142:	4630      	mov	r0, r6
 8008144:	f000 f80c 	bl	8008160 <__malloc_unlock>
 8008148:	e794      	b.n	8008074 <_malloc_r+0x20>
 800814a:	6005      	str	r5, [r0, #0]
 800814c:	e7d6      	b.n	80080fc <_malloc_r+0xa8>
 800814e:	bf00      	nop
 8008150:	20000ac8 	.word	0x20000ac8

08008154 <__malloc_lock>:
 8008154:	4801      	ldr	r0, [pc, #4]	@ (800815c <__malloc_lock+0x8>)
 8008156:	f7ff b912 	b.w	800737e <__retarget_lock_acquire_recursive>
 800815a:	bf00      	nop
 800815c:	20000ac0 	.word	0x20000ac0

08008160 <__malloc_unlock>:
 8008160:	4801      	ldr	r0, [pc, #4]	@ (8008168 <__malloc_unlock+0x8>)
 8008162:	f7ff b90d 	b.w	8007380 <__retarget_lock_release_recursive>
 8008166:	bf00      	nop
 8008168:	20000ac0 	.word	0x20000ac0

0800816c <_Balloc>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	69c6      	ldr	r6, [r0, #28]
 8008170:	4604      	mov	r4, r0
 8008172:	460d      	mov	r5, r1
 8008174:	b976      	cbnz	r6, 8008194 <_Balloc+0x28>
 8008176:	2010      	movs	r0, #16
 8008178:	f7ff ff42 	bl	8008000 <malloc>
 800817c:	4602      	mov	r2, r0
 800817e:	61e0      	str	r0, [r4, #28]
 8008180:	b920      	cbnz	r0, 800818c <_Balloc+0x20>
 8008182:	4b18      	ldr	r3, [pc, #96]	@ (80081e4 <_Balloc+0x78>)
 8008184:	4818      	ldr	r0, [pc, #96]	@ (80081e8 <_Balloc+0x7c>)
 8008186:	216b      	movs	r1, #107	@ 0x6b
 8008188:	f001 fd1a 	bl	8009bc0 <__assert_func>
 800818c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008190:	6006      	str	r6, [r0, #0]
 8008192:	60c6      	str	r6, [r0, #12]
 8008194:	69e6      	ldr	r6, [r4, #28]
 8008196:	68f3      	ldr	r3, [r6, #12]
 8008198:	b183      	cbz	r3, 80081bc <_Balloc+0x50>
 800819a:	69e3      	ldr	r3, [r4, #28]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081a2:	b9b8      	cbnz	r0, 80081d4 <_Balloc+0x68>
 80081a4:	2101      	movs	r1, #1
 80081a6:	fa01 f605 	lsl.w	r6, r1, r5
 80081aa:	1d72      	adds	r2, r6, #5
 80081ac:	0092      	lsls	r2, r2, #2
 80081ae:	4620      	mov	r0, r4
 80081b0:	f001 fd24 	bl	8009bfc <_calloc_r>
 80081b4:	b160      	cbz	r0, 80081d0 <_Balloc+0x64>
 80081b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081ba:	e00e      	b.n	80081da <_Balloc+0x6e>
 80081bc:	2221      	movs	r2, #33	@ 0x21
 80081be:	2104      	movs	r1, #4
 80081c0:	4620      	mov	r0, r4
 80081c2:	f001 fd1b 	bl	8009bfc <_calloc_r>
 80081c6:	69e3      	ldr	r3, [r4, #28]
 80081c8:	60f0      	str	r0, [r6, #12]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e4      	bne.n	800819a <_Balloc+0x2e>
 80081d0:	2000      	movs	r0, #0
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	6802      	ldr	r2, [r0, #0]
 80081d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081da:	2300      	movs	r3, #0
 80081dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081e0:	e7f7      	b.n	80081d2 <_Balloc+0x66>
 80081e2:	bf00      	nop
 80081e4:	0800a93e 	.word	0x0800a93e
 80081e8:	0800a9be 	.word	0x0800a9be

080081ec <_Bfree>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	69c6      	ldr	r6, [r0, #28]
 80081f0:	4605      	mov	r5, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	b976      	cbnz	r6, 8008214 <_Bfree+0x28>
 80081f6:	2010      	movs	r0, #16
 80081f8:	f7ff ff02 	bl	8008000 <malloc>
 80081fc:	4602      	mov	r2, r0
 80081fe:	61e8      	str	r0, [r5, #28]
 8008200:	b920      	cbnz	r0, 800820c <_Bfree+0x20>
 8008202:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <_Bfree+0x3c>)
 8008204:	4809      	ldr	r0, [pc, #36]	@ (800822c <_Bfree+0x40>)
 8008206:	218f      	movs	r1, #143	@ 0x8f
 8008208:	f001 fcda 	bl	8009bc0 <__assert_func>
 800820c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008210:	6006      	str	r6, [r0, #0]
 8008212:	60c6      	str	r6, [r0, #12]
 8008214:	b13c      	cbz	r4, 8008226 <_Bfree+0x3a>
 8008216:	69eb      	ldr	r3, [r5, #28]
 8008218:	6862      	ldr	r2, [r4, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008220:	6021      	str	r1, [r4, #0]
 8008222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	0800a93e 	.word	0x0800a93e
 800822c:	0800a9be 	.word	0x0800a9be

08008230 <__multadd>:
 8008230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008234:	690d      	ldr	r5, [r1, #16]
 8008236:	4607      	mov	r7, r0
 8008238:	460c      	mov	r4, r1
 800823a:	461e      	mov	r6, r3
 800823c:	f101 0c14 	add.w	ip, r1, #20
 8008240:	2000      	movs	r0, #0
 8008242:	f8dc 3000 	ldr.w	r3, [ip]
 8008246:	b299      	uxth	r1, r3
 8008248:	fb02 6101 	mla	r1, r2, r1, r6
 800824c:	0c1e      	lsrs	r6, r3, #16
 800824e:	0c0b      	lsrs	r3, r1, #16
 8008250:	fb02 3306 	mla	r3, r2, r6, r3
 8008254:	b289      	uxth	r1, r1
 8008256:	3001      	adds	r0, #1
 8008258:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800825c:	4285      	cmp	r5, r0
 800825e:	f84c 1b04 	str.w	r1, [ip], #4
 8008262:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008266:	dcec      	bgt.n	8008242 <__multadd+0x12>
 8008268:	b30e      	cbz	r6, 80082ae <__multadd+0x7e>
 800826a:	68a3      	ldr	r3, [r4, #8]
 800826c:	42ab      	cmp	r3, r5
 800826e:	dc19      	bgt.n	80082a4 <__multadd+0x74>
 8008270:	6861      	ldr	r1, [r4, #4]
 8008272:	4638      	mov	r0, r7
 8008274:	3101      	adds	r1, #1
 8008276:	f7ff ff79 	bl	800816c <_Balloc>
 800827a:	4680      	mov	r8, r0
 800827c:	b928      	cbnz	r0, 800828a <__multadd+0x5a>
 800827e:	4602      	mov	r2, r0
 8008280:	4b0c      	ldr	r3, [pc, #48]	@ (80082b4 <__multadd+0x84>)
 8008282:	480d      	ldr	r0, [pc, #52]	@ (80082b8 <__multadd+0x88>)
 8008284:	21ba      	movs	r1, #186	@ 0xba
 8008286:	f001 fc9b 	bl	8009bc0 <__assert_func>
 800828a:	6922      	ldr	r2, [r4, #16]
 800828c:	3202      	adds	r2, #2
 800828e:	f104 010c 	add.w	r1, r4, #12
 8008292:	0092      	lsls	r2, r2, #2
 8008294:	300c      	adds	r0, #12
 8008296:	f7ff f874 	bl	8007382 <memcpy>
 800829a:	4621      	mov	r1, r4
 800829c:	4638      	mov	r0, r7
 800829e:	f7ff ffa5 	bl	80081ec <_Bfree>
 80082a2:	4644      	mov	r4, r8
 80082a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082a8:	3501      	adds	r5, #1
 80082aa:	615e      	str	r6, [r3, #20]
 80082ac:	6125      	str	r5, [r4, #16]
 80082ae:	4620      	mov	r0, r4
 80082b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b4:	0800a9ad 	.word	0x0800a9ad
 80082b8:	0800a9be 	.word	0x0800a9be

080082bc <__s2b>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	460c      	mov	r4, r1
 80082c2:	4615      	mov	r5, r2
 80082c4:	461f      	mov	r7, r3
 80082c6:	2209      	movs	r2, #9
 80082c8:	3308      	adds	r3, #8
 80082ca:	4606      	mov	r6, r0
 80082cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80082d0:	2100      	movs	r1, #0
 80082d2:	2201      	movs	r2, #1
 80082d4:	429a      	cmp	r2, r3
 80082d6:	db09      	blt.n	80082ec <__s2b+0x30>
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ff47 	bl	800816c <_Balloc>
 80082de:	b940      	cbnz	r0, 80082f2 <__s2b+0x36>
 80082e0:	4602      	mov	r2, r0
 80082e2:	4b19      	ldr	r3, [pc, #100]	@ (8008348 <__s2b+0x8c>)
 80082e4:	4819      	ldr	r0, [pc, #100]	@ (800834c <__s2b+0x90>)
 80082e6:	21d3      	movs	r1, #211	@ 0xd3
 80082e8:	f001 fc6a 	bl	8009bc0 <__assert_func>
 80082ec:	0052      	lsls	r2, r2, #1
 80082ee:	3101      	adds	r1, #1
 80082f0:	e7f0      	b.n	80082d4 <__s2b+0x18>
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	6143      	str	r3, [r0, #20]
 80082f6:	2d09      	cmp	r5, #9
 80082f8:	f04f 0301 	mov.w	r3, #1
 80082fc:	6103      	str	r3, [r0, #16]
 80082fe:	dd16      	ble.n	800832e <__s2b+0x72>
 8008300:	f104 0909 	add.w	r9, r4, #9
 8008304:	46c8      	mov	r8, r9
 8008306:	442c      	add	r4, r5
 8008308:	f818 3b01 	ldrb.w	r3, [r8], #1
 800830c:	4601      	mov	r1, r0
 800830e:	3b30      	subs	r3, #48	@ 0x30
 8008310:	220a      	movs	r2, #10
 8008312:	4630      	mov	r0, r6
 8008314:	f7ff ff8c 	bl	8008230 <__multadd>
 8008318:	45a0      	cmp	r8, r4
 800831a:	d1f5      	bne.n	8008308 <__s2b+0x4c>
 800831c:	f1a5 0408 	sub.w	r4, r5, #8
 8008320:	444c      	add	r4, r9
 8008322:	1b2d      	subs	r5, r5, r4
 8008324:	1963      	adds	r3, r4, r5
 8008326:	42bb      	cmp	r3, r7
 8008328:	db04      	blt.n	8008334 <__s2b+0x78>
 800832a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832e:	340a      	adds	r4, #10
 8008330:	2509      	movs	r5, #9
 8008332:	e7f6      	b.n	8008322 <__s2b+0x66>
 8008334:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008338:	4601      	mov	r1, r0
 800833a:	3b30      	subs	r3, #48	@ 0x30
 800833c:	220a      	movs	r2, #10
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff ff76 	bl	8008230 <__multadd>
 8008344:	e7ee      	b.n	8008324 <__s2b+0x68>
 8008346:	bf00      	nop
 8008348:	0800a9ad 	.word	0x0800a9ad
 800834c:	0800a9be 	.word	0x0800a9be

08008350 <__hi0bits>:
 8008350:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008354:	4603      	mov	r3, r0
 8008356:	bf36      	itet	cc
 8008358:	0403      	lslcc	r3, r0, #16
 800835a:	2000      	movcs	r0, #0
 800835c:	2010      	movcc	r0, #16
 800835e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008362:	bf3c      	itt	cc
 8008364:	021b      	lslcc	r3, r3, #8
 8008366:	3008      	addcc	r0, #8
 8008368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800836c:	bf3c      	itt	cc
 800836e:	011b      	lslcc	r3, r3, #4
 8008370:	3004      	addcc	r0, #4
 8008372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008376:	bf3c      	itt	cc
 8008378:	009b      	lslcc	r3, r3, #2
 800837a:	3002      	addcc	r0, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	db05      	blt.n	800838c <__hi0bits+0x3c>
 8008380:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008384:	f100 0001 	add.w	r0, r0, #1
 8008388:	bf08      	it	eq
 800838a:	2020      	moveq	r0, #32
 800838c:	4770      	bx	lr

0800838e <__lo0bits>:
 800838e:	6803      	ldr	r3, [r0, #0]
 8008390:	4602      	mov	r2, r0
 8008392:	f013 0007 	ands.w	r0, r3, #7
 8008396:	d00b      	beq.n	80083b0 <__lo0bits+0x22>
 8008398:	07d9      	lsls	r1, r3, #31
 800839a:	d421      	bmi.n	80083e0 <__lo0bits+0x52>
 800839c:	0798      	lsls	r0, r3, #30
 800839e:	bf49      	itett	mi
 80083a0:	085b      	lsrmi	r3, r3, #1
 80083a2:	089b      	lsrpl	r3, r3, #2
 80083a4:	2001      	movmi	r0, #1
 80083a6:	6013      	strmi	r3, [r2, #0]
 80083a8:	bf5c      	itt	pl
 80083aa:	6013      	strpl	r3, [r2, #0]
 80083ac:	2002      	movpl	r0, #2
 80083ae:	4770      	bx	lr
 80083b0:	b299      	uxth	r1, r3
 80083b2:	b909      	cbnz	r1, 80083b8 <__lo0bits+0x2a>
 80083b4:	0c1b      	lsrs	r3, r3, #16
 80083b6:	2010      	movs	r0, #16
 80083b8:	b2d9      	uxtb	r1, r3
 80083ba:	b909      	cbnz	r1, 80083c0 <__lo0bits+0x32>
 80083bc:	3008      	adds	r0, #8
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	0719      	lsls	r1, r3, #28
 80083c2:	bf04      	itt	eq
 80083c4:	091b      	lsreq	r3, r3, #4
 80083c6:	3004      	addeq	r0, #4
 80083c8:	0799      	lsls	r1, r3, #30
 80083ca:	bf04      	itt	eq
 80083cc:	089b      	lsreq	r3, r3, #2
 80083ce:	3002      	addeq	r0, #2
 80083d0:	07d9      	lsls	r1, r3, #31
 80083d2:	d403      	bmi.n	80083dc <__lo0bits+0x4e>
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	f100 0001 	add.w	r0, r0, #1
 80083da:	d003      	beq.n	80083e4 <__lo0bits+0x56>
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	4770      	bx	lr
 80083e0:	2000      	movs	r0, #0
 80083e2:	4770      	bx	lr
 80083e4:	2020      	movs	r0, #32
 80083e6:	4770      	bx	lr

080083e8 <__i2b>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	460c      	mov	r4, r1
 80083ec:	2101      	movs	r1, #1
 80083ee:	f7ff febd 	bl	800816c <_Balloc>
 80083f2:	4602      	mov	r2, r0
 80083f4:	b928      	cbnz	r0, 8008402 <__i2b+0x1a>
 80083f6:	4b05      	ldr	r3, [pc, #20]	@ (800840c <__i2b+0x24>)
 80083f8:	4805      	ldr	r0, [pc, #20]	@ (8008410 <__i2b+0x28>)
 80083fa:	f240 1145 	movw	r1, #325	@ 0x145
 80083fe:	f001 fbdf 	bl	8009bc0 <__assert_func>
 8008402:	2301      	movs	r3, #1
 8008404:	6144      	str	r4, [r0, #20]
 8008406:	6103      	str	r3, [r0, #16]
 8008408:	bd10      	pop	{r4, pc}
 800840a:	bf00      	nop
 800840c:	0800a9ad 	.word	0x0800a9ad
 8008410:	0800a9be 	.word	0x0800a9be

08008414 <__multiply>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	4614      	mov	r4, r2
 800841a:	690a      	ldr	r2, [r1, #16]
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	429a      	cmp	r2, r3
 8008420:	bfa8      	it	ge
 8008422:	4623      	movge	r3, r4
 8008424:	460f      	mov	r7, r1
 8008426:	bfa4      	itt	ge
 8008428:	460c      	movge	r4, r1
 800842a:	461f      	movge	r7, r3
 800842c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008430:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	6861      	ldr	r1, [r4, #4]
 8008438:	eb0a 0609 	add.w	r6, sl, r9
 800843c:	42b3      	cmp	r3, r6
 800843e:	b085      	sub	sp, #20
 8008440:	bfb8      	it	lt
 8008442:	3101      	addlt	r1, #1
 8008444:	f7ff fe92 	bl	800816c <_Balloc>
 8008448:	b930      	cbnz	r0, 8008458 <__multiply+0x44>
 800844a:	4602      	mov	r2, r0
 800844c:	4b44      	ldr	r3, [pc, #272]	@ (8008560 <__multiply+0x14c>)
 800844e:	4845      	ldr	r0, [pc, #276]	@ (8008564 <__multiply+0x150>)
 8008450:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008454:	f001 fbb4 	bl	8009bc0 <__assert_func>
 8008458:	f100 0514 	add.w	r5, r0, #20
 800845c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008460:	462b      	mov	r3, r5
 8008462:	2200      	movs	r2, #0
 8008464:	4543      	cmp	r3, r8
 8008466:	d321      	bcc.n	80084ac <__multiply+0x98>
 8008468:	f107 0114 	add.w	r1, r7, #20
 800846c:	f104 0214 	add.w	r2, r4, #20
 8008470:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008474:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	1b13      	subs	r3, r2, r4
 800847c:	3b15      	subs	r3, #21
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	3304      	adds	r3, #4
 8008484:	f104 0715 	add.w	r7, r4, #21
 8008488:	42ba      	cmp	r2, r7
 800848a:	bf38      	it	cc
 800848c:	2304      	movcc	r3, #4
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	9103      	str	r1, [sp, #12]
 8008494:	428b      	cmp	r3, r1
 8008496:	d80c      	bhi.n	80084b2 <__multiply+0x9e>
 8008498:	2e00      	cmp	r6, #0
 800849a:	dd03      	ble.n	80084a4 <__multiply+0x90>
 800849c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d05b      	beq.n	800855c <__multiply+0x148>
 80084a4:	6106      	str	r6, [r0, #16]
 80084a6:	b005      	add	sp, #20
 80084a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ac:	f843 2b04 	str.w	r2, [r3], #4
 80084b0:	e7d8      	b.n	8008464 <__multiply+0x50>
 80084b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80084b6:	f1ba 0f00 	cmp.w	sl, #0
 80084ba:	d024      	beq.n	8008506 <__multiply+0xf2>
 80084bc:	f104 0e14 	add.w	lr, r4, #20
 80084c0:	46a9      	mov	r9, r5
 80084c2:	f04f 0c00 	mov.w	ip, #0
 80084c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084ca:	f8d9 3000 	ldr.w	r3, [r9]
 80084ce:	fa1f fb87 	uxth.w	fp, r7
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80084d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80084dc:	f8d9 7000 	ldr.w	r7, [r9]
 80084e0:	4463      	add	r3, ip
 80084e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80084ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084f4:	4572      	cmp	r2, lr
 80084f6:	f849 3b04 	str.w	r3, [r9], #4
 80084fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084fe:	d8e2      	bhi.n	80084c6 <__multiply+0xb2>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	f845 c003 	str.w	ip, [r5, r3]
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800850c:	3104      	adds	r1, #4
 800850e:	f1b9 0f00 	cmp.w	r9, #0
 8008512:	d021      	beq.n	8008558 <__multiply+0x144>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	f104 0c14 	add.w	ip, r4, #20
 800851a:	46ae      	mov	lr, r5
 800851c:	f04f 0a00 	mov.w	sl, #0
 8008520:	f8bc b000 	ldrh.w	fp, [ip]
 8008524:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008528:	fb09 770b 	mla	r7, r9, fp, r7
 800852c:	4457      	add	r7, sl
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008534:	f84e 3b04 	str.w	r3, [lr], #4
 8008538:	f85c 3b04 	ldr.w	r3, [ip], #4
 800853c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008540:	f8be 3000 	ldrh.w	r3, [lr]
 8008544:	fb09 330a 	mla	r3, r9, sl, r3
 8008548:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800854c:	4562      	cmp	r2, ip
 800854e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008552:	d8e5      	bhi.n	8008520 <__multiply+0x10c>
 8008554:	9f01      	ldr	r7, [sp, #4]
 8008556:	51eb      	str	r3, [r5, r7]
 8008558:	3504      	adds	r5, #4
 800855a:	e799      	b.n	8008490 <__multiply+0x7c>
 800855c:	3e01      	subs	r6, #1
 800855e:	e79b      	b.n	8008498 <__multiply+0x84>
 8008560:	0800a9ad 	.word	0x0800a9ad
 8008564:	0800a9be 	.word	0x0800a9be

08008568 <__pow5mult>:
 8008568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800856c:	4615      	mov	r5, r2
 800856e:	f012 0203 	ands.w	r2, r2, #3
 8008572:	4607      	mov	r7, r0
 8008574:	460e      	mov	r6, r1
 8008576:	d007      	beq.n	8008588 <__pow5mult+0x20>
 8008578:	4c25      	ldr	r4, [pc, #148]	@ (8008610 <__pow5mult+0xa8>)
 800857a:	3a01      	subs	r2, #1
 800857c:	2300      	movs	r3, #0
 800857e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008582:	f7ff fe55 	bl	8008230 <__multadd>
 8008586:	4606      	mov	r6, r0
 8008588:	10ad      	asrs	r5, r5, #2
 800858a:	d03d      	beq.n	8008608 <__pow5mult+0xa0>
 800858c:	69fc      	ldr	r4, [r7, #28]
 800858e:	b97c      	cbnz	r4, 80085b0 <__pow5mult+0x48>
 8008590:	2010      	movs	r0, #16
 8008592:	f7ff fd35 	bl	8008000 <malloc>
 8008596:	4602      	mov	r2, r0
 8008598:	61f8      	str	r0, [r7, #28]
 800859a:	b928      	cbnz	r0, 80085a8 <__pow5mult+0x40>
 800859c:	4b1d      	ldr	r3, [pc, #116]	@ (8008614 <__pow5mult+0xac>)
 800859e:	481e      	ldr	r0, [pc, #120]	@ (8008618 <__pow5mult+0xb0>)
 80085a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80085a4:	f001 fb0c 	bl	8009bc0 <__assert_func>
 80085a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085ac:	6004      	str	r4, [r0, #0]
 80085ae:	60c4      	str	r4, [r0, #12]
 80085b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80085b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085b8:	b94c      	cbnz	r4, 80085ce <__pow5mult+0x66>
 80085ba:	f240 2171 	movw	r1, #625	@ 0x271
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff ff12 	bl	80083e8 <__i2b>
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ca:	4604      	mov	r4, r0
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	f04f 0900 	mov.w	r9, #0
 80085d2:	07eb      	lsls	r3, r5, #31
 80085d4:	d50a      	bpl.n	80085ec <__pow5mult+0x84>
 80085d6:	4631      	mov	r1, r6
 80085d8:	4622      	mov	r2, r4
 80085da:	4638      	mov	r0, r7
 80085dc:	f7ff ff1a 	bl	8008414 <__multiply>
 80085e0:	4631      	mov	r1, r6
 80085e2:	4680      	mov	r8, r0
 80085e4:	4638      	mov	r0, r7
 80085e6:	f7ff fe01 	bl	80081ec <_Bfree>
 80085ea:	4646      	mov	r6, r8
 80085ec:	106d      	asrs	r5, r5, #1
 80085ee:	d00b      	beq.n	8008608 <__pow5mult+0xa0>
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	b938      	cbnz	r0, 8008604 <__pow5mult+0x9c>
 80085f4:	4622      	mov	r2, r4
 80085f6:	4621      	mov	r1, r4
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ff0b 	bl	8008414 <__multiply>
 80085fe:	6020      	str	r0, [r4, #0]
 8008600:	f8c0 9000 	str.w	r9, [r0]
 8008604:	4604      	mov	r4, r0
 8008606:	e7e4      	b.n	80085d2 <__pow5mult+0x6a>
 8008608:	4630      	mov	r0, r6
 800860a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800860e:	bf00      	nop
 8008610:	0800aa18 	.word	0x0800aa18
 8008614:	0800a93e 	.word	0x0800a93e
 8008618:	0800a9be 	.word	0x0800a9be

0800861c <__lshift>:
 800861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	460c      	mov	r4, r1
 8008622:	6849      	ldr	r1, [r1, #4]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800862a:	68a3      	ldr	r3, [r4, #8]
 800862c:	4607      	mov	r7, r0
 800862e:	4691      	mov	r9, r2
 8008630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008634:	f108 0601 	add.w	r6, r8, #1
 8008638:	42b3      	cmp	r3, r6
 800863a:	db0b      	blt.n	8008654 <__lshift+0x38>
 800863c:	4638      	mov	r0, r7
 800863e:	f7ff fd95 	bl	800816c <_Balloc>
 8008642:	4605      	mov	r5, r0
 8008644:	b948      	cbnz	r0, 800865a <__lshift+0x3e>
 8008646:	4602      	mov	r2, r0
 8008648:	4b28      	ldr	r3, [pc, #160]	@ (80086ec <__lshift+0xd0>)
 800864a:	4829      	ldr	r0, [pc, #164]	@ (80086f0 <__lshift+0xd4>)
 800864c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008650:	f001 fab6 	bl	8009bc0 <__assert_func>
 8008654:	3101      	adds	r1, #1
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	e7ee      	b.n	8008638 <__lshift+0x1c>
 800865a:	2300      	movs	r3, #0
 800865c:	f100 0114 	add.w	r1, r0, #20
 8008660:	f100 0210 	add.w	r2, r0, #16
 8008664:	4618      	mov	r0, r3
 8008666:	4553      	cmp	r3, sl
 8008668:	db33      	blt.n	80086d2 <__lshift+0xb6>
 800866a:	6920      	ldr	r0, [r4, #16]
 800866c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008670:	f104 0314 	add.w	r3, r4, #20
 8008674:	f019 091f 	ands.w	r9, r9, #31
 8008678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800867c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008680:	d02b      	beq.n	80086da <__lshift+0xbe>
 8008682:	f1c9 0e20 	rsb	lr, r9, #32
 8008686:	468a      	mov	sl, r1
 8008688:	2200      	movs	r2, #0
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	fa00 f009 	lsl.w	r0, r0, r9
 8008690:	4310      	orrs	r0, r2
 8008692:	f84a 0b04 	str.w	r0, [sl], #4
 8008696:	f853 2b04 	ldr.w	r2, [r3], #4
 800869a:	459c      	cmp	ip, r3
 800869c:	fa22 f20e 	lsr.w	r2, r2, lr
 80086a0:	d8f3      	bhi.n	800868a <__lshift+0x6e>
 80086a2:	ebac 0304 	sub.w	r3, ip, r4
 80086a6:	3b15      	subs	r3, #21
 80086a8:	f023 0303 	bic.w	r3, r3, #3
 80086ac:	3304      	adds	r3, #4
 80086ae:	f104 0015 	add.w	r0, r4, #21
 80086b2:	4584      	cmp	ip, r0
 80086b4:	bf38      	it	cc
 80086b6:	2304      	movcc	r3, #4
 80086b8:	50ca      	str	r2, [r1, r3]
 80086ba:	b10a      	cbz	r2, 80086c0 <__lshift+0xa4>
 80086bc:	f108 0602 	add.w	r6, r8, #2
 80086c0:	3e01      	subs	r6, #1
 80086c2:	4638      	mov	r0, r7
 80086c4:	612e      	str	r6, [r5, #16]
 80086c6:	4621      	mov	r1, r4
 80086c8:	f7ff fd90 	bl	80081ec <_Bfree>
 80086cc:	4628      	mov	r0, r5
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086d6:	3301      	adds	r3, #1
 80086d8:	e7c5      	b.n	8008666 <__lshift+0x4a>
 80086da:	3904      	subs	r1, #4
 80086dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80086e4:	459c      	cmp	ip, r3
 80086e6:	d8f9      	bhi.n	80086dc <__lshift+0xc0>
 80086e8:	e7ea      	b.n	80086c0 <__lshift+0xa4>
 80086ea:	bf00      	nop
 80086ec:	0800a9ad 	.word	0x0800a9ad
 80086f0:	0800a9be 	.word	0x0800a9be

080086f4 <__mcmp>:
 80086f4:	690a      	ldr	r2, [r1, #16]
 80086f6:	4603      	mov	r3, r0
 80086f8:	6900      	ldr	r0, [r0, #16]
 80086fa:	1a80      	subs	r0, r0, r2
 80086fc:	b530      	push	{r4, r5, lr}
 80086fe:	d10e      	bne.n	800871e <__mcmp+0x2a>
 8008700:	3314      	adds	r3, #20
 8008702:	3114      	adds	r1, #20
 8008704:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008708:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800870c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008710:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008714:	4295      	cmp	r5, r2
 8008716:	d003      	beq.n	8008720 <__mcmp+0x2c>
 8008718:	d205      	bcs.n	8008726 <__mcmp+0x32>
 800871a:	f04f 30ff 	mov.w	r0, #4294967295
 800871e:	bd30      	pop	{r4, r5, pc}
 8008720:	42a3      	cmp	r3, r4
 8008722:	d3f3      	bcc.n	800870c <__mcmp+0x18>
 8008724:	e7fb      	b.n	800871e <__mcmp+0x2a>
 8008726:	2001      	movs	r0, #1
 8008728:	e7f9      	b.n	800871e <__mcmp+0x2a>
	...

0800872c <__mdiff>:
 800872c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008730:	4689      	mov	r9, r1
 8008732:	4606      	mov	r6, r0
 8008734:	4611      	mov	r1, r2
 8008736:	4648      	mov	r0, r9
 8008738:	4614      	mov	r4, r2
 800873a:	f7ff ffdb 	bl	80086f4 <__mcmp>
 800873e:	1e05      	subs	r5, r0, #0
 8008740:	d112      	bne.n	8008768 <__mdiff+0x3c>
 8008742:	4629      	mov	r1, r5
 8008744:	4630      	mov	r0, r6
 8008746:	f7ff fd11 	bl	800816c <_Balloc>
 800874a:	4602      	mov	r2, r0
 800874c:	b928      	cbnz	r0, 800875a <__mdiff+0x2e>
 800874e:	4b3f      	ldr	r3, [pc, #252]	@ (800884c <__mdiff+0x120>)
 8008750:	f240 2137 	movw	r1, #567	@ 0x237
 8008754:	483e      	ldr	r0, [pc, #248]	@ (8008850 <__mdiff+0x124>)
 8008756:	f001 fa33 	bl	8009bc0 <__assert_func>
 800875a:	2301      	movs	r3, #1
 800875c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008760:	4610      	mov	r0, r2
 8008762:	b003      	add	sp, #12
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	bfbc      	itt	lt
 800876a:	464b      	movlt	r3, r9
 800876c:	46a1      	movlt	r9, r4
 800876e:	4630      	mov	r0, r6
 8008770:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008774:	bfba      	itte	lt
 8008776:	461c      	movlt	r4, r3
 8008778:	2501      	movlt	r5, #1
 800877a:	2500      	movge	r5, #0
 800877c:	f7ff fcf6 	bl	800816c <_Balloc>
 8008780:	4602      	mov	r2, r0
 8008782:	b918      	cbnz	r0, 800878c <__mdiff+0x60>
 8008784:	4b31      	ldr	r3, [pc, #196]	@ (800884c <__mdiff+0x120>)
 8008786:	f240 2145 	movw	r1, #581	@ 0x245
 800878a:	e7e3      	b.n	8008754 <__mdiff+0x28>
 800878c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008790:	6926      	ldr	r6, [r4, #16]
 8008792:	60c5      	str	r5, [r0, #12]
 8008794:	f109 0310 	add.w	r3, r9, #16
 8008798:	f109 0514 	add.w	r5, r9, #20
 800879c:	f104 0e14 	add.w	lr, r4, #20
 80087a0:	f100 0b14 	add.w	fp, r0, #20
 80087a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80087a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	46d9      	mov	r9, fp
 80087b0:	f04f 0c00 	mov.w	ip, #0
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80087ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	fa1f f38a 	uxth.w	r3, sl
 80087c4:	4619      	mov	r1, r3
 80087c6:	b283      	uxth	r3, r0
 80087c8:	1acb      	subs	r3, r1, r3
 80087ca:	0c00      	lsrs	r0, r0, #16
 80087cc:	4463      	add	r3, ip
 80087ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087dc:	4576      	cmp	r6, lr
 80087de:	f849 3b04 	str.w	r3, [r9], #4
 80087e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087e6:	d8e5      	bhi.n	80087b4 <__mdiff+0x88>
 80087e8:	1b33      	subs	r3, r6, r4
 80087ea:	3b15      	subs	r3, #21
 80087ec:	f023 0303 	bic.w	r3, r3, #3
 80087f0:	3415      	adds	r4, #21
 80087f2:	3304      	adds	r3, #4
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	bf38      	it	cc
 80087f8:	2304      	movcc	r3, #4
 80087fa:	441d      	add	r5, r3
 80087fc:	445b      	add	r3, fp
 80087fe:	461e      	mov	r6, r3
 8008800:	462c      	mov	r4, r5
 8008802:	4544      	cmp	r4, r8
 8008804:	d30e      	bcc.n	8008824 <__mdiff+0xf8>
 8008806:	f108 0103 	add.w	r1, r8, #3
 800880a:	1b49      	subs	r1, r1, r5
 800880c:	f021 0103 	bic.w	r1, r1, #3
 8008810:	3d03      	subs	r5, #3
 8008812:	45a8      	cmp	r8, r5
 8008814:	bf38      	it	cc
 8008816:	2100      	movcc	r1, #0
 8008818:	440b      	add	r3, r1
 800881a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800881e:	b191      	cbz	r1, 8008846 <__mdiff+0x11a>
 8008820:	6117      	str	r7, [r2, #16]
 8008822:	e79d      	b.n	8008760 <__mdiff+0x34>
 8008824:	f854 1b04 	ldr.w	r1, [r4], #4
 8008828:	46e6      	mov	lr, ip
 800882a:	0c08      	lsrs	r0, r1, #16
 800882c:	fa1c fc81 	uxtah	ip, ip, r1
 8008830:	4471      	add	r1, lr
 8008832:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008836:	b289      	uxth	r1, r1
 8008838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800883c:	f846 1b04 	str.w	r1, [r6], #4
 8008840:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008844:	e7dd      	b.n	8008802 <__mdiff+0xd6>
 8008846:	3f01      	subs	r7, #1
 8008848:	e7e7      	b.n	800881a <__mdiff+0xee>
 800884a:	bf00      	nop
 800884c:	0800a9ad 	.word	0x0800a9ad
 8008850:	0800a9be 	.word	0x0800a9be

08008854 <__ulp>:
 8008854:	b082      	sub	sp, #8
 8008856:	ed8d 0b00 	vstr	d0, [sp]
 800885a:	9a01      	ldr	r2, [sp, #4]
 800885c:	4b0f      	ldr	r3, [pc, #60]	@ (800889c <__ulp+0x48>)
 800885e:	4013      	ands	r3, r2
 8008860:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008864:	2b00      	cmp	r3, #0
 8008866:	dc08      	bgt.n	800887a <__ulp+0x26>
 8008868:	425b      	negs	r3, r3
 800886a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800886e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008872:	da04      	bge.n	800887e <__ulp+0x2a>
 8008874:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008878:	4113      	asrs	r3, r2
 800887a:	2200      	movs	r2, #0
 800887c:	e008      	b.n	8008890 <__ulp+0x3c>
 800887e:	f1a2 0314 	sub.w	r3, r2, #20
 8008882:	2b1e      	cmp	r3, #30
 8008884:	bfda      	itte	le
 8008886:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800888a:	40da      	lsrle	r2, r3
 800888c:	2201      	movgt	r2, #1
 800888e:	2300      	movs	r3, #0
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	ec41 0b10 	vmov	d0, r0, r1
 8008898:	b002      	add	sp, #8
 800889a:	4770      	bx	lr
 800889c:	7ff00000 	.word	0x7ff00000

080088a0 <__b2d>:
 80088a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a4:	6906      	ldr	r6, [r0, #16]
 80088a6:	f100 0814 	add.w	r8, r0, #20
 80088aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80088ae:	1f37      	subs	r7, r6, #4
 80088b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7ff fd4b 	bl	8008350 <__hi0bits>
 80088ba:	f1c0 0320 	rsb	r3, r0, #32
 80088be:	280a      	cmp	r0, #10
 80088c0:	600b      	str	r3, [r1, #0]
 80088c2:	491b      	ldr	r1, [pc, #108]	@ (8008930 <__b2d+0x90>)
 80088c4:	dc15      	bgt.n	80088f2 <__b2d+0x52>
 80088c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80088ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80088ce:	45b8      	cmp	r8, r7
 80088d0:	ea43 0501 	orr.w	r5, r3, r1
 80088d4:	bf34      	ite	cc
 80088d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088da:	2300      	movcs	r3, #0
 80088dc:	3015      	adds	r0, #21
 80088de:	fa02 f000 	lsl.w	r0, r2, r0
 80088e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80088e6:	4303      	orrs	r3, r0
 80088e8:	461c      	mov	r4, r3
 80088ea:	ec45 4b10 	vmov	d0, r4, r5
 80088ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f2:	45b8      	cmp	r8, r7
 80088f4:	bf3a      	itte	cc
 80088f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80088fe:	2300      	movcs	r3, #0
 8008900:	380b      	subs	r0, #11
 8008902:	d012      	beq.n	800892a <__b2d+0x8a>
 8008904:	f1c0 0120 	rsb	r1, r0, #32
 8008908:	fa23 f401 	lsr.w	r4, r3, r1
 800890c:	4082      	lsls	r2, r0
 800890e:	4322      	orrs	r2, r4
 8008910:	4547      	cmp	r7, r8
 8008912:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008916:	bf8c      	ite	hi
 8008918:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800891c:	2200      	movls	r2, #0
 800891e:	4083      	lsls	r3, r0
 8008920:	40ca      	lsrs	r2, r1
 8008922:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008926:	4313      	orrs	r3, r2
 8008928:	e7de      	b.n	80088e8 <__b2d+0x48>
 800892a:	ea42 0501 	orr.w	r5, r2, r1
 800892e:	e7db      	b.n	80088e8 <__b2d+0x48>
 8008930:	3ff00000 	.word	0x3ff00000

08008934 <__d2b>:
 8008934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008938:	460f      	mov	r7, r1
 800893a:	2101      	movs	r1, #1
 800893c:	ec59 8b10 	vmov	r8, r9, d0
 8008940:	4616      	mov	r6, r2
 8008942:	f7ff fc13 	bl	800816c <_Balloc>
 8008946:	4604      	mov	r4, r0
 8008948:	b930      	cbnz	r0, 8008958 <__d2b+0x24>
 800894a:	4602      	mov	r2, r0
 800894c:	4b23      	ldr	r3, [pc, #140]	@ (80089dc <__d2b+0xa8>)
 800894e:	4824      	ldr	r0, [pc, #144]	@ (80089e0 <__d2b+0xac>)
 8008950:	f240 310f 	movw	r1, #783	@ 0x30f
 8008954:	f001 f934 	bl	8009bc0 <__assert_func>
 8008958:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800895c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008960:	b10d      	cbz	r5, 8008966 <__d2b+0x32>
 8008962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	f1b8 0300 	subs.w	r3, r8, #0
 800896c:	d023      	beq.n	80089b6 <__d2b+0x82>
 800896e:	4668      	mov	r0, sp
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	f7ff fd0c 	bl	800838e <__lo0bits>
 8008976:	e9dd 1200 	ldrd	r1, r2, [sp]
 800897a:	b1d0      	cbz	r0, 80089b2 <__d2b+0x7e>
 800897c:	f1c0 0320 	rsb	r3, r0, #32
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	430b      	orrs	r3, r1
 8008986:	40c2      	lsrs	r2, r0
 8008988:	6163      	str	r3, [r4, #20]
 800898a:	9201      	str	r2, [sp, #4]
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	61a3      	str	r3, [r4, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	bf0c      	ite	eq
 8008994:	2201      	moveq	r2, #1
 8008996:	2202      	movne	r2, #2
 8008998:	6122      	str	r2, [r4, #16]
 800899a:	b1a5      	cbz	r5, 80089c6 <__d2b+0x92>
 800899c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089a0:	4405      	add	r5, r0
 80089a2:	603d      	str	r5, [r7, #0]
 80089a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089a8:	6030      	str	r0, [r6, #0]
 80089aa:	4620      	mov	r0, r4
 80089ac:	b003      	add	sp, #12
 80089ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089b2:	6161      	str	r1, [r4, #20]
 80089b4:	e7ea      	b.n	800898c <__d2b+0x58>
 80089b6:	a801      	add	r0, sp, #4
 80089b8:	f7ff fce9 	bl	800838e <__lo0bits>
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	6163      	str	r3, [r4, #20]
 80089c0:	3020      	adds	r0, #32
 80089c2:	2201      	movs	r2, #1
 80089c4:	e7e8      	b.n	8008998 <__d2b+0x64>
 80089c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089ce:	6038      	str	r0, [r7, #0]
 80089d0:	6918      	ldr	r0, [r3, #16]
 80089d2:	f7ff fcbd 	bl	8008350 <__hi0bits>
 80089d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089da:	e7e5      	b.n	80089a8 <__d2b+0x74>
 80089dc:	0800a9ad 	.word	0x0800a9ad
 80089e0:	0800a9be 	.word	0x0800a9be

080089e4 <__ratio>:
 80089e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	4688      	mov	r8, r1
 80089ea:	4669      	mov	r1, sp
 80089ec:	4681      	mov	r9, r0
 80089ee:	f7ff ff57 	bl	80088a0 <__b2d>
 80089f2:	a901      	add	r1, sp, #4
 80089f4:	4640      	mov	r0, r8
 80089f6:	ec55 4b10 	vmov	r4, r5, d0
 80089fa:	f7ff ff51 	bl	80088a0 <__b2d>
 80089fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008a02:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008a0c:	1a5b      	subs	r3, r3, r1
 8008a0e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008a12:	ec57 6b10 	vmov	r6, r7, d0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfd6      	itet	le
 8008a1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a1e:	462a      	movgt	r2, r5
 8008a20:	463a      	movle	r2, r7
 8008a22:	46ab      	mov	fp, r5
 8008a24:	46a2      	mov	sl, r4
 8008a26:	bfce      	itee	gt
 8008a28:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008a2c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8008a30:	ee00 3a90 	vmovle	s1, r3
 8008a34:	ec4b ab17 	vmov	d7, sl, fp
 8008a38:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8008a3c:	b003      	add	sp, #12
 8008a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a42 <__copybits>:
 8008a42:	3901      	subs	r1, #1
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	1149      	asrs	r1, r1, #5
 8008a48:	6914      	ldr	r4, [r2, #16]
 8008a4a:	3101      	adds	r1, #1
 8008a4c:	f102 0314 	add.w	r3, r2, #20
 8008a50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a58:	1f05      	subs	r5, r0, #4
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	d30c      	bcc.n	8008a78 <__copybits+0x36>
 8008a5e:	1aa3      	subs	r3, r4, r2
 8008a60:	3b11      	subs	r3, #17
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	3211      	adds	r2, #17
 8008a68:	42a2      	cmp	r2, r4
 8008a6a:	bf88      	it	hi
 8008a6c:	2300      	movhi	r3, #0
 8008a6e:	4418      	add	r0, r3
 8008a70:	2300      	movs	r3, #0
 8008a72:	4288      	cmp	r0, r1
 8008a74:	d305      	bcc.n	8008a82 <__copybits+0x40>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a7c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a80:	e7eb      	b.n	8008a5a <__copybits+0x18>
 8008a82:	f840 3b04 	str.w	r3, [r0], #4
 8008a86:	e7f4      	b.n	8008a72 <__copybits+0x30>

08008a88 <__any_on>:
 8008a88:	f100 0214 	add.w	r2, r0, #20
 8008a8c:	6900      	ldr	r0, [r0, #16]
 8008a8e:	114b      	asrs	r3, r1, #5
 8008a90:	4298      	cmp	r0, r3
 8008a92:	b510      	push	{r4, lr}
 8008a94:	db11      	blt.n	8008aba <__any_on+0x32>
 8008a96:	dd0a      	ble.n	8008aae <__any_on+0x26>
 8008a98:	f011 011f 	ands.w	r1, r1, #31
 8008a9c:	d007      	beq.n	8008aae <__any_on+0x26>
 8008a9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008aa2:	fa24 f001 	lsr.w	r0, r4, r1
 8008aa6:	fa00 f101 	lsl.w	r1, r0, r1
 8008aaa:	428c      	cmp	r4, r1
 8008aac:	d10b      	bne.n	8008ac6 <__any_on+0x3e>
 8008aae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d803      	bhi.n	8008abe <__any_on+0x36>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	4603      	mov	r3, r0
 8008abc:	e7f7      	b.n	8008aae <__any_on+0x26>
 8008abe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ac2:	2900      	cmp	r1, #0
 8008ac4:	d0f5      	beq.n	8008ab2 <__any_on+0x2a>
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	e7f6      	b.n	8008ab8 <__any_on+0x30>

08008aca <sulp>:
 8008aca:	b570      	push	{r4, r5, r6, lr}
 8008acc:	4604      	mov	r4, r0
 8008ace:	460d      	mov	r5, r1
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	ec45 4b10 	vmov	d0, r4, r5
 8008ad6:	f7ff febd 	bl	8008854 <__ulp>
 8008ada:	b17e      	cbz	r6, 8008afc <sulp+0x32>
 8008adc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ae0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd09      	ble.n	8008afc <sulp+0x32>
 8008ae8:	051b      	lsls	r3, r3, #20
 8008aea:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8008aee:	2000      	movs	r0, #0
 8008af0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008af4:	ec41 0b17 	vmov	d7, r0, r1
 8008af8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b00 <_strtod_l>:
 8008b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	ed2d 8b0a 	vpush	{d8-d12}
 8008b08:	b097      	sub	sp, #92	@ 0x5c
 8008b0a:	4688      	mov	r8, r1
 8008b0c:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b0e:	2200      	movs	r2, #0
 8008b10:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b12:	9005      	str	r0, [sp, #20]
 8008b14:	f04f 0a00 	mov.w	sl, #0
 8008b18:	f04f 0b00 	mov.w	fp, #0
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008b20:	7811      	ldrb	r1, [r2, #0]
 8008b22:	292b      	cmp	r1, #43	@ 0x2b
 8008b24:	d04c      	beq.n	8008bc0 <_strtod_l+0xc0>
 8008b26:	d839      	bhi.n	8008b9c <_strtod_l+0x9c>
 8008b28:	290d      	cmp	r1, #13
 8008b2a:	d833      	bhi.n	8008b94 <_strtod_l+0x94>
 8008b2c:	2908      	cmp	r1, #8
 8008b2e:	d833      	bhi.n	8008b98 <_strtod_l+0x98>
 8008b30:	2900      	cmp	r1, #0
 8008b32:	d03c      	beq.n	8008bae <_strtod_l+0xae>
 8008b34:	2200      	movs	r2, #0
 8008b36:	9208      	str	r2, [sp, #32]
 8008b38:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008b3a:	782a      	ldrb	r2, [r5, #0]
 8008b3c:	2a30      	cmp	r2, #48	@ 0x30
 8008b3e:	f040 80b5 	bne.w	8008cac <_strtod_l+0x1ac>
 8008b42:	786a      	ldrb	r2, [r5, #1]
 8008b44:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b48:	2a58      	cmp	r2, #88	@ 0x58
 8008b4a:	d170      	bne.n	8008c2e <_strtod_l+0x12e>
 8008b4c:	9302      	str	r3, [sp, #8]
 8008b4e:	9b08      	ldr	r3, [sp, #32]
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	ab12      	add	r3, sp, #72	@ 0x48
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	4a8b      	ldr	r2, [pc, #556]	@ (8008d84 <_strtod_l+0x284>)
 8008b58:	9805      	ldr	r0, [sp, #20]
 8008b5a:	ab13      	add	r3, sp, #76	@ 0x4c
 8008b5c:	a911      	add	r1, sp, #68	@ 0x44
 8008b5e:	f001 f8c9 	bl	8009cf4 <__gethex>
 8008b62:	f010 060f 	ands.w	r6, r0, #15
 8008b66:	4604      	mov	r4, r0
 8008b68:	d005      	beq.n	8008b76 <_strtod_l+0x76>
 8008b6a:	2e06      	cmp	r6, #6
 8008b6c:	d12a      	bne.n	8008bc4 <_strtod_l+0xc4>
 8008b6e:	3501      	adds	r5, #1
 8008b70:	2300      	movs	r3, #0
 8008b72:	9511      	str	r5, [sp, #68]	@ 0x44
 8008b74:	9308      	str	r3, [sp, #32]
 8008b76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f040 852f 	bne.w	80095dc <_strtod_l+0xadc>
 8008b7e:	9b08      	ldr	r3, [sp, #32]
 8008b80:	ec4b ab10 	vmov	d0, sl, fp
 8008b84:	b1cb      	cbz	r3, 8008bba <_strtod_l+0xba>
 8008b86:	eeb1 0b40 	vneg.f64	d0, d0
 8008b8a:	b017      	add	sp, #92	@ 0x5c
 8008b8c:	ecbd 8b0a 	vpop	{d8-d12}
 8008b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b94:	2920      	cmp	r1, #32
 8008b96:	d1cd      	bne.n	8008b34 <_strtod_l+0x34>
 8008b98:	3201      	adds	r2, #1
 8008b9a:	e7c0      	b.n	8008b1e <_strtod_l+0x1e>
 8008b9c:	292d      	cmp	r1, #45	@ 0x2d
 8008b9e:	d1c9      	bne.n	8008b34 <_strtod_l+0x34>
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	9108      	str	r1, [sp, #32]
 8008ba4:	1c51      	adds	r1, r2, #1
 8008ba6:	9111      	str	r1, [sp, #68]	@ 0x44
 8008ba8:	7852      	ldrb	r2, [r2, #1]
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	d1c4      	bne.n	8008b38 <_strtod_l+0x38>
 8008bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bb0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f040 850f 	bne.w	80095d8 <_strtod_l+0xad8>
 8008bba:	ec4b ab10 	vmov	d0, sl, fp
 8008bbe:	e7e4      	b.n	8008b8a <_strtod_l+0x8a>
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	e7ee      	b.n	8008ba2 <_strtod_l+0xa2>
 8008bc4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008bc6:	b13a      	cbz	r2, 8008bd8 <_strtod_l+0xd8>
 8008bc8:	2135      	movs	r1, #53	@ 0x35
 8008bca:	a814      	add	r0, sp, #80	@ 0x50
 8008bcc:	f7ff ff39 	bl	8008a42 <__copybits>
 8008bd0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008bd2:	9805      	ldr	r0, [sp, #20]
 8008bd4:	f7ff fb0a 	bl	80081ec <_Bfree>
 8008bd8:	1e73      	subs	r3, r6, #1
 8008bda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d806      	bhi.n	8008bee <_strtod_l+0xee>
 8008be0:	e8df f003 	tbb	[pc, r3]
 8008be4:	201d0314 	.word	0x201d0314
 8008be8:	14          	.byte	0x14
 8008be9:	00          	.byte	0x00
 8008bea:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8008bee:	05e3      	lsls	r3, r4, #23
 8008bf0:	bf48      	it	mi
 8008bf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008bf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bfa:	0d1b      	lsrs	r3, r3, #20
 8008bfc:	051b      	lsls	r3, r3, #20
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1b9      	bne.n	8008b76 <_strtod_l+0x76>
 8008c02:	f7fe fb91 	bl	8007328 <__errno>
 8008c06:	2322      	movs	r3, #34	@ 0x22
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	e7b4      	b.n	8008b76 <_strtod_l+0x76>
 8008c0c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8008c10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008c14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008c18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c1c:	e7e7      	b.n	8008bee <_strtod_l+0xee>
 8008c1e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8008d8c <_strtod_l+0x28c>
 8008c22:	e7e4      	b.n	8008bee <_strtod_l+0xee>
 8008c24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008c28:	f04f 3aff 	mov.w	sl, #4294967295
 8008c2c:	e7df      	b.n	8008bee <_strtod_l+0xee>
 8008c2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	9211      	str	r2, [sp, #68]	@ 0x44
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b30      	cmp	r3, #48	@ 0x30
 8008c38:	d0f9      	beq.n	8008c2e <_strtod_l+0x12e>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d09b      	beq.n	8008b76 <_strtod_l+0x76>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	2600      	movs	r6, #0
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c48:	46b1      	mov	r9, r6
 8008c4a:	4635      	mov	r5, r6
 8008c4c:	220a      	movs	r2, #10
 8008c4e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008c50:	7804      	ldrb	r4, [r0, #0]
 8008c52:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8008c56:	b2d9      	uxtb	r1, r3
 8008c58:	2909      	cmp	r1, #9
 8008c5a:	d929      	bls.n	8008cb0 <_strtod_l+0x1b0>
 8008c5c:	494a      	ldr	r1, [pc, #296]	@ (8008d88 <_strtod_l+0x288>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f000 ff84 	bl	8009b6c <strncmp>
 8008c64:	b378      	cbz	r0, 8008cc6 <_strtod_l+0x1c6>
 8008c66:	2000      	movs	r0, #0
 8008c68:	4622      	mov	r2, r4
 8008c6a:	462b      	mov	r3, r5
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	9006      	str	r0, [sp, #24]
 8008c70:	2a65      	cmp	r2, #101	@ 0x65
 8008c72:	d001      	beq.n	8008c78 <_strtod_l+0x178>
 8008c74:	2a45      	cmp	r2, #69	@ 0x45
 8008c76:	d117      	bne.n	8008ca8 <_strtod_l+0x1a8>
 8008c78:	b91b      	cbnz	r3, 8008c82 <_strtod_l+0x182>
 8008c7a:	9b07      	ldr	r3, [sp, #28]
 8008c7c:	4303      	orrs	r3, r0
 8008c7e:	d096      	beq.n	8008bae <_strtod_l+0xae>
 8008c80:	2300      	movs	r3, #0
 8008c82:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008c86:	f108 0201 	add.w	r2, r8, #1
 8008c8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8008c8c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008c90:	2a2b      	cmp	r2, #43	@ 0x2b
 8008c92:	d06b      	beq.n	8008d6c <_strtod_l+0x26c>
 8008c94:	2a2d      	cmp	r2, #45	@ 0x2d
 8008c96:	d071      	beq.n	8008d7c <_strtod_l+0x27c>
 8008c98:	f04f 0e00 	mov.w	lr, #0
 8008c9c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008ca0:	2c09      	cmp	r4, #9
 8008ca2:	d979      	bls.n	8008d98 <_strtod_l+0x298>
 8008ca4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008ca8:	2400      	movs	r4, #0
 8008caa:	e094      	b.n	8008dd6 <_strtod_l+0x2d6>
 8008cac:	2300      	movs	r3, #0
 8008cae:	e7c7      	b.n	8008c40 <_strtod_l+0x140>
 8008cb0:	2d08      	cmp	r5, #8
 8008cb2:	f100 0001 	add.w	r0, r0, #1
 8008cb6:	bfd4      	ite	le
 8008cb8:	fb02 3909 	mlale	r9, r2, r9, r3
 8008cbc:	fb02 3606 	mlagt	r6, r2, r6, r3
 8008cc0:	3501      	adds	r5, #1
 8008cc2:	9011      	str	r0, [sp, #68]	@ 0x44
 8008cc4:	e7c3      	b.n	8008c4e <_strtod_l+0x14e>
 8008cc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	9211      	str	r2, [sp, #68]	@ 0x44
 8008ccc:	785a      	ldrb	r2, [r3, #1]
 8008cce:	b375      	cbz	r5, 8008d2e <_strtod_l+0x22e>
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	462b      	mov	r3, r5
 8008cd4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008cd8:	2909      	cmp	r1, #9
 8008cda:	d913      	bls.n	8008d04 <_strtod_l+0x204>
 8008cdc:	2101      	movs	r1, #1
 8008cde:	9106      	str	r1, [sp, #24]
 8008ce0:	e7c6      	b.n	8008c70 <_strtod_l+0x170>
 8008ce2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	9211      	str	r2, [sp, #68]	@ 0x44
 8008ce8:	785a      	ldrb	r2, [r3, #1]
 8008cea:	3001      	adds	r0, #1
 8008cec:	2a30      	cmp	r2, #48	@ 0x30
 8008cee:	d0f8      	beq.n	8008ce2 <_strtod_l+0x1e2>
 8008cf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	f200 8476 	bhi.w	80095e6 <_strtod_l+0xae6>
 8008cfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008cfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cfe:	4607      	mov	r7, r0
 8008d00:	2000      	movs	r0, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	3a30      	subs	r2, #48	@ 0x30
 8008d06:	f100 0101 	add.w	r1, r0, #1
 8008d0a:	d023      	beq.n	8008d54 <_strtod_l+0x254>
 8008d0c:	440f      	add	r7, r1
 8008d0e:	eb00 0c03 	add.w	ip, r0, r3
 8008d12:	4619      	mov	r1, r3
 8008d14:	240a      	movs	r4, #10
 8008d16:	4561      	cmp	r1, ip
 8008d18:	d10b      	bne.n	8008d32 <_strtod_l+0x232>
 8008d1a:	1c5c      	adds	r4, r3, #1
 8008d1c:	4403      	add	r3, r0
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	4404      	add	r4, r0
 8008d22:	dc11      	bgt.n	8008d48 <_strtod_l+0x248>
 8008d24:	230a      	movs	r3, #10
 8008d26:	fb03 2909 	mla	r9, r3, r9, r2
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	e013      	b.n	8008d56 <_strtod_l+0x256>
 8008d2e:	4628      	mov	r0, r5
 8008d30:	e7dc      	b.n	8008cec <_strtod_l+0x1ec>
 8008d32:	2908      	cmp	r1, #8
 8008d34:	f101 0101 	add.w	r1, r1, #1
 8008d38:	dc02      	bgt.n	8008d40 <_strtod_l+0x240>
 8008d3a:	fb04 f909 	mul.w	r9, r4, r9
 8008d3e:	e7ea      	b.n	8008d16 <_strtod_l+0x216>
 8008d40:	2910      	cmp	r1, #16
 8008d42:	bfd8      	it	le
 8008d44:	4366      	mulle	r6, r4
 8008d46:	e7e6      	b.n	8008d16 <_strtod_l+0x216>
 8008d48:	2b0f      	cmp	r3, #15
 8008d4a:	dcee      	bgt.n	8008d2a <_strtod_l+0x22a>
 8008d4c:	230a      	movs	r3, #10
 8008d4e:	fb03 2606 	mla	r6, r3, r6, r2
 8008d52:	e7ea      	b.n	8008d2a <_strtod_l+0x22a>
 8008d54:	461c      	mov	r4, r3
 8008d56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d5c:	785a      	ldrb	r2, [r3, #1]
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4623      	mov	r3, r4
 8008d62:	e7b7      	b.n	8008cd4 <_strtod_l+0x1d4>
 8008d64:	2301      	movs	r3, #1
 8008d66:	2700      	movs	r7, #0
 8008d68:	9306      	str	r3, [sp, #24]
 8008d6a:	e786      	b.n	8008c7a <_strtod_l+0x17a>
 8008d6c:	f04f 0e00 	mov.w	lr, #0
 8008d70:	f108 0202 	add.w	r2, r8, #2
 8008d74:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d76:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008d7a:	e78f      	b.n	8008c9c <_strtod_l+0x19c>
 8008d7c:	f04f 0e01 	mov.w	lr, #1
 8008d80:	e7f6      	b.n	8008d70 <_strtod_l+0x270>
 8008d82:	bf00      	nop
 8008d84:	0800ab30 	.word	0x0800ab30
 8008d88:	0800ab18 	.word	0x0800ab18
 8008d8c:	7ff00000 	.word	0x7ff00000
 8008d90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d92:	1c54      	adds	r4, r2, #1
 8008d94:	9411      	str	r4, [sp, #68]	@ 0x44
 8008d96:	7852      	ldrb	r2, [r2, #1]
 8008d98:	2a30      	cmp	r2, #48	@ 0x30
 8008d9a:	d0f9      	beq.n	8008d90 <_strtod_l+0x290>
 8008d9c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8008da0:	2c08      	cmp	r4, #8
 8008da2:	d881      	bhi.n	8008ca8 <_strtod_l+0x1a8>
 8008da4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8008da8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008dae:	1c51      	adds	r1, r2, #1
 8008db0:	9111      	str	r1, [sp, #68]	@ 0x44
 8008db2:	7852      	ldrb	r2, [r2, #1]
 8008db4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008db8:	2c09      	cmp	r4, #9
 8008dba:	d938      	bls.n	8008e2e <_strtod_l+0x32e>
 8008dbc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008dbe:	1b0c      	subs	r4, r1, r4
 8008dc0:	2c08      	cmp	r4, #8
 8008dc2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8008dc6:	dc02      	bgt.n	8008dce <_strtod_l+0x2ce>
 8008dc8:	4564      	cmp	r4, ip
 8008dca:	bfa8      	it	ge
 8008dcc:	4664      	movge	r4, ip
 8008dce:	f1be 0f00 	cmp.w	lr, #0
 8008dd2:	d000      	beq.n	8008dd6 <_strtod_l+0x2d6>
 8008dd4:	4264      	negs	r4, r4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d14e      	bne.n	8008e78 <_strtod_l+0x378>
 8008dda:	9b07      	ldr	r3, [sp, #28]
 8008ddc:	4318      	orrs	r0, r3
 8008dde:	f47f aeca 	bne.w	8008b76 <_strtod_l+0x76>
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f47f aee2 	bne.w	8008bae <_strtod_l+0xae>
 8008dea:	2a69      	cmp	r2, #105	@ 0x69
 8008dec:	d027      	beq.n	8008e3e <_strtod_l+0x33e>
 8008dee:	dc24      	bgt.n	8008e3a <_strtod_l+0x33a>
 8008df0:	2a49      	cmp	r2, #73	@ 0x49
 8008df2:	d024      	beq.n	8008e3e <_strtod_l+0x33e>
 8008df4:	2a4e      	cmp	r2, #78	@ 0x4e
 8008df6:	f47f aeda 	bne.w	8008bae <_strtod_l+0xae>
 8008dfa:	4997      	ldr	r1, [pc, #604]	@ (8009058 <_strtod_l+0x558>)
 8008dfc:	a811      	add	r0, sp, #68	@ 0x44
 8008dfe:	f001 f99b 	bl	800a138 <__match>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f43f aed3 	beq.w	8008bae <_strtod_l+0xae>
 8008e08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b28      	cmp	r3, #40	@ 0x28
 8008e0e:	d12d      	bne.n	8008e6c <_strtod_l+0x36c>
 8008e10:	4992      	ldr	r1, [pc, #584]	@ (800905c <_strtod_l+0x55c>)
 8008e12:	aa14      	add	r2, sp, #80	@ 0x50
 8008e14:	a811      	add	r0, sp, #68	@ 0x44
 8008e16:	f001 f9a3 	bl	800a160 <__hexnan>
 8008e1a:	2805      	cmp	r0, #5
 8008e1c:	d126      	bne.n	8008e6c <_strtod_l+0x36c>
 8008e1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e20:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8008e24:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008e28:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008e2c:	e6a3      	b.n	8008b76 <_strtod_l+0x76>
 8008e2e:	240a      	movs	r4, #10
 8008e30:	fb04 2c0c 	mla	ip, r4, ip, r2
 8008e34:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8008e38:	e7b8      	b.n	8008dac <_strtod_l+0x2ac>
 8008e3a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e3c:	e7db      	b.n	8008df6 <_strtod_l+0x2f6>
 8008e3e:	4988      	ldr	r1, [pc, #544]	@ (8009060 <_strtod_l+0x560>)
 8008e40:	a811      	add	r0, sp, #68	@ 0x44
 8008e42:	f001 f979 	bl	800a138 <__match>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f43f aeb1 	beq.w	8008bae <_strtod_l+0xae>
 8008e4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e4e:	4985      	ldr	r1, [pc, #532]	@ (8009064 <_strtod_l+0x564>)
 8008e50:	3b01      	subs	r3, #1
 8008e52:	a811      	add	r0, sp, #68	@ 0x44
 8008e54:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e56:	f001 f96f 	bl	800a138 <__match>
 8008e5a:	b910      	cbnz	r0, 8008e62 <_strtod_l+0x362>
 8008e5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e5e:	3301      	adds	r3, #1
 8008e60:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e62:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009078 <_strtod_l+0x578>
 8008e66:	f04f 0a00 	mov.w	sl, #0
 8008e6a:	e684      	b.n	8008b76 <_strtod_l+0x76>
 8008e6c:	487e      	ldr	r0, [pc, #504]	@ (8009068 <_strtod_l+0x568>)
 8008e6e:	f000 fe9f 	bl	8009bb0 <nan>
 8008e72:	ec5b ab10 	vmov	sl, fp, d0
 8008e76:	e67e      	b.n	8008b76 <_strtod_l+0x76>
 8008e78:	ee07 9a90 	vmov	s15, r9
 8008e7c:	1be2      	subs	r2, r4, r7
 8008e7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	bf08      	it	eq
 8008e86:	461d      	moveq	r5, r3
 8008e88:	2b10      	cmp	r3, #16
 8008e8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	bfa8      	it	ge
 8008e90:	2210      	movge	r2, #16
 8008e92:	2b09      	cmp	r3, #9
 8008e94:	ec5b ab17 	vmov	sl, fp, d7
 8008e98:	dc15      	bgt.n	8008ec6 <_strtod_l+0x3c6>
 8008e9a:	1be1      	subs	r1, r4, r7
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	f43f ae6a 	beq.w	8008b76 <_strtod_l+0x76>
 8008ea2:	eba4 0107 	sub.w	r1, r4, r7
 8008ea6:	dd72      	ble.n	8008f8e <_strtod_l+0x48e>
 8008ea8:	2916      	cmp	r1, #22
 8008eaa:	dc59      	bgt.n	8008f60 <_strtod_l+0x460>
 8008eac:	4b6f      	ldr	r3, [pc, #444]	@ (800906c <_strtod_l+0x56c>)
 8008eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb4:	ed93 7b00 	vldr	d7, [r3]
 8008eb8:	ec4b ab16 	vmov	d6, sl, fp
 8008ebc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ec0:	ec5b ab17 	vmov	sl, fp, d7
 8008ec4:	e657      	b.n	8008b76 <_strtod_l+0x76>
 8008ec6:	4969      	ldr	r1, [pc, #420]	@ (800906c <_strtod_l+0x56c>)
 8008ec8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008ecc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8008ed0:	ee06 6a90 	vmov	s13, r6
 8008ed4:	2b0f      	cmp	r3, #15
 8008ed6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008eda:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008ede:	ec5b ab16 	vmov	sl, fp, d6
 8008ee2:	ddda      	ble.n	8008e9a <_strtod_l+0x39a>
 8008ee4:	1a9a      	subs	r2, r3, r2
 8008ee6:	1be1      	subs	r1, r4, r7
 8008ee8:	440a      	add	r2, r1
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	f340 8094 	ble.w	8009018 <_strtod_l+0x518>
 8008ef0:	f012 000f 	ands.w	r0, r2, #15
 8008ef4:	d00a      	beq.n	8008f0c <_strtod_l+0x40c>
 8008ef6:	495d      	ldr	r1, [pc, #372]	@ (800906c <_strtod_l+0x56c>)
 8008ef8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008efc:	ed91 7b00 	vldr	d7, [r1]
 8008f00:	ec4b ab16 	vmov	d6, sl, fp
 8008f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f08:	ec5b ab17 	vmov	sl, fp, d7
 8008f0c:	f032 020f 	bics.w	r2, r2, #15
 8008f10:	d073      	beq.n	8008ffa <_strtod_l+0x4fa>
 8008f12:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8008f16:	dd47      	ble.n	8008fa8 <_strtod_l+0x4a8>
 8008f18:	2400      	movs	r4, #0
 8008f1a:	4625      	mov	r5, r4
 8008f1c:	9407      	str	r4, [sp, #28]
 8008f1e:	4626      	mov	r6, r4
 8008f20:	9a05      	ldr	r2, [sp, #20]
 8008f22:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009078 <_strtod_l+0x578>
 8008f26:	2322      	movs	r3, #34	@ 0x22
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	f04f 0a00 	mov.w	sl, #0
 8008f2e:	9b07      	ldr	r3, [sp, #28]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f43f ae20 	beq.w	8008b76 <_strtod_l+0x76>
 8008f36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008f38:	9805      	ldr	r0, [sp, #20]
 8008f3a:	f7ff f957 	bl	80081ec <_Bfree>
 8008f3e:	9805      	ldr	r0, [sp, #20]
 8008f40:	4631      	mov	r1, r6
 8008f42:	f7ff f953 	bl	80081ec <_Bfree>
 8008f46:	9805      	ldr	r0, [sp, #20]
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7ff f94f 	bl	80081ec <_Bfree>
 8008f4e:	9907      	ldr	r1, [sp, #28]
 8008f50:	9805      	ldr	r0, [sp, #20]
 8008f52:	f7ff f94b 	bl	80081ec <_Bfree>
 8008f56:	9805      	ldr	r0, [sp, #20]
 8008f58:	4621      	mov	r1, r4
 8008f5a:	f7ff f947 	bl	80081ec <_Bfree>
 8008f5e:	e60a      	b.n	8008b76 <_strtod_l+0x76>
 8008f60:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8008f64:	1be0      	subs	r0, r4, r7
 8008f66:	4281      	cmp	r1, r0
 8008f68:	dbbc      	blt.n	8008ee4 <_strtod_l+0x3e4>
 8008f6a:	4a40      	ldr	r2, [pc, #256]	@ (800906c <_strtod_l+0x56c>)
 8008f6c:	f1c3 030f 	rsb	r3, r3, #15
 8008f70:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008f74:	ed91 7b00 	vldr	d7, [r1]
 8008f78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f7a:	ec4b ab16 	vmov	d6, sl, fp
 8008f7e:	1acb      	subs	r3, r1, r3
 8008f80:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008f84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f88:	ed92 6b00 	vldr	d6, [r2]
 8008f8c:	e796      	b.n	8008ebc <_strtod_l+0x3bc>
 8008f8e:	3116      	adds	r1, #22
 8008f90:	dba8      	blt.n	8008ee4 <_strtod_l+0x3e4>
 8008f92:	4b36      	ldr	r3, [pc, #216]	@ (800906c <_strtod_l+0x56c>)
 8008f94:	1b3c      	subs	r4, r7, r4
 8008f96:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008f9a:	ed94 7b00 	vldr	d7, [r4]
 8008f9e:	ec4b ab16 	vmov	d6, sl, fp
 8008fa2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008fa6:	e78b      	b.n	8008ec0 <_strtod_l+0x3c0>
 8008fa8:	2000      	movs	r0, #0
 8008faa:	ec4b ab17 	vmov	d7, sl, fp
 8008fae:	4e30      	ldr	r6, [pc, #192]	@ (8009070 <_strtod_l+0x570>)
 8008fb0:	1112      	asrs	r2, r2, #4
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	2a01      	cmp	r2, #1
 8008fb6:	dc23      	bgt.n	8009000 <_strtod_l+0x500>
 8008fb8:	b108      	cbz	r0, 8008fbe <_strtod_l+0x4be>
 8008fba:	ec5b ab17 	vmov	sl, fp, d7
 8008fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8009070 <_strtod_l+0x570>)
 8008fc0:	482c      	ldr	r0, [pc, #176]	@ (8009074 <_strtod_l+0x574>)
 8008fc2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008fc6:	ed92 7b00 	vldr	d7, [r2]
 8008fca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008fce:	ec4b ab16 	vmov	d6, sl, fp
 8008fd2:	4a29      	ldr	r2, [pc, #164]	@ (8009078 <_strtod_l+0x578>)
 8008fd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fd8:	ee17 1a90 	vmov	r1, s15
 8008fdc:	400a      	ands	r2, r1
 8008fde:	4282      	cmp	r2, r0
 8008fe0:	ec5b ab17 	vmov	sl, fp, d7
 8008fe4:	d898      	bhi.n	8008f18 <_strtod_l+0x418>
 8008fe6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8008fea:	4282      	cmp	r2, r0
 8008fec:	bf86      	itte	hi
 8008fee:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800907c <_strtod_l+0x57c>
 8008ff2:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ff6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	9206      	str	r2, [sp, #24]
 8008ffe:	e076      	b.n	80090ee <_strtod_l+0x5ee>
 8009000:	f012 0f01 	tst.w	r2, #1
 8009004:	d004      	beq.n	8009010 <_strtod_l+0x510>
 8009006:	ed96 6b00 	vldr	d6, [r6]
 800900a:	2001      	movs	r0, #1
 800900c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009010:	3101      	adds	r1, #1
 8009012:	1052      	asrs	r2, r2, #1
 8009014:	3608      	adds	r6, #8
 8009016:	e7cd      	b.n	8008fb4 <_strtod_l+0x4b4>
 8009018:	d0ef      	beq.n	8008ffa <_strtod_l+0x4fa>
 800901a:	4252      	negs	r2, r2
 800901c:	f012 000f 	ands.w	r0, r2, #15
 8009020:	d00a      	beq.n	8009038 <_strtod_l+0x538>
 8009022:	4912      	ldr	r1, [pc, #72]	@ (800906c <_strtod_l+0x56c>)
 8009024:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009028:	ed91 7b00 	vldr	d7, [r1]
 800902c:	ec4b ab16 	vmov	d6, sl, fp
 8009030:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009034:	ec5b ab17 	vmov	sl, fp, d7
 8009038:	1112      	asrs	r2, r2, #4
 800903a:	d0de      	beq.n	8008ffa <_strtod_l+0x4fa>
 800903c:	2a1f      	cmp	r2, #31
 800903e:	dd1f      	ble.n	8009080 <_strtod_l+0x580>
 8009040:	2400      	movs	r4, #0
 8009042:	4625      	mov	r5, r4
 8009044:	9407      	str	r4, [sp, #28]
 8009046:	4626      	mov	r6, r4
 8009048:	9a05      	ldr	r2, [sp, #20]
 800904a:	2322      	movs	r3, #34	@ 0x22
 800904c:	f04f 0a00 	mov.w	sl, #0
 8009050:	f04f 0b00 	mov.w	fp, #0
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	e76a      	b.n	8008f2e <_strtod_l+0x42e>
 8009058:	0800a905 	.word	0x0800a905
 800905c:	0800ab1c 	.word	0x0800ab1c
 8009060:	0800a8fd 	.word	0x0800a8fd
 8009064:	0800a934 	.word	0x0800a934
 8009068:	0800acc5 	.word	0x0800acc5
 800906c:	0800aa50 	.word	0x0800aa50
 8009070:	0800aa28 	.word	0x0800aa28
 8009074:	7ca00000 	.word	0x7ca00000
 8009078:	7ff00000 	.word	0x7ff00000
 800907c:	7fefffff 	.word	0x7fefffff
 8009080:	f012 0110 	ands.w	r1, r2, #16
 8009084:	bf18      	it	ne
 8009086:	216a      	movne	r1, #106	@ 0x6a
 8009088:	9106      	str	r1, [sp, #24]
 800908a:	ec4b ab17 	vmov	d7, sl, fp
 800908e:	49b0      	ldr	r1, [pc, #704]	@ (8009350 <_strtod_l+0x850>)
 8009090:	2000      	movs	r0, #0
 8009092:	07d6      	lsls	r6, r2, #31
 8009094:	d504      	bpl.n	80090a0 <_strtod_l+0x5a0>
 8009096:	ed91 6b00 	vldr	d6, [r1]
 800909a:	2001      	movs	r0, #1
 800909c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090a0:	1052      	asrs	r2, r2, #1
 80090a2:	f101 0108 	add.w	r1, r1, #8
 80090a6:	d1f4      	bne.n	8009092 <_strtod_l+0x592>
 80090a8:	b108      	cbz	r0, 80090ae <_strtod_l+0x5ae>
 80090aa:	ec5b ab17 	vmov	sl, fp, d7
 80090ae:	9a06      	ldr	r2, [sp, #24]
 80090b0:	b1b2      	cbz	r2, 80090e0 <_strtod_l+0x5e0>
 80090b2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80090b6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	4658      	mov	r0, fp
 80090be:	dd0f      	ble.n	80090e0 <_strtod_l+0x5e0>
 80090c0:	2a1f      	cmp	r2, #31
 80090c2:	dd55      	ble.n	8009170 <_strtod_l+0x670>
 80090c4:	2a34      	cmp	r2, #52	@ 0x34
 80090c6:	bfde      	ittt	le
 80090c8:	f04f 32ff 	movle.w	r2, #4294967295
 80090cc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80090d0:	408a      	lslle	r2, r1
 80090d2:	f04f 0a00 	mov.w	sl, #0
 80090d6:	bfcc      	ite	gt
 80090d8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80090dc:	ea02 0b00 	andle.w	fp, r2, r0
 80090e0:	ec4b ab17 	vmov	d7, sl, fp
 80090e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	d0a8      	beq.n	8009040 <_strtod_l+0x540>
 80090ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090f0:	9805      	ldr	r0, [sp, #20]
 80090f2:	f8cd 9000 	str.w	r9, [sp]
 80090f6:	462a      	mov	r2, r5
 80090f8:	f7ff f8e0 	bl	80082bc <__s2b>
 80090fc:	9007      	str	r0, [sp, #28]
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f af0a 	beq.w	8008f18 <_strtod_l+0x418>
 8009104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009106:	1b3f      	subs	r7, r7, r4
 8009108:	2b00      	cmp	r3, #0
 800910a:	bfb4      	ite	lt
 800910c:	463b      	movlt	r3, r7
 800910e:	2300      	movge	r3, #0
 8009110:	930a      	str	r3, [sp, #40]	@ 0x28
 8009112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009114:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8009340 <_strtod_l+0x840>
 8009118:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800911c:	2400      	movs	r4, #0
 800911e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009120:	4625      	mov	r5, r4
 8009122:	9b07      	ldr	r3, [sp, #28]
 8009124:	9805      	ldr	r0, [sp, #20]
 8009126:	6859      	ldr	r1, [r3, #4]
 8009128:	f7ff f820 	bl	800816c <_Balloc>
 800912c:	4606      	mov	r6, r0
 800912e:	2800      	cmp	r0, #0
 8009130:	f43f aef6 	beq.w	8008f20 <_strtod_l+0x420>
 8009134:	9b07      	ldr	r3, [sp, #28]
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	ec4b ab19 	vmov	d9, sl, fp
 800913c:	3202      	adds	r2, #2
 800913e:	f103 010c 	add.w	r1, r3, #12
 8009142:	0092      	lsls	r2, r2, #2
 8009144:	300c      	adds	r0, #12
 8009146:	f7fe f91c 	bl	8007382 <memcpy>
 800914a:	eeb0 0b49 	vmov.f64	d0, d9
 800914e:	9805      	ldr	r0, [sp, #20]
 8009150:	aa14      	add	r2, sp, #80	@ 0x50
 8009152:	a913      	add	r1, sp, #76	@ 0x4c
 8009154:	f7ff fbee 	bl	8008934 <__d2b>
 8009158:	9012      	str	r0, [sp, #72]	@ 0x48
 800915a:	2800      	cmp	r0, #0
 800915c:	f43f aee0 	beq.w	8008f20 <_strtod_l+0x420>
 8009160:	9805      	ldr	r0, [sp, #20]
 8009162:	2101      	movs	r1, #1
 8009164:	f7ff f940 	bl	80083e8 <__i2b>
 8009168:	4605      	mov	r5, r0
 800916a:	b940      	cbnz	r0, 800917e <_strtod_l+0x67e>
 800916c:	2500      	movs	r5, #0
 800916e:	e6d7      	b.n	8008f20 <_strtod_l+0x420>
 8009170:	f04f 31ff 	mov.w	r1, #4294967295
 8009174:	fa01 f202 	lsl.w	r2, r1, r2
 8009178:	ea02 0a0a 	and.w	sl, r2, sl
 800917c:	e7b0      	b.n	80090e0 <_strtod_l+0x5e0>
 800917e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009180:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009182:	2f00      	cmp	r7, #0
 8009184:	bfab      	itete	ge
 8009186:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8009188:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800918a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800918e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8009192:	bfac      	ite	ge
 8009194:	eb07 0903 	addge.w	r9, r7, r3
 8009198:	eba3 0807 	sublt.w	r8, r3, r7
 800919c:	9b06      	ldr	r3, [sp, #24]
 800919e:	1aff      	subs	r7, r7, r3
 80091a0:	4417      	add	r7, r2
 80091a2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80091a6:	4a6b      	ldr	r2, [pc, #428]	@ (8009354 <_strtod_l+0x854>)
 80091a8:	3f01      	subs	r7, #1
 80091aa:	4297      	cmp	r7, r2
 80091ac:	da51      	bge.n	8009252 <_strtod_l+0x752>
 80091ae:	1bd1      	subs	r1, r2, r7
 80091b0:	291f      	cmp	r1, #31
 80091b2:	eba3 0301 	sub.w	r3, r3, r1
 80091b6:	f04f 0201 	mov.w	r2, #1
 80091ba:	dc3e      	bgt.n	800923a <_strtod_l+0x73a>
 80091bc:	408a      	lsls	r2, r1
 80091be:	920c      	str	r2, [sp, #48]	@ 0x30
 80091c0:	2200      	movs	r2, #0
 80091c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80091c4:	eb09 0703 	add.w	r7, r9, r3
 80091c8:	4498      	add	r8, r3
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	45b9      	cmp	r9, r7
 80091ce:	4498      	add	r8, r3
 80091d0:	464b      	mov	r3, r9
 80091d2:	bfa8      	it	ge
 80091d4:	463b      	movge	r3, r7
 80091d6:	4543      	cmp	r3, r8
 80091d8:	bfa8      	it	ge
 80091da:	4643      	movge	r3, r8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bfc2      	ittt	gt
 80091e0:	1aff      	subgt	r7, r7, r3
 80091e2:	eba8 0803 	subgt.w	r8, r8, r3
 80091e6:	eba9 0903 	subgt.w	r9, r9, r3
 80091ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dd16      	ble.n	800921e <_strtod_l+0x71e>
 80091f0:	4629      	mov	r1, r5
 80091f2:	9805      	ldr	r0, [sp, #20]
 80091f4:	461a      	mov	r2, r3
 80091f6:	f7ff f9b7 	bl	8008568 <__pow5mult>
 80091fa:	4605      	mov	r5, r0
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d0b5      	beq.n	800916c <_strtod_l+0x66c>
 8009200:	4601      	mov	r1, r0
 8009202:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009204:	9805      	ldr	r0, [sp, #20]
 8009206:	f7ff f905 	bl	8008414 <__multiply>
 800920a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800920c:	2800      	cmp	r0, #0
 800920e:	f43f ae87 	beq.w	8008f20 <_strtod_l+0x420>
 8009212:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009214:	9805      	ldr	r0, [sp, #20]
 8009216:	f7fe ffe9 	bl	80081ec <_Bfree>
 800921a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800921c:	9312      	str	r3, [sp, #72]	@ 0x48
 800921e:	2f00      	cmp	r7, #0
 8009220:	dc1b      	bgt.n	800925a <_strtod_l+0x75a>
 8009222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	dd21      	ble.n	800926c <_strtod_l+0x76c>
 8009228:	4631      	mov	r1, r6
 800922a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800922c:	9805      	ldr	r0, [sp, #20]
 800922e:	f7ff f99b 	bl	8008568 <__pow5mult>
 8009232:	4606      	mov	r6, r0
 8009234:	b9d0      	cbnz	r0, 800926c <_strtod_l+0x76c>
 8009236:	2600      	movs	r6, #0
 8009238:	e672      	b.n	8008f20 <_strtod_l+0x420>
 800923a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800923e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009242:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009246:	37e2      	adds	r7, #226	@ 0xe2
 8009248:	fa02 f107 	lsl.w	r1, r2, r7
 800924c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800924e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009250:	e7b8      	b.n	80091c4 <_strtod_l+0x6c4>
 8009252:	2200      	movs	r2, #0
 8009254:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009256:	2201      	movs	r2, #1
 8009258:	e7f9      	b.n	800924e <_strtod_l+0x74e>
 800925a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800925c:	9805      	ldr	r0, [sp, #20]
 800925e:	463a      	mov	r2, r7
 8009260:	f7ff f9dc 	bl	800861c <__lshift>
 8009264:	9012      	str	r0, [sp, #72]	@ 0x48
 8009266:	2800      	cmp	r0, #0
 8009268:	d1db      	bne.n	8009222 <_strtod_l+0x722>
 800926a:	e659      	b.n	8008f20 <_strtod_l+0x420>
 800926c:	f1b8 0f00 	cmp.w	r8, #0
 8009270:	dd07      	ble.n	8009282 <_strtod_l+0x782>
 8009272:	4631      	mov	r1, r6
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	4642      	mov	r2, r8
 8009278:	f7ff f9d0 	bl	800861c <__lshift>
 800927c:	4606      	mov	r6, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d0d9      	beq.n	8009236 <_strtod_l+0x736>
 8009282:	f1b9 0f00 	cmp.w	r9, #0
 8009286:	dd08      	ble.n	800929a <_strtod_l+0x79a>
 8009288:	4629      	mov	r1, r5
 800928a:	9805      	ldr	r0, [sp, #20]
 800928c:	464a      	mov	r2, r9
 800928e:	f7ff f9c5 	bl	800861c <__lshift>
 8009292:	4605      	mov	r5, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	f43f ae43 	beq.w	8008f20 <_strtod_l+0x420>
 800929a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800929c:	9805      	ldr	r0, [sp, #20]
 800929e:	4632      	mov	r2, r6
 80092a0:	f7ff fa44 	bl	800872c <__mdiff>
 80092a4:	4604      	mov	r4, r0
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f43f ae3a 	beq.w	8008f20 <_strtod_l+0x420>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80092b2:	60c3      	str	r3, [r0, #12]
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7ff fa1d 	bl	80086f4 <__mcmp>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	da4e      	bge.n	800935c <_strtod_l+0x85c>
 80092be:	ea58 080a 	orrs.w	r8, r8, sl
 80092c2:	d174      	bne.n	80093ae <_strtod_l+0x8ae>
 80092c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d170      	bne.n	80093ae <_strtod_l+0x8ae>
 80092cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092d0:	0d1b      	lsrs	r3, r3, #20
 80092d2:	051b      	lsls	r3, r3, #20
 80092d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092d8:	d969      	bls.n	80093ae <_strtod_l+0x8ae>
 80092da:	6963      	ldr	r3, [r4, #20]
 80092dc:	b913      	cbnz	r3, 80092e4 <_strtod_l+0x7e4>
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	dd64      	ble.n	80093ae <_strtod_l+0x8ae>
 80092e4:	4621      	mov	r1, r4
 80092e6:	2201      	movs	r2, #1
 80092e8:	9805      	ldr	r0, [sp, #20]
 80092ea:	f7ff f997 	bl	800861c <__lshift>
 80092ee:	4629      	mov	r1, r5
 80092f0:	4604      	mov	r4, r0
 80092f2:	f7ff f9ff 	bl	80086f4 <__mcmp>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	dd59      	ble.n	80093ae <_strtod_l+0x8ae>
 80092fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092fe:	9a06      	ldr	r2, [sp, #24]
 8009300:	0d1b      	lsrs	r3, r3, #20
 8009302:	051b      	lsls	r3, r3, #20
 8009304:	2a00      	cmp	r2, #0
 8009306:	d070      	beq.n	80093ea <_strtod_l+0x8ea>
 8009308:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800930c:	d86d      	bhi.n	80093ea <_strtod_l+0x8ea>
 800930e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009312:	f67f ae99 	bls.w	8009048 <_strtod_l+0x548>
 8009316:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009348 <_strtod_l+0x848>
 800931a:	ec4b ab16 	vmov	d6, sl, fp
 800931e:	4b0e      	ldr	r3, [pc, #56]	@ (8009358 <_strtod_l+0x858>)
 8009320:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009324:	ee17 2a90 	vmov	r2, s15
 8009328:	4013      	ands	r3, r2
 800932a:	ec5b ab17 	vmov	sl, fp, d7
 800932e:	2b00      	cmp	r3, #0
 8009330:	f47f ae01 	bne.w	8008f36 <_strtod_l+0x436>
 8009334:	9a05      	ldr	r2, [sp, #20]
 8009336:	2322      	movs	r3, #34	@ 0x22
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	e5fc      	b.n	8008f36 <_strtod_l+0x436>
 800933c:	f3af 8000 	nop.w
 8009340:	ffc00000 	.word	0xffc00000
 8009344:	41dfffff 	.word	0x41dfffff
 8009348:	00000000 	.word	0x00000000
 800934c:	39500000 	.word	0x39500000
 8009350:	0800ab48 	.word	0x0800ab48
 8009354:	fffffc02 	.word	0xfffffc02
 8009358:	7ff00000 	.word	0x7ff00000
 800935c:	46d9      	mov	r9, fp
 800935e:	d15d      	bne.n	800941c <_strtod_l+0x91c>
 8009360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009364:	f1b8 0f00 	cmp.w	r8, #0
 8009368:	d02a      	beq.n	80093c0 <_strtod_l+0x8c0>
 800936a:	4aab      	ldr	r2, [pc, #684]	@ (8009618 <_strtod_l+0xb18>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d12a      	bne.n	80093c6 <_strtod_l+0x8c6>
 8009370:	9b06      	ldr	r3, [sp, #24]
 8009372:	4652      	mov	r2, sl
 8009374:	b1fb      	cbz	r3, 80093b6 <_strtod_l+0x8b6>
 8009376:	4ba9      	ldr	r3, [pc, #676]	@ (800961c <_strtod_l+0xb1c>)
 8009378:	ea0b 0303 	and.w	r3, fp, r3
 800937c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009380:	f04f 31ff 	mov.w	r1, #4294967295
 8009384:	d81a      	bhi.n	80093bc <_strtod_l+0x8bc>
 8009386:	0d1b      	lsrs	r3, r3, #20
 8009388:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800938c:	fa01 f303 	lsl.w	r3, r1, r3
 8009390:	429a      	cmp	r2, r3
 8009392:	d118      	bne.n	80093c6 <_strtod_l+0x8c6>
 8009394:	4ba2      	ldr	r3, [pc, #648]	@ (8009620 <_strtod_l+0xb20>)
 8009396:	4599      	cmp	r9, r3
 8009398:	d102      	bne.n	80093a0 <_strtod_l+0x8a0>
 800939a:	3201      	adds	r2, #1
 800939c:	f43f adc0 	beq.w	8008f20 <_strtod_l+0x420>
 80093a0:	4b9e      	ldr	r3, [pc, #632]	@ (800961c <_strtod_l+0xb1c>)
 80093a2:	ea09 0303 	and.w	r3, r9, r3
 80093a6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80093aa:	f04f 0a00 	mov.w	sl, #0
 80093ae:	9b06      	ldr	r3, [sp, #24]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1b0      	bne.n	8009316 <_strtod_l+0x816>
 80093b4:	e5bf      	b.n	8008f36 <_strtod_l+0x436>
 80093b6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ba:	e7e9      	b.n	8009390 <_strtod_l+0x890>
 80093bc:	460b      	mov	r3, r1
 80093be:	e7e7      	b.n	8009390 <_strtod_l+0x890>
 80093c0:	ea53 030a 	orrs.w	r3, r3, sl
 80093c4:	d099      	beq.n	80092fa <_strtod_l+0x7fa>
 80093c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093c8:	b1c3      	cbz	r3, 80093fc <_strtod_l+0x8fc>
 80093ca:	ea13 0f09 	tst.w	r3, r9
 80093ce:	d0ee      	beq.n	80093ae <_strtod_l+0x8ae>
 80093d0:	9a06      	ldr	r2, [sp, #24]
 80093d2:	4650      	mov	r0, sl
 80093d4:	4659      	mov	r1, fp
 80093d6:	f1b8 0f00 	cmp.w	r8, #0
 80093da:	d013      	beq.n	8009404 <_strtod_l+0x904>
 80093dc:	f7ff fb75 	bl	8008aca <sulp>
 80093e0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80093e4:	ec5b ab17 	vmov	sl, fp, d7
 80093e8:	e7e1      	b.n	80093ae <_strtod_l+0x8ae>
 80093ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80093ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093f6:	f04f 3aff 	mov.w	sl, #4294967295
 80093fa:	e7d8      	b.n	80093ae <_strtod_l+0x8ae>
 80093fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093fe:	ea13 0f0a 	tst.w	r3, sl
 8009402:	e7e4      	b.n	80093ce <_strtod_l+0x8ce>
 8009404:	f7ff fb61 	bl	8008aca <sulp>
 8009408:	ee39 0b40 	vsub.f64	d0, d9, d0
 800940c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009414:	ec5b ab10 	vmov	sl, fp, d0
 8009418:	d1c9      	bne.n	80093ae <_strtod_l+0x8ae>
 800941a:	e615      	b.n	8009048 <_strtod_l+0x548>
 800941c:	4629      	mov	r1, r5
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff fae0 	bl	80089e4 <__ratio>
 8009424:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009428:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009430:	d85d      	bhi.n	80094ee <_strtod_l+0x9ee>
 8009432:	f1b8 0f00 	cmp.w	r8, #0
 8009436:	d164      	bne.n	8009502 <_strtod_l+0xa02>
 8009438:	f1ba 0f00 	cmp.w	sl, #0
 800943c:	d14b      	bne.n	80094d6 <_strtod_l+0x9d6>
 800943e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009442:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d160      	bne.n	800950c <_strtod_l+0xa0c>
 800944a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800944e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009456:	d401      	bmi.n	800945c <_strtod_l+0x95c>
 8009458:	ee20 8b08 	vmul.f64	d8, d0, d8
 800945c:	eeb1 ab48 	vneg.f64	d10, d8
 8009460:	486e      	ldr	r0, [pc, #440]	@ (800961c <_strtod_l+0xb1c>)
 8009462:	4970      	ldr	r1, [pc, #448]	@ (8009624 <_strtod_l+0xb24>)
 8009464:	ea09 0700 	and.w	r7, r9, r0
 8009468:	428f      	cmp	r7, r1
 800946a:	ec53 2b1a 	vmov	r2, r3, d10
 800946e:	d17d      	bne.n	800956c <_strtod_l+0xa6c>
 8009470:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009474:	ec4b ab1c 	vmov	d12, sl, fp
 8009478:	eeb0 0b4c 	vmov.f64	d0, d12
 800947c:	f7ff f9ea 	bl	8008854 <__ulp>
 8009480:	4866      	ldr	r0, [pc, #408]	@ (800961c <_strtod_l+0xb1c>)
 8009482:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009486:	ee1c 3a90 	vmov	r3, s25
 800948a:	4a67      	ldr	r2, [pc, #412]	@ (8009628 <_strtod_l+0xb28>)
 800948c:	ea03 0100 	and.w	r1, r3, r0
 8009490:	4291      	cmp	r1, r2
 8009492:	ec5b ab1c 	vmov	sl, fp, d12
 8009496:	d93c      	bls.n	8009512 <_strtod_l+0xa12>
 8009498:	ee19 2a90 	vmov	r2, s19
 800949c:	4b60      	ldr	r3, [pc, #384]	@ (8009620 <_strtod_l+0xb20>)
 800949e:	429a      	cmp	r2, r3
 80094a0:	d104      	bne.n	80094ac <_strtod_l+0x9ac>
 80094a2:	ee19 3a10 	vmov	r3, s18
 80094a6:	3301      	adds	r3, #1
 80094a8:	f43f ad3a 	beq.w	8008f20 <_strtod_l+0x420>
 80094ac:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8009620 <_strtod_l+0xb20>
 80094b0:	f04f 3aff 	mov.w	sl, #4294967295
 80094b4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80094b6:	9805      	ldr	r0, [sp, #20]
 80094b8:	f7fe fe98 	bl	80081ec <_Bfree>
 80094bc:	9805      	ldr	r0, [sp, #20]
 80094be:	4631      	mov	r1, r6
 80094c0:	f7fe fe94 	bl	80081ec <_Bfree>
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	4629      	mov	r1, r5
 80094c8:	f7fe fe90 	bl	80081ec <_Bfree>
 80094cc:	9805      	ldr	r0, [sp, #20]
 80094ce:	4621      	mov	r1, r4
 80094d0:	f7fe fe8c 	bl	80081ec <_Bfree>
 80094d4:	e625      	b.n	8009122 <_strtod_l+0x622>
 80094d6:	f1ba 0f01 	cmp.w	sl, #1
 80094da:	d103      	bne.n	80094e4 <_strtod_l+0x9e4>
 80094dc:	f1bb 0f00 	cmp.w	fp, #0
 80094e0:	f43f adb2 	beq.w	8009048 <_strtod_l+0x548>
 80094e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80094e8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80094ec:	e7b8      	b.n	8009460 <_strtod_l+0x960>
 80094ee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80094f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80094f6:	f1b8 0f00 	cmp.w	r8, #0
 80094fa:	d0af      	beq.n	800945c <_strtod_l+0x95c>
 80094fc:	eeb0 ab48 	vmov.f64	d10, d8
 8009500:	e7ae      	b.n	8009460 <_strtod_l+0x960>
 8009502:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8009506:	eeb0 8b4a 	vmov.f64	d8, d10
 800950a:	e7a9      	b.n	8009460 <_strtod_l+0x960>
 800950c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009510:	e7a6      	b.n	8009460 <_strtod_l+0x960>
 8009512:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009516:	9b06      	ldr	r3, [sp, #24]
 8009518:	46d9      	mov	r9, fp
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1ca      	bne.n	80094b4 <_strtod_l+0x9b4>
 800951e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009522:	0d1b      	lsrs	r3, r3, #20
 8009524:	051b      	lsls	r3, r3, #20
 8009526:	429f      	cmp	r7, r3
 8009528:	d1c4      	bne.n	80094b4 <_strtod_l+0x9b4>
 800952a:	ec51 0b18 	vmov	r0, r1, d8
 800952e:	f7f7 f8b3 	bl	8000698 <__aeabi_d2lz>
 8009532:	f7f7 f86b 	bl	800060c <__aeabi_l2d>
 8009536:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800953a:	ec41 0b17 	vmov	d7, r0, r1
 800953e:	ea49 090a 	orr.w	r9, r9, sl
 8009542:	ea59 0908 	orrs.w	r9, r9, r8
 8009546:	ee38 8b47 	vsub.f64	d8, d8, d7
 800954a:	d03c      	beq.n	80095c6 <_strtod_l+0xac6>
 800954c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8009600 <_strtod_l+0xb00>
 8009550:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009558:	f53f aced 	bmi.w	8008f36 <_strtod_l+0x436>
 800955c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009608 <_strtod_l+0xb08>
 8009560:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009568:	dda4      	ble.n	80094b4 <_strtod_l+0x9b4>
 800956a:	e4e4      	b.n	8008f36 <_strtod_l+0x436>
 800956c:	9906      	ldr	r1, [sp, #24]
 800956e:	b1e1      	cbz	r1, 80095aa <_strtod_l+0xaaa>
 8009570:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009574:	d819      	bhi.n	80095aa <_strtod_l+0xaaa>
 8009576:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800957a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957e:	d811      	bhi.n	80095a4 <_strtod_l+0xaa4>
 8009580:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009584:	ee18 3a10 	vmov	r3, s16
 8009588:	2b01      	cmp	r3, #1
 800958a:	bf38      	it	cc
 800958c:	2301      	movcc	r3, #1
 800958e:	ee08 3a10 	vmov	s16, r3
 8009592:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009596:	f1b8 0f00 	cmp.w	r8, #0
 800959a:	d111      	bne.n	80095c0 <_strtod_l+0xac0>
 800959c:	eeb1 7b48 	vneg.f64	d7, d8
 80095a0:	ec53 2b17 	vmov	r2, r3, d7
 80095a4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80095a8:	1bcb      	subs	r3, r1, r7
 80095aa:	eeb0 0b49 	vmov.f64	d0, d9
 80095ae:	ec43 2b1a 	vmov	d10, r2, r3
 80095b2:	f7ff f94f 	bl	8008854 <__ulp>
 80095b6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80095ba:	ec5b ab19 	vmov	sl, fp, d9
 80095be:	e7aa      	b.n	8009516 <_strtod_l+0xa16>
 80095c0:	eeb0 7b48 	vmov.f64	d7, d8
 80095c4:	e7ec      	b.n	80095a0 <_strtod_l+0xaa0>
 80095c6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8009610 <_strtod_l+0xb10>
 80095ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80095ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d2:	f57f af6f 	bpl.w	80094b4 <_strtod_l+0x9b4>
 80095d6:	e4ae      	b.n	8008f36 <_strtod_l+0x436>
 80095d8:	2300      	movs	r3, #0
 80095da:	9308      	str	r3, [sp, #32]
 80095dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	f7ff bacc 	b.w	8008b7e <_strtod_l+0x7e>
 80095e6:	2a65      	cmp	r2, #101	@ 0x65
 80095e8:	f43f abbc 	beq.w	8008d64 <_strtod_l+0x264>
 80095ec:	2a45      	cmp	r2, #69	@ 0x45
 80095ee:	f43f abb9 	beq.w	8008d64 <_strtod_l+0x264>
 80095f2:	2301      	movs	r3, #1
 80095f4:	9306      	str	r3, [sp, #24]
 80095f6:	f7ff bbf0 	b.w	8008dda <_strtod_l+0x2da>
 80095fa:	bf00      	nop
 80095fc:	f3af 8000 	nop.w
 8009600:	94a03595 	.word	0x94a03595
 8009604:	3fdfffff 	.word	0x3fdfffff
 8009608:	35afe535 	.word	0x35afe535
 800960c:	3fe00000 	.word	0x3fe00000
 8009610:	94a03595 	.word	0x94a03595
 8009614:	3fcfffff 	.word	0x3fcfffff
 8009618:	000fffff 	.word	0x000fffff
 800961c:	7ff00000 	.word	0x7ff00000
 8009620:	7fefffff 	.word	0x7fefffff
 8009624:	7fe00000 	.word	0x7fe00000
 8009628:	7c9fffff 	.word	0x7c9fffff

0800962c <_strtod_r>:
 800962c:	4b01      	ldr	r3, [pc, #4]	@ (8009634 <_strtod_r+0x8>)
 800962e:	f7ff ba67 	b.w	8008b00 <_strtod_l>
 8009632:	bf00      	nop
 8009634:	20000304 	.word	0x20000304

08009638 <_strtol_l.constprop.0>:
 8009638:	2b24      	cmp	r3, #36	@ 0x24
 800963a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800963e:	4686      	mov	lr, r0
 8009640:	4690      	mov	r8, r2
 8009642:	d801      	bhi.n	8009648 <_strtol_l.constprop.0+0x10>
 8009644:	2b01      	cmp	r3, #1
 8009646:	d106      	bne.n	8009656 <_strtol_l.constprop.0+0x1e>
 8009648:	f7fd fe6e 	bl	8007328 <__errno>
 800964c:	2316      	movs	r3, #22
 800964e:	6003      	str	r3, [r0, #0]
 8009650:	2000      	movs	r0, #0
 8009652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009656:	4834      	ldr	r0, [pc, #208]	@ (8009728 <_strtol_l.constprop.0+0xf0>)
 8009658:	460d      	mov	r5, r1
 800965a:	462a      	mov	r2, r5
 800965c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009660:	5d06      	ldrb	r6, [r0, r4]
 8009662:	f016 0608 	ands.w	r6, r6, #8
 8009666:	d1f8      	bne.n	800965a <_strtol_l.constprop.0+0x22>
 8009668:	2c2d      	cmp	r4, #45	@ 0x2d
 800966a:	d12d      	bne.n	80096c8 <_strtol_l.constprop.0+0x90>
 800966c:	782c      	ldrb	r4, [r5, #0]
 800966e:	2601      	movs	r6, #1
 8009670:	1c95      	adds	r5, r2, #2
 8009672:	f033 0210 	bics.w	r2, r3, #16
 8009676:	d109      	bne.n	800968c <_strtol_l.constprop.0+0x54>
 8009678:	2c30      	cmp	r4, #48	@ 0x30
 800967a:	d12a      	bne.n	80096d2 <_strtol_l.constprop.0+0x9a>
 800967c:	782a      	ldrb	r2, [r5, #0]
 800967e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009682:	2a58      	cmp	r2, #88	@ 0x58
 8009684:	d125      	bne.n	80096d2 <_strtol_l.constprop.0+0x9a>
 8009686:	786c      	ldrb	r4, [r5, #1]
 8009688:	2310      	movs	r3, #16
 800968a:	3502      	adds	r5, #2
 800968c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009690:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009694:	2200      	movs	r2, #0
 8009696:	fbbc f9f3 	udiv	r9, ip, r3
 800969a:	4610      	mov	r0, r2
 800969c:	fb03 ca19 	mls	sl, r3, r9, ip
 80096a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80096a4:	2f09      	cmp	r7, #9
 80096a6:	d81b      	bhi.n	80096e0 <_strtol_l.constprop.0+0xa8>
 80096a8:	463c      	mov	r4, r7
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	dd27      	ble.n	80096fe <_strtol_l.constprop.0+0xc6>
 80096ae:	1c57      	adds	r7, r2, #1
 80096b0:	d007      	beq.n	80096c2 <_strtol_l.constprop.0+0x8a>
 80096b2:	4581      	cmp	r9, r0
 80096b4:	d320      	bcc.n	80096f8 <_strtol_l.constprop.0+0xc0>
 80096b6:	d101      	bne.n	80096bc <_strtol_l.constprop.0+0x84>
 80096b8:	45a2      	cmp	sl, r4
 80096ba:	db1d      	blt.n	80096f8 <_strtol_l.constprop.0+0xc0>
 80096bc:	fb00 4003 	mla	r0, r0, r3, r4
 80096c0:	2201      	movs	r2, #1
 80096c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c6:	e7eb      	b.n	80096a0 <_strtol_l.constprop.0+0x68>
 80096c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80096ca:	bf04      	itt	eq
 80096cc:	782c      	ldrbeq	r4, [r5, #0]
 80096ce:	1c95      	addeq	r5, r2, #2
 80096d0:	e7cf      	b.n	8009672 <_strtol_l.constprop.0+0x3a>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1da      	bne.n	800968c <_strtol_l.constprop.0+0x54>
 80096d6:	2c30      	cmp	r4, #48	@ 0x30
 80096d8:	bf0c      	ite	eq
 80096da:	2308      	moveq	r3, #8
 80096dc:	230a      	movne	r3, #10
 80096de:	e7d5      	b.n	800968c <_strtol_l.constprop.0+0x54>
 80096e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80096e4:	2f19      	cmp	r7, #25
 80096e6:	d801      	bhi.n	80096ec <_strtol_l.constprop.0+0xb4>
 80096e8:	3c37      	subs	r4, #55	@ 0x37
 80096ea:	e7de      	b.n	80096aa <_strtol_l.constprop.0+0x72>
 80096ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096f0:	2f19      	cmp	r7, #25
 80096f2:	d804      	bhi.n	80096fe <_strtol_l.constprop.0+0xc6>
 80096f4:	3c57      	subs	r4, #87	@ 0x57
 80096f6:	e7d8      	b.n	80096aa <_strtol_l.constprop.0+0x72>
 80096f8:	f04f 32ff 	mov.w	r2, #4294967295
 80096fc:	e7e1      	b.n	80096c2 <_strtol_l.constprop.0+0x8a>
 80096fe:	1c53      	adds	r3, r2, #1
 8009700:	d108      	bne.n	8009714 <_strtol_l.constprop.0+0xdc>
 8009702:	2322      	movs	r3, #34	@ 0x22
 8009704:	f8ce 3000 	str.w	r3, [lr]
 8009708:	4660      	mov	r0, ip
 800970a:	f1b8 0f00 	cmp.w	r8, #0
 800970e:	d0a0      	beq.n	8009652 <_strtol_l.constprop.0+0x1a>
 8009710:	1e69      	subs	r1, r5, #1
 8009712:	e006      	b.n	8009722 <_strtol_l.constprop.0+0xea>
 8009714:	b106      	cbz	r6, 8009718 <_strtol_l.constprop.0+0xe0>
 8009716:	4240      	negs	r0, r0
 8009718:	f1b8 0f00 	cmp.w	r8, #0
 800971c:	d099      	beq.n	8009652 <_strtol_l.constprop.0+0x1a>
 800971e:	2a00      	cmp	r2, #0
 8009720:	d1f6      	bne.n	8009710 <_strtol_l.constprop.0+0xd8>
 8009722:	f8c8 1000 	str.w	r1, [r8]
 8009726:	e794      	b.n	8009652 <_strtol_l.constprop.0+0x1a>
 8009728:	0800ab71 	.word	0x0800ab71

0800972c <_strtol_r>:
 800972c:	f7ff bf84 	b.w	8009638 <_strtol_l.constprop.0>

08009730 <__ssputs_r>:
 8009730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	688e      	ldr	r6, [r1, #8]
 8009736:	461f      	mov	r7, r3
 8009738:	42be      	cmp	r6, r7
 800973a:	680b      	ldr	r3, [r1, #0]
 800973c:	4682      	mov	sl, r0
 800973e:	460c      	mov	r4, r1
 8009740:	4690      	mov	r8, r2
 8009742:	d82d      	bhi.n	80097a0 <__ssputs_r+0x70>
 8009744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009748:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800974c:	d026      	beq.n	800979c <__ssputs_r+0x6c>
 800974e:	6965      	ldr	r5, [r4, #20]
 8009750:	6909      	ldr	r1, [r1, #16]
 8009752:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009756:	eba3 0901 	sub.w	r9, r3, r1
 800975a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800975e:	1c7b      	adds	r3, r7, #1
 8009760:	444b      	add	r3, r9
 8009762:	106d      	asrs	r5, r5, #1
 8009764:	429d      	cmp	r5, r3
 8009766:	bf38      	it	cc
 8009768:	461d      	movcc	r5, r3
 800976a:	0553      	lsls	r3, r2, #21
 800976c:	d527      	bpl.n	80097be <__ssputs_r+0x8e>
 800976e:	4629      	mov	r1, r5
 8009770:	f7fe fc70 	bl	8008054 <_malloc_r>
 8009774:	4606      	mov	r6, r0
 8009776:	b360      	cbz	r0, 80097d2 <__ssputs_r+0xa2>
 8009778:	6921      	ldr	r1, [r4, #16]
 800977a:	464a      	mov	r2, r9
 800977c:	f7fd fe01 	bl	8007382 <memcpy>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	6126      	str	r6, [r4, #16]
 800978e:	6165      	str	r5, [r4, #20]
 8009790:	444e      	add	r6, r9
 8009792:	eba5 0509 	sub.w	r5, r5, r9
 8009796:	6026      	str	r6, [r4, #0]
 8009798:	60a5      	str	r5, [r4, #8]
 800979a:	463e      	mov	r6, r7
 800979c:	42be      	cmp	r6, r7
 800979e:	d900      	bls.n	80097a2 <__ssputs_r+0x72>
 80097a0:	463e      	mov	r6, r7
 80097a2:	6820      	ldr	r0, [r4, #0]
 80097a4:	4632      	mov	r2, r6
 80097a6:	4641      	mov	r1, r8
 80097a8:	f000 f9c6 	bl	8009b38 <memmove>
 80097ac:	68a3      	ldr	r3, [r4, #8]
 80097ae:	1b9b      	subs	r3, r3, r6
 80097b0:	60a3      	str	r3, [r4, #8]
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	4433      	add	r3, r6
 80097b6:	6023      	str	r3, [r4, #0]
 80097b8:	2000      	movs	r0, #0
 80097ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097be:	462a      	mov	r2, r5
 80097c0:	f000 fd7b 	bl	800a2ba <_realloc_r>
 80097c4:	4606      	mov	r6, r0
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d1e0      	bne.n	800978c <__ssputs_r+0x5c>
 80097ca:	6921      	ldr	r1, [r4, #16]
 80097cc:	4650      	mov	r0, sl
 80097ce:	f7fe fbcd 	bl	8007f6c <_free_r>
 80097d2:	230c      	movs	r3, #12
 80097d4:	f8ca 3000 	str.w	r3, [sl]
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	e7e9      	b.n	80097ba <__ssputs_r+0x8a>
	...

080097e8 <_svfiprintf_r>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	4698      	mov	r8, r3
 80097ee:	898b      	ldrh	r3, [r1, #12]
 80097f0:	061b      	lsls	r3, r3, #24
 80097f2:	b09d      	sub	sp, #116	@ 0x74
 80097f4:	4607      	mov	r7, r0
 80097f6:	460d      	mov	r5, r1
 80097f8:	4614      	mov	r4, r2
 80097fa:	d510      	bpl.n	800981e <_svfiprintf_r+0x36>
 80097fc:	690b      	ldr	r3, [r1, #16]
 80097fe:	b973      	cbnz	r3, 800981e <_svfiprintf_r+0x36>
 8009800:	2140      	movs	r1, #64	@ 0x40
 8009802:	f7fe fc27 	bl	8008054 <_malloc_r>
 8009806:	6028      	str	r0, [r5, #0]
 8009808:	6128      	str	r0, [r5, #16]
 800980a:	b930      	cbnz	r0, 800981a <_svfiprintf_r+0x32>
 800980c:	230c      	movs	r3, #12
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	b01d      	add	sp, #116	@ 0x74
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	2340      	movs	r3, #64	@ 0x40
 800981c:	616b      	str	r3, [r5, #20]
 800981e:	2300      	movs	r3, #0
 8009820:	9309      	str	r3, [sp, #36]	@ 0x24
 8009822:	2320      	movs	r3, #32
 8009824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009828:	f8cd 800c 	str.w	r8, [sp, #12]
 800982c:	2330      	movs	r3, #48	@ 0x30
 800982e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099cc <_svfiprintf_r+0x1e4>
 8009832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009836:	f04f 0901 	mov.w	r9, #1
 800983a:	4623      	mov	r3, r4
 800983c:	469a      	mov	sl, r3
 800983e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009842:	b10a      	cbz	r2, 8009848 <_svfiprintf_r+0x60>
 8009844:	2a25      	cmp	r2, #37	@ 0x25
 8009846:	d1f9      	bne.n	800983c <_svfiprintf_r+0x54>
 8009848:	ebba 0b04 	subs.w	fp, sl, r4
 800984c:	d00b      	beq.n	8009866 <_svfiprintf_r+0x7e>
 800984e:	465b      	mov	r3, fp
 8009850:	4622      	mov	r2, r4
 8009852:	4629      	mov	r1, r5
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff ff6b 	bl	8009730 <__ssputs_r>
 800985a:	3001      	adds	r0, #1
 800985c:	f000 80a7 	beq.w	80099ae <_svfiprintf_r+0x1c6>
 8009860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009862:	445a      	add	r2, fp
 8009864:	9209      	str	r2, [sp, #36]	@ 0x24
 8009866:	f89a 3000 	ldrb.w	r3, [sl]
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 809f 	beq.w	80099ae <_svfiprintf_r+0x1c6>
 8009870:	2300      	movs	r3, #0
 8009872:	f04f 32ff 	mov.w	r2, #4294967295
 8009876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800987a:	f10a 0a01 	add.w	sl, sl, #1
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	9307      	str	r3, [sp, #28]
 8009882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009886:	931a      	str	r3, [sp, #104]	@ 0x68
 8009888:	4654      	mov	r4, sl
 800988a:	2205      	movs	r2, #5
 800988c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009890:	484e      	ldr	r0, [pc, #312]	@ (80099cc <_svfiprintf_r+0x1e4>)
 8009892:	f7f6 fcd5 	bl	8000240 <memchr>
 8009896:	9a04      	ldr	r2, [sp, #16]
 8009898:	b9d8      	cbnz	r0, 80098d2 <_svfiprintf_r+0xea>
 800989a:	06d0      	lsls	r0, r2, #27
 800989c:	bf44      	itt	mi
 800989e:	2320      	movmi	r3, #32
 80098a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098a4:	0711      	lsls	r1, r2, #28
 80098a6:	bf44      	itt	mi
 80098a8:	232b      	movmi	r3, #43	@ 0x2b
 80098aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098ae:	f89a 3000 	ldrb.w	r3, [sl]
 80098b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80098b4:	d015      	beq.n	80098e2 <_svfiprintf_r+0xfa>
 80098b6:	9a07      	ldr	r2, [sp, #28]
 80098b8:	4654      	mov	r4, sl
 80098ba:	2000      	movs	r0, #0
 80098bc:	f04f 0c0a 	mov.w	ip, #10
 80098c0:	4621      	mov	r1, r4
 80098c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c6:	3b30      	subs	r3, #48	@ 0x30
 80098c8:	2b09      	cmp	r3, #9
 80098ca:	d94b      	bls.n	8009964 <_svfiprintf_r+0x17c>
 80098cc:	b1b0      	cbz	r0, 80098fc <_svfiprintf_r+0x114>
 80098ce:	9207      	str	r2, [sp, #28]
 80098d0:	e014      	b.n	80098fc <_svfiprintf_r+0x114>
 80098d2:	eba0 0308 	sub.w	r3, r0, r8
 80098d6:	fa09 f303 	lsl.w	r3, r9, r3
 80098da:	4313      	orrs	r3, r2
 80098dc:	9304      	str	r3, [sp, #16]
 80098de:	46a2      	mov	sl, r4
 80098e0:	e7d2      	b.n	8009888 <_svfiprintf_r+0xa0>
 80098e2:	9b03      	ldr	r3, [sp, #12]
 80098e4:	1d19      	adds	r1, r3, #4
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	9103      	str	r1, [sp, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	bfbb      	ittet	lt
 80098ee:	425b      	neglt	r3, r3
 80098f0:	f042 0202 	orrlt.w	r2, r2, #2
 80098f4:	9307      	strge	r3, [sp, #28]
 80098f6:	9307      	strlt	r3, [sp, #28]
 80098f8:	bfb8      	it	lt
 80098fa:	9204      	strlt	r2, [sp, #16]
 80098fc:	7823      	ldrb	r3, [r4, #0]
 80098fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009900:	d10a      	bne.n	8009918 <_svfiprintf_r+0x130>
 8009902:	7863      	ldrb	r3, [r4, #1]
 8009904:	2b2a      	cmp	r3, #42	@ 0x2a
 8009906:	d132      	bne.n	800996e <_svfiprintf_r+0x186>
 8009908:	9b03      	ldr	r3, [sp, #12]
 800990a:	1d1a      	adds	r2, r3, #4
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	9203      	str	r2, [sp, #12]
 8009910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009914:	3402      	adds	r4, #2
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099dc <_svfiprintf_r+0x1f4>
 800991c:	7821      	ldrb	r1, [r4, #0]
 800991e:	2203      	movs	r2, #3
 8009920:	4650      	mov	r0, sl
 8009922:	f7f6 fc8d 	bl	8000240 <memchr>
 8009926:	b138      	cbz	r0, 8009938 <_svfiprintf_r+0x150>
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	eba0 000a 	sub.w	r0, r0, sl
 800992e:	2240      	movs	r2, #64	@ 0x40
 8009930:	4082      	lsls	r2, r0
 8009932:	4313      	orrs	r3, r2
 8009934:	3401      	adds	r4, #1
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993c:	4824      	ldr	r0, [pc, #144]	@ (80099d0 <_svfiprintf_r+0x1e8>)
 800993e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009942:	2206      	movs	r2, #6
 8009944:	f7f6 fc7c 	bl	8000240 <memchr>
 8009948:	2800      	cmp	r0, #0
 800994a:	d036      	beq.n	80099ba <_svfiprintf_r+0x1d2>
 800994c:	4b21      	ldr	r3, [pc, #132]	@ (80099d4 <_svfiprintf_r+0x1ec>)
 800994e:	bb1b      	cbnz	r3, 8009998 <_svfiprintf_r+0x1b0>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	3307      	adds	r3, #7
 8009954:	f023 0307 	bic.w	r3, r3, #7
 8009958:	3308      	adds	r3, #8
 800995a:	9303      	str	r3, [sp, #12]
 800995c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800995e:	4433      	add	r3, r6
 8009960:	9309      	str	r3, [sp, #36]	@ 0x24
 8009962:	e76a      	b.n	800983a <_svfiprintf_r+0x52>
 8009964:	fb0c 3202 	mla	r2, ip, r2, r3
 8009968:	460c      	mov	r4, r1
 800996a:	2001      	movs	r0, #1
 800996c:	e7a8      	b.n	80098c0 <_svfiprintf_r+0xd8>
 800996e:	2300      	movs	r3, #0
 8009970:	3401      	adds	r4, #1
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	4619      	mov	r1, r3
 8009976:	f04f 0c0a 	mov.w	ip, #10
 800997a:	4620      	mov	r0, r4
 800997c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009980:	3a30      	subs	r2, #48	@ 0x30
 8009982:	2a09      	cmp	r2, #9
 8009984:	d903      	bls.n	800998e <_svfiprintf_r+0x1a6>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0c6      	beq.n	8009918 <_svfiprintf_r+0x130>
 800998a:	9105      	str	r1, [sp, #20]
 800998c:	e7c4      	b.n	8009918 <_svfiprintf_r+0x130>
 800998e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009992:	4604      	mov	r4, r0
 8009994:	2301      	movs	r3, #1
 8009996:	e7f0      	b.n	800997a <_svfiprintf_r+0x192>
 8009998:	ab03      	add	r3, sp, #12
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	462a      	mov	r2, r5
 800999e:	4b0e      	ldr	r3, [pc, #56]	@ (80099d8 <_svfiprintf_r+0x1f0>)
 80099a0:	a904      	add	r1, sp, #16
 80099a2:	4638      	mov	r0, r7
 80099a4:	f7fc fd94 	bl	80064d0 <_printf_float>
 80099a8:	1c42      	adds	r2, r0, #1
 80099aa:	4606      	mov	r6, r0
 80099ac:	d1d6      	bne.n	800995c <_svfiprintf_r+0x174>
 80099ae:	89ab      	ldrh	r3, [r5, #12]
 80099b0:	065b      	lsls	r3, r3, #25
 80099b2:	f53f af2d 	bmi.w	8009810 <_svfiprintf_r+0x28>
 80099b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099b8:	e72c      	b.n	8009814 <_svfiprintf_r+0x2c>
 80099ba:	ab03      	add	r3, sp, #12
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	462a      	mov	r2, r5
 80099c0:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <_svfiprintf_r+0x1f0>)
 80099c2:	a904      	add	r1, sp, #16
 80099c4:	4638      	mov	r0, r7
 80099c6:	f7fd f80b 	bl	80069e0 <_printf_i>
 80099ca:	e7ed      	b.n	80099a8 <_svfiprintf_r+0x1c0>
 80099cc:	0800ac71 	.word	0x0800ac71
 80099d0:	0800ac7b 	.word	0x0800ac7b
 80099d4:	080064d1 	.word	0x080064d1
 80099d8:	08009731 	.word	0x08009731
 80099dc:	0800ac77 	.word	0x0800ac77

080099e0 <__sflush_r>:
 80099e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	0716      	lsls	r6, r2, #28
 80099ea:	4605      	mov	r5, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	d454      	bmi.n	8009a9a <__sflush_r+0xba>
 80099f0:	684b      	ldr	r3, [r1, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	dc02      	bgt.n	80099fc <__sflush_r+0x1c>
 80099f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dd48      	ble.n	8009a8e <__sflush_r+0xae>
 80099fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099fe:	2e00      	cmp	r6, #0
 8009a00:	d045      	beq.n	8009a8e <__sflush_r+0xae>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a08:	682f      	ldr	r7, [r5, #0]
 8009a0a:	6a21      	ldr	r1, [r4, #32]
 8009a0c:	602b      	str	r3, [r5, #0]
 8009a0e:	d030      	beq.n	8009a72 <__sflush_r+0x92>
 8009a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	0759      	lsls	r1, r3, #29
 8009a16:	d505      	bpl.n	8009a24 <__sflush_r+0x44>
 8009a18:	6863      	ldr	r3, [r4, #4]
 8009a1a:	1ad2      	subs	r2, r2, r3
 8009a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a1e:	b10b      	cbz	r3, 8009a24 <__sflush_r+0x44>
 8009a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	2300      	movs	r3, #0
 8009a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a28:	6a21      	ldr	r1, [r4, #32]
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b0      	blx	r6
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	d106      	bne.n	8009a42 <__sflush_r+0x62>
 8009a34:	6829      	ldr	r1, [r5, #0]
 8009a36:	291d      	cmp	r1, #29
 8009a38:	d82b      	bhi.n	8009a92 <__sflush_r+0xb2>
 8009a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8009ae4 <__sflush_r+0x104>)
 8009a3c:	410a      	asrs	r2, r1
 8009a3e:	07d6      	lsls	r6, r2, #31
 8009a40:	d427      	bmi.n	8009a92 <__sflush_r+0xb2>
 8009a42:	2200      	movs	r2, #0
 8009a44:	6062      	str	r2, [r4, #4]
 8009a46:	04d9      	lsls	r1, r3, #19
 8009a48:	6922      	ldr	r2, [r4, #16]
 8009a4a:	6022      	str	r2, [r4, #0]
 8009a4c:	d504      	bpl.n	8009a58 <__sflush_r+0x78>
 8009a4e:	1c42      	adds	r2, r0, #1
 8009a50:	d101      	bne.n	8009a56 <__sflush_r+0x76>
 8009a52:	682b      	ldr	r3, [r5, #0]
 8009a54:	b903      	cbnz	r3, 8009a58 <__sflush_r+0x78>
 8009a56:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a5a:	602f      	str	r7, [r5, #0]
 8009a5c:	b1b9      	cbz	r1, 8009a8e <__sflush_r+0xae>
 8009a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a62:	4299      	cmp	r1, r3
 8009a64:	d002      	beq.n	8009a6c <__sflush_r+0x8c>
 8009a66:	4628      	mov	r0, r5
 8009a68:	f7fe fa80 	bl	8007f6c <_free_r>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a70:	e00d      	b.n	8009a8e <__sflush_r+0xae>
 8009a72:	2301      	movs	r3, #1
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b0      	blx	r6
 8009a78:	4602      	mov	r2, r0
 8009a7a:	1c50      	adds	r0, r2, #1
 8009a7c:	d1c9      	bne.n	8009a12 <__sflush_r+0x32>
 8009a7e:	682b      	ldr	r3, [r5, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0c6      	beq.n	8009a12 <__sflush_r+0x32>
 8009a84:	2b1d      	cmp	r3, #29
 8009a86:	d001      	beq.n	8009a8c <__sflush_r+0xac>
 8009a88:	2b16      	cmp	r3, #22
 8009a8a:	d11e      	bne.n	8009aca <__sflush_r+0xea>
 8009a8c:	602f      	str	r7, [r5, #0]
 8009a8e:	2000      	movs	r0, #0
 8009a90:	e022      	b.n	8009ad8 <__sflush_r+0xf8>
 8009a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a96:	b21b      	sxth	r3, r3
 8009a98:	e01b      	b.n	8009ad2 <__sflush_r+0xf2>
 8009a9a:	690f      	ldr	r7, [r1, #16]
 8009a9c:	2f00      	cmp	r7, #0
 8009a9e:	d0f6      	beq.n	8009a8e <__sflush_r+0xae>
 8009aa0:	0793      	lsls	r3, r2, #30
 8009aa2:	680e      	ldr	r6, [r1, #0]
 8009aa4:	bf08      	it	eq
 8009aa6:	694b      	ldreq	r3, [r1, #20]
 8009aa8:	600f      	str	r7, [r1, #0]
 8009aaa:	bf18      	it	ne
 8009aac:	2300      	movne	r3, #0
 8009aae:	eba6 0807 	sub.w	r8, r6, r7
 8009ab2:	608b      	str	r3, [r1, #8]
 8009ab4:	f1b8 0f00 	cmp.w	r8, #0
 8009ab8:	dde9      	ble.n	8009a8e <__sflush_r+0xae>
 8009aba:	6a21      	ldr	r1, [r4, #32]
 8009abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009abe:	4643      	mov	r3, r8
 8009ac0:	463a      	mov	r2, r7
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b0      	blx	r6
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	dc08      	bgt.n	8009adc <__sflush_r+0xfc>
 8009aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009adc:	4407      	add	r7, r0
 8009ade:	eba8 0800 	sub.w	r8, r8, r0
 8009ae2:	e7e7      	b.n	8009ab4 <__sflush_r+0xd4>
 8009ae4:	dfbffffe 	.word	0xdfbffffe

08009ae8 <_fflush_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	690b      	ldr	r3, [r1, #16]
 8009aec:	4605      	mov	r5, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	b913      	cbnz	r3, 8009af8 <_fflush_r+0x10>
 8009af2:	2500      	movs	r5, #0
 8009af4:	4628      	mov	r0, r5
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	b118      	cbz	r0, 8009b02 <_fflush_r+0x1a>
 8009afa:	6a03      	ldr	r3, [r0, #32]
 8009afc:	b90b      	cbnz	r3, 8009b02 <_fflush_r+0x1a>
 8009afe:	f7fd fb27 	bl	8007150 <__sinit>
 8009b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0f3      	beq.n	8009af2 <_fflush_r+0xa>
 8009b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b0c:	07d0      	lsls	r0, r2, #31
 8009b0e:	d404      	bmi.n	8009b1a <_fflush_r+0x32>
 8009b10:	0599      	lsls	r1, r3, #22
 8009b12:	d402      	bmi.n	8009b1a <_fflush_r+0x32>
 8009b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b16:	f7fd fc32 	bl	800737e <__retarget_lock_acquire_recursive>
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f7ff ff5f 	bl	80099e0 <__sflush_r>
 8009b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b24:	07da      	lsls	r2, r3, #31
 8009b26:	4605      	mov	r5, r0
 8009b28:	d4e4      	bmi.n	8009af4 <_fflush_r+0xc>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	059b      	lsls	r3, r3, #22
 8009b2e:	d4e1      	bmi.n	8009af4 <_fflush_r+0xc>
 8009b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b32:	f7fd fc25 	bl	8007380 <__retarget_lock_release_recursive>
 8009b36:	e7dd      	b.n	8009af4 <_fflush_r+0xc>

08009b38 <memmove>:
 8009b38:	4288      	cmp	r0, r1
 8009b3a:	b510      	push	{r4, lr}
 8009b3c:	eb01 0402 	add.w	r4, r1, r2
 8009b40:	d902      	bls.n	8009b48 <memmove+0x10>
 8009b42:	4284      	cmp	r4, r0
 8009b44:	4623      	mov	r3, r4
 8009b46:	d807      	bhi.n	8009b58 <memmove+0x20>
 8009b48:	1e43      	subs	r3, r0, #1
 8009b4a:	42a1      	cmp	r1, r4
 8009b4c:	d008      	beq.n	8009b60 <memmove+0x28>
 8009b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b56:	e7f8      	b.n	8009b4a <memmove+0x12>
 8009b58:	4402      	add	r2, r0
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	428a      	cmp	r2, r1
 8009b5e:	d100      	bne.n	8009b62 <memmove+0x2a>
 8009b60:	bd10      	pop	{r4, pc}
 8009b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b6a:	e7f7      	b.n	8009b5c <memmove+0x24>

08009b6c <strncmp>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	b16a      	cbz	r2, 8009b8c <strncmp+0x20>
 8009b70:	3901      	subs	r1, #1
 8009b72:	1884      	adds	r4, r0, r2
 8009b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d103      	bne.n	8009b88 <strncmp+0x1c>
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d001      	beq.n	8009b88 <strncmp+0x1c>
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	d1f5      	bne.n	8009b74 <strncmp+0x8>
 8009b88:	1ad0      	subs	r0, r2, r3
 8009b8a:	bd10      	pop	{r4, pc}
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	e7fc      	b.n	8009b8a <strncmp+0x1e>

08009b90 <_sbrk_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d06      	ldr	r5, [pc, #24]	@ (8009bac <_sbrk_r+0x1c>)
 8009b94:	2300      	movs	r3, #0
 8009b96:	4604      	mov	r4, r0
 8009b98:	4608      	mov	r0, r1
 8009b9a:	602b      	str	r3, [r5, #0]
 8009b9c:	f7f7 fabe 	bl	800111c <_sbrk>
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d102      	bne.n	8009baa <_sbrk_r+0x1a>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <_sbrk_r+0x1a>
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	20000abc 	.word	0x20000abc

08009bb0 <nan>:
 8009bb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009bb8 <nan+0x8>
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	7ff80000 	.word	0x7ff80000

08009bc0 <__assert_func>:
 8009bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bc2:	4614      	mov	r4, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4b09      	ldr	r3, [pc, #36]	@ (8009bec <__assert_func+0x2c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4605      	mov	r5, r0
 8009bcc:	68d8      	ldr	r0, [r3, #12]
 8009bce:	b954      	cbnz	r4, 8009be6 <__assert_func+0x26>
 8009bd0:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <__assert_func+0x30>)
 8009bd2:	461c      	mov	r4, r3
 8009bd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bd8:	9100      	str	r1, [sp, #0]
 8009bda:	462b      	mov	r3, r5
 8009bdc:	4905      	ldr	r1, [pc, #20]	@ (8009bf4 <__assert_func+0x34>)
 8009bde:	f000 fba7 	bl	800a330 <fiprintf>
 8009be2:	f000 fbb7 	bl	800a354 <abort>
 8009be6:	4b04      	ldr	r3, [pc, #16]	@ (8009bf8 <__assert_func+0x38>)
 8009be8:	e7f4      	b.n	8009bd4 <__assert_func+0x14>
 8009bea:	bf00      	nop
 8009bec:	200002b4 	.word	0x200002b4
 8009bf0:	0800acc5 	.word	0x0800acc5
 8009bf4:	0800ac97 	.word	0x0800ac97
 8009bf8:	0800ac8a 	.word	0x0800ac8a

08009bfc <_calloc_r>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	fba1 5402 	umull	r5, r4, r1, r2
 8009c02:	b93c      	cbnz	r4, 8009c14 <_calloc_r+0x18>
 8009c04:	4629      	mov	r1, r5
 8009c06:	f7fe fa25 	bl	8008054 <_malloc_r>
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	b928      	cbnz	r0, 8009c1a <_calloc_r+0x1e>
 8009c0e:	2600      	movs	r6, #0
 8009c10:	4630      	mov	r0, r6
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	220c      	movs	r2, #12
 8009c16:	6002      	str	r2, [r0, #0]
 8009c18:	e7f9      	b.n	8009c0e <_calloc_r+0x12>
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	f7fd fb30 	bl	8007282 <memset>
 8009c22:	e7f5      	b.n	8009c10 <_calloc_r+0x14>

08009c24 <rshift>:
 8009c24:	6903      	ldr	r3, [r0, #16]
 8009c26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c32:	f100 0414 	add.w	r4, r0, #20
 8009c36:	dd45      	ble.n	8009cc4 <rshift+0xa0>
 8009c38:	f011 011f 	ands.w	r1, r1, #31
 8009c3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c44:	d10c      	bne.n	8009c60 <rshift+0x3c>
 8009c46:	f100 0710 	add.w	r7, r0, #16
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	42b1      	cmp	r1, r6
 8009c4e:	d334      	bcc.n	8009cba <rshift+0x96>
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	1eea      	subs	r2, r5, #3
 8009c56:	4296      	cmp	r6, r2
 8009c58:	bf38      	it	cc
 8009c5a:	2300      	movcc	r3, #0
 8009c5c:	4423      	add	r3, r4
 8009c5e:	e015      	b.n	8009c8c <rshift+0x68>
 8009c60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c64:	f1c1 0820 	rsb	r8, r1, #32
 8009c68:	40cf      	lsrs	r7, r1
 8009c6a:	f105 0e04 	add.w	lr, r5, #4
 8009c6e:	46a1      	mov	r9, r4
 8009c70:	4576      	cmp	r6, lr
 8009c72:	46f4      	mov	ip, lr
 8009c74:	d815      	bhi.n	8009ca2 <rshift+0x7e>
 8009c76:	1a9a      	subs	r2, r3, r2
 8009c78:	0092      	lsls	r2, r2, #2
 8009c7a:	3a04      	subs	r2, #4
 8009c7c:	3501      	adds	r5, #1
 8009c7e:	42ae      	cmp	r6, r5
 8009c80:	bf38      	it	cc
 8009c82:	2200      	movcc	r2, #0
 8009c84:	18a3      	adds	r3, r4, r2
 8009c86:	50a7      	str	r7, [r4, r2]
 8009c88:	b107      	cbz	r7, 8009c8c <rshift+0x68>
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	1b1a      	subs	r2, r3, r4
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c94:	bf08      	it	eq
 8009c96:	2300      	moveq	r3, #0
 8009c98:	6102      	str	r2, [r0, #16]
 8009c9a:	bf08      	it	eq
 8009c9c:	6143      	streq	r3, [r0, #20]
 8009c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ca2:	f8dc c000 	ldr.w	ip, [ip]
 8009ca6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009caa:	ea4c 0707 	orr.w	r7, ip, r7
 8009cae:	f849 7b04 	str.w	r7, [r9], #4
 8009cb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cb6:	40cf      	lsrs	r7, r1
 8009cb8:	e7da      	b.n	8009c70 <rshift+0x4c>
 8009cba:	f851 cb04 	ldr.w	ip, [r1], #4
 8009cbe:	f847 cf04 	str.w	ip, [r7, #4]!
 8009cc2:	e7c3      	b.n	8009c4c <rshift+0x28>
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	e7e1      	b.n	8009c8c <rshift+0x68>

08009cc8 <__hexdig_fun>:
 8009cc8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009ccc:	2b09      	cmp	r3, #9
 8009cce:	d802      	bhi.n	8009cd6 <__hexdig_fun+0xe>
 8009cd0:	3820      	subs	r0, #32
 8009cd2:	b2c0      	uxtb	r0, r0
 8009cd4:	4770      	bx	lr
 8009cd6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009cda:	2b05      	cmp	r3, #5
 8009cdc:	d801      	bhi.n	8009ce2 <__hexdig_fun+0x1a>
 8009cde:	3847      	subs	r0, #71	@ 0x47
 8009ce0:	e7f7      	b.n	8009cd2 <__hexdig_fun+0xa>
 8009ce2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ce6:	2b05      	cmp	r3, #5
 8009ce8:	d801      	bhi.n	8009cee <__hexdig_fun+0x26>
 8009cea:	3827      	subs	r0, #39	@ 0x27
 8009cec:	e7f1      	b.n	8009cd2 <__hexdig_fun+0xa>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	4770      	bx	lr
	...

08009cf4 <__gethex>:
 8009cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	468a      	mov	sl, r1
 8009cfc:	9302      	str	r3, [sp, #8]
 8009cfe:	680b      	ldr	r3, [r1, #0]
 8009d00:	9001      	str	r0, [sp, #4]
 8009d02:	4690      	mov	r8, r2
 8009d04:	1c9c      	adds	r4, r3, #2
 8009d06:	46a1      	mov	r9, r4
 8009d08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d0c:	2830      	cmp	r0, #48	@ 0x30
 8009d0e:	d0fa      	beq.n	8009d06 <__gethex+0x12>
 8009d10:	eba9 0303 	sub.w	r3, r9, r3
 8009d14:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d18:	f7ff ffd6 	bl	8009cc8 <__hexdig_fun>
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d168      	bne.n	8009df4 <__gethex+0x100>
 8009d22:	49a0      	ldr	r1, [pc, #640]	@ (8009fa4 <__gethex+0x2b0>)
 8009d24:	2201      	movs	r2, #1
 8009d26:	4648      	mov	r0, r9
 8009d28:	f7ff ff20 	bl	8009b6c <strncmp>
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d167      	bne.n	8009e02 <__gethex+0x10e>
 8009d32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009d36:	4626      	mov	r6, r4
 8009d38:	f7ff ffc6 	bl	8009cc8 <__hexdig_fun>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d062      	beq.n	8009e06 <__gethex+0x112>
 8009d40:	4623      	mov	r3, r4
 8009d42:	7818      	ldrb	r0, [r3, #0]
 8009d44:	2830      	cmp	r0, #48	@ 0x30
 8009d46:	4699      	mov	r9, r3
 8009d48:	f103 0301 	add.w	r3, r3, #1
 8009d4c:	d0f9      	beq.n	8009d42 <__gethex+0x4e>
 8009d4e:	f7ff ffbb 	bl	8009cc8 <__hexdig_fun>
 8009d52:	fab0 f580 	clz	r5, r0
 8009d56:	096d      	lsrs	r5, r5, #5
 8009d58:	f04f 0b01 	mov.w	fp, #1
 8009d5c:	464a      	mov	r2, r9
 8009d5e:	4616      	mov	r6, r2
 8009d60:	3201      	adds	r2, #1
 8009d62:	7830      	ldrb	r0, [r6, #0]
 8009d64:	f7ff ffb0 	bl	8009cc8 <__hexdig_fun>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d1f8      	bne.n	8009d5e <__gethex+0x6a>
 8009d6c:	498d      	ldr	r1, [pc, #564]	@ (8009fa4 <__gethex+0x2b0>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7ff fefb 	bl	8009b6c <strncmp>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d13f      	bne.n	8009dfa <__gethex+0x106>
 8009d7a:	b944      	cbnz	r4, 8009d8e <__gethex+0x9a>
 8009d7c:	1c74      	adds	r4, r6, #1
 8009d7e:	4622      	mov	r2, r4
 8009d80:	4616      	mov	r6, r2
 8009d82:	3201      	adds	r2, #1
 8009d84:	7830      	ldrb	r0, [r6, #0]
 8009d86:	f7ff ff9f 	bl	8009cc8 <__hexdig_fun>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d1f8      	bne.n	8009d80 <__gethex+0x8c>
 8009d8e:	1ba4      	subs	r4, r4, r6
 8009d90:	00a7      	lsls	r7, r4, #2
 8009d92:	7833      	ldrb	r3, [r6, #0]
 8009d94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d98:	2b50      	cmp	r3, #80	@ 0x50
 8009d9a:	d13e      	bne.n	8009e1a <__gethex+0x126>
 8009d9c:	7873      	ldrb	r3, [r6, #1]
 8009d9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009da0:	d033      	beq.n	8009e0a <__gethex+0x116>
 8009da2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009da4:	d034      	beq.n	8009e10 <__gethex+0x11c>
 8009da6:	1c71      	adds	r1, r6, #1
 8009da8:	2400      	movs	r4, #0
 8009daa:	7808      	ldrb	r0, [r1, #0]
 8009dac:	f7ff ff8c 	bl	8009cc8 <__hexdig_fun>
 8009db0:	1e43      	subs	r3, r0, #1
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b18      	cmp	r3, #24
 8009db6:	d830      	bhi.n	8009e1a <__gethex+0x126>
 8009db8:	f1a0 0210 	sub.w	r2, r0, #16
 8009dbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009dc0:	f7ff ff82 	bl	8009cc8 <__hexdig_fun>
 8009dc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009dc8:	fa5f fc8c 	uxtb.w	ip, ip
 8009dcc:	f1bc 0f18 	cmp.w	ip, #24
 8009dd0:	f04f 030a 	mov.w	r3, #10
 8009dd4:	d91e      	bls.n	8009e14 <__gethex+0x120>
 8009dd6:	b104      	cbz	r4, 8009dda <__gethex+0xe6>
 8009dd8:	4252      	negs	r2, r2
 8009dda:	4417      	add	r7, r2
 8009ddc:	f8ca 1000 	str.w	r1, [sl]
 8009de0:	b1ed      	cbz	r5, 8009e1e <__gethex+0x12a>
 8009de2:	f1bb 0f00 	cmp.w	fp, #0
 8009de6:	bf0c      	ite	eq
 8009de8:	2506      	moveq	r5, #6
 8009dea:	2500      	movne	r5, #0
 8009dec:	4628      	mov	r0, r5
 8009dee:	b005      	add	sp, #20
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df4:	2500      	movs	r5, #0
 8009df6:	462c      	mov	r4, r5
 8009df8:	e7b0      	b.n	8009d5c <__gethex+0x68>
 8009dfa:	2c00      	cmp	r4, #0
 8009dfc:	d1c7      	bne.n	8009d8e <__gethex+0x9a>
 8009dfe:	4627      	mov	r7, r4
 8009e00:	e7c7      	b.n	8009d92 <__gethex+0x9e>
 8009e02:	464e      	mov	r6, r9
 8009e04:	462f      	mov	r7, r5
 8009e06:	2501      	movs	r5, #1
 8009e08:	e7c3      	b.n	8009d92 <__gethex+0x9e>
 8009e0a:	2400      	movs	r4, #0
 8009e0c:	1cb1      	adds	r1, r6, #2
 8009e0e:	e7cc      	b.n	8009daa <__gethex+0xb6>
 8009e10:	2401      	movs	r4, #1
 8009e12:	e7fb      	b.n	8009e0c <__gethex+0x118>
 8009e14:	fb03 0002 	mla	r0, r3, r2, r0
 8009e18:	e7ce      	b.n	8009db8 <__gethex+0xc4>
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	e7de      	b.n	8009ddc <__gethex+0xe8>
 8009e1e:	eba6 0309 	sub.w	r3, r6, r9
 8009e22:	3b01      	subs	r3, #1
 8009e24:	4629      	mov	r1, r5
 8009e26:	2b07      	cmp	r3, #7
 8009e28:	dc0a      	bgt.n	8009e40 <__gethex+0x14c>
 8009e2a:	9801      	ldr	r0, [sp, #4]
 8009e2c:	f7fe f99e 	bl	800816c <_Balloc>
 8009e30:	4604      	mov	r4, r0
 8009e32:	b940      	cbnz	r0, 8009e46 <__gethex+0x152>
 8009e34:	4b5c      	ldr	r3, [pc, #368]	@ (8009fa8 <__gethex+0x2b4>)
 8009e36:	4602      	mov	r2, r0
 8009e38:	21e4      	movs	r1, #228	@ 0xe4
 8009e3a:	485c      	ldr	r0, [pc, #368]	@ (8009fac <__gethex+0x2b8>)
 8009e3c:	f7ff fec0 	bl	8009bc0 <__assert_func>
 8009e40:	3101      	adds	r1, #1
 8009e42:	105b      	asrs	r3, r3, #1
 8009e44:	e7ef      	b.n	8009e26 <__gethex+0x132>
 8009e46:	f100 0a14 	add.w	sl, r0, #20
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	4655      	mov	r5, sl
 8009e4e:	469b      	mov	fp, r3
 8009e50:	45b1      	cmp	r9, r6
 8009e52:	d337      	bcc.n	8009ec4 <__gethex+0x1d0>
 8009e54:	f845 bb04 	str.w	fp, [r5], #4
 8009e58:	eba5 050a 	sub.w	r5, r5, sl
 8009e5c:	10ad      	asrs	r5, r5, #2
 8009e5e:	6125      	str	r5, [r4, #16]
 8009e60:	4658      	mov	r0, fp
 8009e62:	f7fe fa75 	bl	8008350 <__hi0bits>
 8009e66:	016d      	lsls	r5, r5, #5
 8009e68:	f8d8 6000 	ldr.w	r6, [r8]
 8009e6c:	1a2d      	subs	r5, r5, r0
 8009e6e:	42b5      	cmp	r5, r6
 8009e70:	dd54      	ble.n	8009f1c <__gethex+0x228>
 8009e72:	1bad      	subs	r5, r5, r6
 8009e74:	4629      	mov	r1, r5
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7fe fe06 	bl	8008a88 <__any_on>
 8009e7c:	4681      	mov	r9, r0
 8009e7e:	b178      	cbz	r0, 8009ea0 <__gethex+0x1ac>
 8009e80:	1e6b      	subs	r3, r5, #1
 8009e82:	1159      	asrs	r1, r3, #5
 8009e84:	f003 021f 	and.w	r2, r3, #31
 8009e88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e8c:	f04f 0901 	mov.w	r9, #1
 8009e90:	fa09 f202 	lsl.w	r2, r9, r2
 8009e94:	420a      	tst	r2, r1
 8009e96:	d003      	beq.n	8009ea0 <__gethex+0x1ac>
 8009e98:	454b      	cmp	r3, r9
 8009e9a:	dc36      	bgt.n	8009f0a <__gethex+0x216>
 8009e9c:	f04f 0902 	mov.w	r9, #2
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f7ff febe 	bl	8009c24 <rshift>
 8009ea8:	442f      	add	r7, r5
 8009eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eae:	42bb      	cmp	r3, r7
 8009eb0:	da42      	bge.n	8009f38 <__gethex+0x244>
 8009eb2:	9801      	ldr	r0, [sp, #4]
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	f7fe f999 	bl	80081ec <_Bfree>
 8009eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	25a3      	movs	r5, #163	@ 0xa3
 8009ec2:	e793      	b.n	8009dec <__gethex+0xf8>
 8009ec4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009ec8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009eca:	d012      	beq.n	8009ef2 <__gethex+0x1fe>
 8009ecc:	2b20      	cmp	r3, #32
 8009ece:	d104      	bne.n	8009eda <__gethex+0x1e6>
 8009ed0:	f845 bb04 	str.w	fp, [r5], #4
 8009ed4:	f04f 0b00 	mov.w	fp, #0
 8009ed8:	465b      	mov	r3, fp
 8009eda:	7830      	ldrb	r0, [r6, #0]
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	f7ff fef3 	bl	8009cc8 <__hexdig_fun>
 8009ee2:	9b03      	ldr	r3, [sp, #12]
 8009ee4:	f000 000f 	and.w	r0, r0, #15
 8009ee8:	4098      	lsls	r0, r3
 8009eea:	ea4b 0b00 	orr.w	fp, fp, r0
 8009eee:	3304      	adds	r3, #4
 8009ef0:	e7ae      	b.n	8009e50 <__gethex+0x15c>
 8009ef2:	45b1      	cmp	r9, r6
 8009ef4:	d8ea      	bhi.n	8009ecc <__gethex+0x1d8>
 8009ef6:	492b      	ldr	r1, [pc, #172]	@ (8009fa4 <__gethex+0x2b0>)
 8009ef8:	9303      	str	r3, [sp, #12]
 8009efa:	2201      	movs	r2, #1
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff fe35 	bl	8009b6c <strncmp>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1e1      	bne.n	8009ecc <__gethex+0x1d8>
 8009f08:	e7a2      	b.n	8009e50 <__gethex+0x15c>
 8009f0a:	1ea9      	subs	r1, r5, #2
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f7fe fdbb 	bl	8008a88 <__any_on>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d0c2      	beq.n	8009e9c <__gethex+0x1a8>
 8009f16:	f04f 0903 	mov.w	r9, #3
 8009f1a:	e7c1      	b.n	8009ea0 <__gethex+0x1ac>
 8009f1c:	da09      	bge.n	8009f32 <__gethex+0x23e>
 8009f1e:	1b75      	subs	r5, r6, r5
 8009f20:	4621      	mov	r1, r4
 8009f22:	9801      	ldr	r0, [sp, #4]
 8009f24:	462a      	mov	r2, r5
 8009f26:	f7fe fb79 	bl	800861c <__lshift>
 8009f2a:	1b7f      	subs	r7, r7, r5
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	f100 0a14 	add.w	sl, r0, #20
 8009f32:	f04f 0900 	mov.w	r9, #0
 8009f36:	e7b8      	b.n	8009eaa <__gethex+0x1b6>
 8009f38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f3c:	42bd      	cmp	r5, r7
 8009f3e:	dd6f      	ble.n	800a020 <__gethex+0x32c>
 8009f40:	1bed      	subs	r5, r5, r7
 8009f42:	42ae      	cmp	r6, r5
 8009f44:	dc34      	bgt.n	8009fb0 <__gethex+0x2bc>
 8009f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d022      	beq.n	8009f94 <__gethex+0x2a0>
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d024      	beq.n	8009f9c <__gethex+0x2a8>
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d115      	bne.n	8009f82 <__gethex+0x28e>
 8009f56:	42ae      	cmp	r6, r5
 8009f58:	d113      	bne.n	8009f82 <__gethex+0x28e>
 8009f5a:	2e01      	cmp	r6, #1
 8009f5c:	d10b      	bne.n	8009f76 <__gethex+0x282>
 8009f5e:	9a02      	ldr	r2, [sp, #8]
 8009f60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	2301      	movs	r3, #1
 8009f68:	6123      	str	r3, [r4, #16]
 8009f6a:	f8ca 3000 	str.w	r3, [sl]
 8009f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f70:	2562      	movs	r5, #98	@ 0x62
 8009f72:	601c      	str	r4, [r3, #0]
 8009f74:	e73a      	b.n	8009dec <__gethex+0xf8>
 8009f76:	1e71      	subs	r1, r6, #1
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f7fe fd85 	bl	8008a88 <__any_on>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d1ed      	bne.n	8009f5e <__gethex+0x26a>
 8009f82:	9801      	ldr	r0, [sp, #4]
 8009f84:	4621      	mov	r1, r4
 8009f86:	f7fe f931 	bl	80081ec <_Bfree>
 8009f8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	2550      	movs	r5, #80	@ 0x50
 8009f92:	e72b      	b.n	8009dec <__gethex+0xf8>
 8009f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f3      	bne.n	8009f82 <__gethex+0x28e>
 8009f9a:	e7e0      	b.n	8009f5e <__gethex+0x26a>
 8009f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1dd      	bne.n	8009f5e <__gethex+0x26a>
 8009fa2:	e7ee      	b.n	8009f82 <__gethex+0x28e>
 8009fa4:	0800ab18 	.word	0x0800ab18
 8009fa8:	0800a9ad 	.word	0x0800a9ad
 8009fac:	0800acc6 	.word	0x0800acc6
 8009fb0:	1e6f      	subs	r7, r5, #1
 8009fb2:	f1b9 0f00 	cmp.w	r9, #0
 8009fb6:	d130      	bne.n	800a01a <__gethex+0x326>
 8009fb8:	b127      	cbz	r7, 8009fc4 <__gethex+0x2d0>
 8009fba:	4639      	mov	r1, r7
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7fe fd63 	bl	8008a88 <__any_on>
 8009fc2:	4681      	mov	r9, r0
 8009fc4:	117a      	asrs	r2, r7, #5
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009fcc:	f007 071f 	and.w	r7, r7, #31
 8009fd0:	40bb      	lsls	r3, r7
 8009fd2:	4213      	tst	r3, r2
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	bf18      	it	ne
 8009fda:	f049 0902 	orrne.w	r9, r9, #2
 8009fde:	f7ff fe21 	bl	8009c24 <rshift>
 8009fe2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009fe6:	1b76      	subs	r6, r6, r5
 8009fe8:	2502      	movs	r5, #2
 8009fea:	f1b9 0f00 	cmp.w	r9, #0
 8009fee:	d047      	beq.n	800a080 <__gethex+0x38c>
 8009ff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d015      	beq.n	800a024 <__gethex+0x330>
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d017      	beq.n	800a02c <__gethex+0x338>
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d109      	bne.n	800a014 <__gethex+0x320>
 800a000:	f019 0f02 	tst.w	r9, #2
 800a004:	d006      	beq.n	800a014 <__gethex+0x320>
 800a006:	f8da 3000 	ldr.w	r3, [sl]
 800a00a:	ea49 0903 	orr.w	r9, r9, r3
 800a00e:	f019 0f01 	tst.w	r9, #1
 800a012:	d10e      	bne.n	800a032 <__gethex+0x33e>
 800a014:	f045 0510 	orr.w	r5, r5, #16
 800a018:	e032      	b.n	800a080 <__gethex+0x38c>
 800a01a:	f04f 0901 	mov.w	r9, #1
 800a01e:	e7d1      	b.n	8009fc4 <__gethex+0x2d0>
 800a020:	2501      	movs	r5, #1
 800a022:	e7e2      	b.n	8009fea <__gethex+0x2f6>
 800a024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a026:	f1c3 0301 	rsb	r3, r3, #1
 800a02a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f0      	beq.n	800a014 <__gethex+0x320>
 800a032:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a036:	f104 0314 	add.w	r3, r4, #20
 800a03a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a03e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a042:	f04f 0c00 	mov.w	ip, #0
 800a046:	4618      	mov	r0, r3
 800a048:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a050:	d01b      	beq.n	800a08a <__gethex+0x396>
 800a052:	3201      	adds	r2, #1
 800a054:	6002      	str	r2, [r0, #0]
 800a056:	2d02      	cmp	r5, #2
 800a058:	f104 0314 	add.w	r3, r4, #20
 800a05c:	d13c      	bne.n	800a0d8 <__gethex+0x3e4>
 800a05e:	f8d8 2000 	ldr.w	r2, [r8]
 800a062:	3a01      	subs	r2, #1
 800a064:	42b2      	cmp	r2, r6
 800a066:	d109      	bne.n	800a07c <__gethex+0x388>
 800a068:	1171      	asrs	r1, r6, #5
 800a06a:	2201      	movs	r2, #1
 800a06c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a070:	f006 061f 	and.w	r6, r6, #31
 800a074:	fa02 f606 	lsl.w	r6, r2, r6
 800a078:	421e      	tst	r6, r3
 800a07a:	d13a      	bne.n	800a0f2 <__gethex+0x3fe>
 800a07c:	f045 0520 	orr.w	r5, r5, #32
 800a080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a082:	601c      	str	r4, [r3, #0]
 800a084:	9b02      	ldr	r3, [sp, #8]
 800a086:	601f      	str	r7, [r3, #0]
 800a088:	e6b0      	b.n	8009dec <__gethex+0xf8>
 800a08a:	4299      	cmp	r1, r3
 800a08c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a090:	d8d9      	bhi.n	800a046 <__gethex+0x352>
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	459b      	cmp	fp, r3
 800a096:	db17      	blt.n	800a0c8 <__gethex+0x3d4>
 800a098:	6861      	ldr	r1, [r4, #4]
 800a09a:	9801      	ldr	r0, [sp, #4]
 800a09c:	3101      	adds	r1, #1
 800a09e:	f7fe f865 	bl	800816c <_Balloc>
 800a0a2:	4681      	mov	r9, r0
 800a0a4:	b918      	cbnz	r0, 800a0ae <__gethex+0x3ba>
 800a0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a110 <__gethex+0x41c>)
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	2184      	movs	r1, #132	@ 0x84
 800a0ac:	e6c5      	b.n	8009e3a <__gethex+0x146>
 800a0ae:	6922      	ldr	r2, [r4, #16]
 800a0b0:	3202      	adds	r2, #2
 800a0b2:	f104 010c 	add.w	r1, r4, #12
 800a0b6:	0092      	lsls	r2, r2, #2
 800a0b8:	300c      	adds	r0, #12
 800a0ba:	f7fd f962 	bl	8007382 <memcpy>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	9801      	ldr	r0, [sp, #4]
 800a0c2:	f7fe f893 	bl	80081ec <_Bfree>
 800a0c6:	464c      	mov	r4, r9
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	1c5a      	adds	r2, r3, #1
 800a0cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0d0:	6122      	str	r2, [r4, #16]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	615a      	str	r2, [r3, #20]
 800a0d6:	e7be      	b.n	800a056 <__gethex+0x362>
 800a0d8:	6922      	ldr	r2, [r4, #16]
 800a0da:	455a      	cmp	r2, fp
 800a0dc:	dd0b      	ble.n	800a0f6 <__gethex+0x402>
 800a0de:	2101      	movs	r1, #1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f7ff fd9f 	bl	8009c24 <rshift>
 800a0e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ea:	3701      	adds	r7, #1
 800a0ec:	42bb      	cmp	r3, r7
 800a0ee:	f6ff aee0 	blt.w	8009eb2 <__gethex+0x1be>
 800a0f2:	2501      	movs	r5, #1
 800a0f4:	e7c2      	b.n	800a07c <__gethex+0x388>
 800a0f6:	f016 061f 	ands.w	r6, r6, #31
 800a0fa:	d0fa      	beq.n	800a0f2 <__gethex+0x3fe>
 800a0fc:	4453      	add	r3, sl
 800a0fe:	f1c6 0620 	rsb	r6, r6, #32
 800a102:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a106:	f7fe f923 	bl	8008350 <__hi0bits>
 800a10a:	42b0      	cmp	r0, r6
 800a10c:	dbe7      	blt.n	800a0de <__gethex+0x3ea>
 800a10e:	e7f0      	b.n	800a0f2 <__gethex+0x3fe>
 800a110:	0800a9ad 	.word	0x0800a9ad

0800a114 <L_shift>:
 800a114:	f1c2 0208 	rsb	r2, r2, #8
 800a118:	0092      	lsls	r2, r2, #2
 800a11a:	b570      	push	{r4, r5, r6, lr}
 800a11c:	f1c2 0620 	rsb	r6, r2, #32
 800a120:	6843      	ldr	r3, [r0, #4]
 800a122:	6804      	ldr	r4, [r0, #0]
 800a124:	fa03 f506 	lsl.w	r5, r3, r6
 800a128:	432c      	orrs	r4, r5
 800a12a:	40d3      	lsrs	r3, r2
 800a12c:	6004      	str	r4, [r0, #0]
 800a12e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a132:	4288      	cmp	r0, r1
 800a134:	d3f4      	bcc.n	800a120 <L_shift+0xc>
 800a136:	bd70      	pop	{r4, r5, r6, pc}

0800a138 <__match>:
 800a138:	b530      	push	{r4, r5, lr}
 800a13a:	6803      	ldr	r3, [r0, #0]
 800a13c:	3301      	adds	r3, #1
 800a13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a142:	b914      	cbnz	r4, 800a14a <__match+0x12>
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	2001      	movs	r0, #1
 800a148:	bd30      	pop	{r4, r5, pc}
 800a14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a152:	2d19      	cmp	r5, #25
 800a154:	bf98      	it	ls
 800a156:	3220      	addls	r2, #32
 800a158:	42a2      	cmp	r2, r4
 800a15a:	d0f0      	beq.n	800a13e <__match+0x6>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e7f3      	b.n	800a148 <__match+0x10>

0800a160 <__hexnan>:
 800a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	680b      	ldr	r3, [r1, #0]
 800a166:	6801      	ldr	r1, [r0, #0]
 800a168:	115e      	asrs	r6, r3, #5
 800a16a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a16e:	f013 031f 	ands.w	r3, r3, #31
 800a172:	b087      	sub	sp, #28
 800a174:	bf18      	it	ne
 800a176:	3604      	addne	r6, #4
 800a178:	2500      	movs	r5, #0
 800a17a:	1f37      	subs	r7, r6, #4
 800a17c:	4682      	mov	sl, r0
 800a17e:	4690      	mov	r8, r2
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	f846 5c04 	str.w	r5, [r6, #-4]
 800a186:	46b9      	mov	r9, r7
 800a188:	463c      	mov	r4, r7
 800a18a:	9502      	str	r5, [sp, #8]
 800a18c:	46ab      	mov	fp, r5
 800a18e:	784a      	ldrb	r2, [r1, #1]
 800a190:	1c4b      	adds	r3, r1, #1
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	b342      	cbz	r2, 800a1e8 <__hexnan+0x88>
 800a196:	4610      	mov	r0, r2
 800a198:	9105      	str	r1, [sp, #20]
 800a19a:	9204      	str	r2, [sp, #16]
 800a19c:	f7ff fd94 	bl	8009cc8 <__hexdig_fun>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d151      	bne.n	800a248 <__hexnan+0xe8>
 800a1a4:	9a04      	ldr	r2, [sp, #16]
 800a1a6:	9905      	ldr	r1, [sp, #20]
 800a1a8:	2a20      	cmp	r2, #32
 800a1aa:	d818      	bhi.n	800a1de <__hexnan+0x7e>
 800a1ac:	9b02      	ldr	r3, [sp, #8]
 800a1ae:	459b      	cmp	fp, r3
 800a1b0:	dd13      	ble.n	800a1da <__hexnan+0x7a>
 800a1b2:	454c      	cmp	r4, r9
 800a1b4:	d206      	bcs.n	800a1c4 <__hexnan+0x64>
 800a1b6:	2d07      	cmp	r5, #7
 800a1b8:	dc04      	bgt.n	800a1c4 <__hexnan+0x64>
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4649      	mov	r1, r9
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7ff ffa8 	bl	800a114 <L_shift>
 800a1c4:	4544      	cmp	r4, r8
 800a1c6:	d952      	bls.n	800a26e <__hexnan+0x10e>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f1a4 0904 	sub.w	r9, r4, #4
 800a1ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1d2:	f8cd b008 	str.w	fp, [sp, #8]
 800a1d6:	464c      	mov	r4, r9
 800a1d8:	461d      	mov	r5, r3
 800a1da:	9903      	ldr	r1, [sp, #12]
 800a1dc:	e7d7      	b.n	800a18e <__hexnan+0x2e>
 800a1de:	2a29      	cmp	r2, #41	@ 0x29
 800a1e0:	d157      	bne.n	800a292 <__hexnan+0x132>
 800a1e2:	3102      	adds	r1, #2
 800a1e4:	f8ca 1000 	str.w	r1, [sl]
 800a1e8:	f1bb 0f00 	cmp.w	fp, #0
 800a1ec:	d051      	beq.n	800a292 <__hexnan+0x132>
 800a1ee:	454c      	cmp	r4, r9
 800a1f0:	d206      	bcs.n	800a200 <__hexnan+0xa0>
 800a1f2:	2d07      	cmp	r5, #7
 800a1f4:	dc04      	bgt.n	800a200 <__hexnan+0xa0>
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff ff8a 	bl	800a114 <L_shift>
 800a200:	4544      	cmp	r4, r8
 800a202:	d936      	bls.n	800a272 <__hexnan+0x112>
 800a204:	f1a8 0204 	sub.w	r2, r8, #4
 800a208:	4623      	mov	r3, r4
 800a20a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a20e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a212:	429f      	cmp	r7, r3
 800a214:	d2f9      	bcs.n	800a20a <__hexnan+0xaa>
 800a216:	1b3b      	subs	r3, r7, r4
 800a218:	f023 0303 	bic.w	r3, r3, #3
 800a21c:	3304      	adds	r3, #4
 800a21e:	3401      	adds	r4, #1
 800a220:	3e03      	subs	r6, #3
 800a222:	42b4      	cmp	r4, r6
 800a224:	bf88      	it	hi
 800a226:	2304      	movhi	r3, #4
 800a228:	4443      	add	r3, r8
 800a22a:	2200      	movs	r2, #0
 800a22c:	f843 2b04 	str.w	r2, [r3], #4
 800a230:	429f      	cmp	r7, r3
 800a232:	d2fb      	bcs.n	800a22c <__hexnan+0xcc>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	b91b      	cbnz	r3, 800a240 <__hexnan+0xe0>
 800a238:	4547      	cmp	r7, r8
 800a23a:	d128      	bne.n	800a28e <__hexnan+0x12e>
 800a23c:	2301      	movs	r3, #1
 800a23e:	603b      	str	r3, [r7, #0]
 800a240:	2005      	movs	r0, #5
 800a242:	b007      	add	sp, #28
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	3501      	adds	r5, #1
 800a24a:	2d08      	cmp	r5, #8
 800a24c:	f10b 0b01 	add.w	fp, fp, #1
 800a250:	dd06      	ble.n	800a260 <__hexnan+0x100>
 800a252:	4544      	cmp	r4, r8
 800a254:	d9c1      	bls.n	800a1da <__hexnan+0x7a>
 800a256:	2300      	movs	r3, #0
 800a258:	f844 3c04 	str.w	r3, [r4, #-4]
 800a25c:	2501      	movs	r5, #1
 800a25e:	3c04      	subs	r4, #4
 800a260:	6822      	ldr	r2, [r4, #0]
 800a262:	f000 000f 	and.w	r0, r0, #15
 800a266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a26a:	6020      	str	r0, [r4, #0]
 800a26c:	e7b5      	b.n	800a1da <__hexnan+0x7a>
 800a26e:	2508      	movs	r5, #8
 800a270:	e7b3      	b.n	800a1da <__hexnan+0x7a>
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d0dd      	beq.n	800a234 <__hexnan+0xd4>
 800a278:	f1c3 0320 	rsb	r3, r3, #32
 800a27c:	f04f 32ff 	mov.w	r2, #4294967295
 800a280:	40da      	lsrs	r2, r3
 800a282:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a286:	4013      	ands	r3, r2
 800a288:	f846 3c04 	str.w	r3, [r6, #-4]
 800a28c:	e7d2      	b.n	800a234 <__hexnan+0xd4>
 800a28e:	3f04      	subs	r7, #4
 800a290:	e7d0      	b.n	800a234 <__hexnan+0xd4>
 800a292:	2004      	movs	r0, #4
 800a294:	e7d5      	b.n	800a242 <__hexnan+0xe2>

0800a296 <__ascii_mbtowc>:
 800a296:	b082      	sub	sp, #8
 800a298:	b901      	cbnz	r1, 800a29c <__ascii_mbtowc+0x6>
 800a29a:	a901      	add	r1, sp, #4
 800a29c:	b142      	cbz	r2, 800a2b0 <__ascii_mbtowc+0x1a>
 800a29e:	b14b      	cbz	r3, 800a2b4 <__ascii_mbtowc+0x1e>
 800a2a0:	7813      	ldrb	r3, [r2, #0]
 800a2a2:	600b      	str	r3, [r1, #0]
 800a2a4:	7812      	ldrb	r2, [r2, #0]
 800a2a6:	1e10      	subs	r0, r2, #0
 800a2a8:	bf18      	it	ne
 800a2aa:	2001      	movne	r0, #1
 800a2ac:	b002      	add	sp, #8
 800a2ae:	4770      	bx	lr
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	e7fb      	b.n	800a2ac <__ascii_mbtowc+0x16>
 800a2b4:	f06f 0001 	mvn.w	r0, #1
 800a2b8:	e7f8      	b.n	800a2ac <__ascii_mbtowc+0x16>

0800a2ba <_realloc_r>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4615      	mov	r5, r2
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	b921      	cbnz	r1, 800a2d0 <_realloc_r+0x16>
 800a2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	f7fd bec2 	b.w	8008054 <_malloc_r>
 800a2d0:	b92a      	cbnz	r2, 800a2de <_realloc_r+0x24>
 800a2d2:	f7fd fe4b 	bl	8007f6c <_free_r>
 800a2d6:	2400      	movs	r4, #0
 800a2d8:	4620      	mov	r0, r4
 800a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2de:	f000 f840 	bl	800a362 <_malloc_usable_size_r>
 800a2e2:	4285      	cmp	r5, r0
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	d802      	bhi.n	800a2ee <_realloc_r+0x34>
 800a2e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2ec:	d8f4      	bhi.n	800a2d8 <_realloc_r+0x1e>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	f7fd feaf 	bl	8008054 <_malloc_r>
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d0ec      	beq.n	800a2d6 <_realloc_r+0x1c>
 800a2fc:	42b5      	cmp	r5, r6
 800a2fe:	462a      	mov	r2, r5
 800a300:	4621      	mov	r1, r4
 800a302:	bf28      	it	cs
 800a304:	4632      	movcs	r2, r6
 800a306:	f7fd f83c 	bl	8007382 <memcpy>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4640      	mov	r0, r8
 800a30e:	f7fd fe2d 	bl	8007f6c <_free_r>
 800a312:	463c      	mov	r4, r7
 800a314:	e7e0      	b.n	800a2d8 <_realloc_r+0x1e>

0800a316 <__ascii_wctomb>:
 800a316:	4603      	mov	r3, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	b141      	cbz	r1, 800a32e <__ascii_wctomb+0x18>
 800a31c:	2aff      	cmp	r2, #255	@ 0xff
 800a31e:	d904      	bls.n	800a32a <__ascii_wctomb+0x14>
 800a320:	228a      	movs	r2, #138	@ 0x8a
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	4770      	bx	lr
 800a32a:	700a      	strb	r2, [r1, #0]
 800a32c:	2001      	movs	r0, #1
 800a32e:	4770      	bx	lr

0800a330 <fiprintf>:
 800a330:	b40e      	push	{r1, r2, r3}
 800a332:	b503      	push	{r0, r1, lr}
 800a334:	4601      	mov	r1, r0
 800a336:	ab03      	add	r3, sp, #12
 800a338:	4805      	ldr	r0, [pc, #20]	@ (800a350 <fiprintf+0x20>)
 800a33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33e:	6800      	ldr	r0, [r0, #0]
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	f000 f83f 	bl	800a3c4 <_vfiprintf_r>
 800a346:	b002      	add	sp, #8
 800a348:	f85d eb04 	ldr.w	lr, [sp], #4
 800a34c:	b003      	add	sp, #12
 800a34e:	4770      	bx	lr
 800a350:	200002b4 	.word	0x200002b4

0800a354 <abort>:
 800a354:	b508      	push	{r3, lr}
 800a356:	2006      	movs	r0, #6
 800a358:	f000 fa08 	bl	800a76c <raise>
 800a35c:	2001      	movs	r0, #1
 800a35e:	f7f6 fe65 	bl	800102c <_exit>

0800a362 <_malloc_usable_size_r>:
 800a362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a366:	1f18      	subs	r0, r3, #4
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bfbc      	itt	lt
 800a36c:	580b      	ldrlt	r3, [r1, r0]
 800a36e:	18c0      	addlt	r0, r0, r3
 800a370:	4770      	bx	lr

0800a372 <__sfputc_r>:
 800a372:	6893      	ldr	r3, [r2, #8]
 800a374:	3b01      	subs	r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	b410      	push	{r4}
 800a37a:	6093      	str	r3, [r2, #8]
 800a37c:	da08      	bge.n	800a390 <__sfputc_r+0x1e>
 800a37e:	6994      	ldr	r4, [r2, #24]
 800a380:	42a3      	cmp	r3, r4
 800a382:	db01      	blt.n	800a388 <__sfputc_r+0x16>
 800a384:	290a      	cmp	r1, #10
 800a386:	d103      	bne.n	800a390 <__sfputc_r+0x1e>
 800a388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a38c:	f000 b932 	b.w	800a5f4 <__swbuf_r>
 800a390:	6813      	ldr	r3, [r2, #0]
 800a392:	1c58      	adds	r0, r3, #1
 800a394:	6010      	str	r0, [r2, #0]
 800a396:	7019      	strb	r1, [r3, #0]
 800a398:	4608      	mov	r0, r1
 800a39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <__sfputs_r>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	460f      	mov	r7, r1
 800a3a6:	4614      	mov	r4, r2
 800a3a8:	18d5      	adds	r5, r2, r3
 800a3aa:	42ac      	cmp	r4, r5
 800a3ac:	d101      	bne.n	800a3b2 <__sfputs_r+0x12>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	e007      	b.n	800a3c2 <__sfputs_r+0x22>
 800a3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b6:	463a      	mov	r2, r7
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ffda 	bl	800a372 <__sfputc_r>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	d1f3      	bne.n	800a3aa <__sfputs_r+0xa>
 800a3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3c4 <_vfiprintf_r>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	460d      	mov	r5, r1
 800a3ca:	b09d      	sub	sp, #116	@ 0x74
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	4698      	mov	r8, r3
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	b118      	cbz	r0, 800a3dc <_vfiprintf_r+0x18>
 800a3d4:	6a03      	ldr	r3, [r0, #32]
 800a3d6:	b90b      	cbnz	r3, 800a3dc <_vfiprintf_r+0x18>
 800a3d8:	f7fc feba 	bl	8007150 <__sinit>
 800a3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3de:	07d9      	lsls	r1, r3, #31
 800a3e0:	d405      	bmi.n	800a3ee <_vfiprintf_r+0x2a>
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	059a      	lsls	r2, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_vfiprintf_r+0x2a>
 800a3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ea:	f7fc ffc8 	bl	800737e <__retarget_lock_acquire_recursive>
 800a3ee:	89ab      	ldrh	r3, [r5, #12]
 800a3f0:	071b      	lsls	r3, r3, #28
 800a3f2:	d501      	bpl.n	800a3f8 <_vfiprintf_r+0x34>
 800a3f4:	692b      	ldr	r3, [r5, #16]
 800a3f6:	b99b      	cbnz	r3, 800a420 <_vfiprintf_r+0x5c>
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f000 f938 	bl	800a670 <__swsetup_r>
 800a400:	b170      	cbz	r0, 800a420 <_vfiprintf_r+0x5c>
 800a402:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a404:	07dc      	lsls	r4, r3, #31
 800a406:	d504      	bpl.n	800a412 <_vfiprintf_r+0x4e>
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	b01d      	add	sp, #116	@ 0x74
 800a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a412:	89ab      	ldrh	r3, [r5, #12]
 800a414:	0598      	lsls	r0, r3, #22
 800a416:	d4f7      	bmi.n	800a408 <_vfiprintf_r+0x44>
 800a418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a41a:	f7fc ffb1 	bl	8007380 <__retarget_lock_release_recursive>
 800a41e:	e7f3      	b.n	800a408 <_vfiprintf_r+0x44>
 800a420:	2300      	movs	r3, #0
 800a422:	9309      	str	r3, [sp, #36]	@ 0x24
 800a424:	2320      	movs	r3, #32
 800a426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a42e:	2330      	movs	r3, #48	@ 0x30
 800a430:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5e0 <_vfiprintf_r+0x21c>
 800a434:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a438:	f04f 0901 	mov.w	r9, #1
 800a43c:	4623      	mov	r3, r4
 800a43e:	469a      	mov	sl, r3
 800a440:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a444:	b10a      	cbz	r2, 800a44a <_vfiprintf_r+0x86>
 800a446:	2a25      	cmp	r2, #37	@ 0x25
 800a448:	d1f9      	bne.n	800a43e <_vfiprintf_r+0x7a>
 800a44a:	ebba 0b04 	subs.w	fp, sl, r4
 800a44e:	d00b      	beq.n	800a468 <_vfiprintf_r+0xa4>
 800a450:	465b      	mov	r3, fp
 800a452:	4622      	mov	r2, r4
 800a454:	4629      	mov	r1, r5
 800a456:	4630      	mov	r0, r6
 800a458:	f7ff ffa2 	bl	800a3a0 <__sfputs_r>
 800a45c:	3001      	adds	r0, #1
 800a45e:	f000 80a7 	beq.w	800a5b0 <_vfiprintf_r+0x1ec>
 800a462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a464:	445a      	add	r2, fp
 800a466:	9209      	str	r2, [sp, #36]	@ 0x24
 800a468:	f89a 3000 	ldrb.w	r3, [sl]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 809f 	beq.w	800a5b0 <_vfiprintf_r+0x1ec>
 800a472:	2300      	movs	r3, #0
 800a474:	f04f 32ff 	mov.w	r2, #4294967295
 800a478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a47c:	f10a 0a01 	add.w	sl, sl, #1
 800a480:	9304      	str	r3, [sp, #16]
 800a482:	9307      	str	r3, [sp, #28]
 800a484:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a488:	931a      	str	r3, [sp, #104]	@ 0x68
 800a48a:	4654      	mov	r4, sl
 800a48c:	2205      	movs	r2, #5
 800a48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a492:	4853      	ldr	r0, [pc, #332]	@ (800a5e0 <_vfiprintf_r+0x21c>)
 800a494:	f7f5 fed4 	bl	8000240 <memchr>
 800a498:	9a04      	ldr	r2, [sp, #16]
 800a49a:	b9d8      	cbnz	r0, 800a4d4 <_vfiprintf_r+0x110>
 800a49c:	06d1      	lsls	r1, r2, #27
 800a49e:	bf44      	itt	mi
 800a4a0:	2320      	movmi	r3, #32
 800a4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4a6:	0713      	lsls	r3, r2, #28
 800a4a8:	bf44      	itt	mi
 800a4aa:	232b      	movmi	r3, #43	@ 0x2b
 800a4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4b6:	d015      	beq.n	800a4e4 <_vfiprintf_r+0x120>
 800a4b8:	9a07      	ldr	r2, [sp, #28]
 800a4ba:	4654      	mov	r4, sl
 800a4bc:	2000      	movs	r0, #0
 800a4be:	f04f 0c0a 	mov.w	ip, #10
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4c8:	3b30      	subs	r3, #48	@ 0x30
 800a4ca:	2b09      	cmp	r3, #9
 800a4cc:	d94b      	bls.n	800a566 <_vfiprintf_r+0x1a2>
 800a4ce:	b1b0      	cbz	r0, 800a4fe <_vfiprintf_r+0x13a>
 800a4d0:	9207      	str	r2, [sp, #28]
 800a4d2:	e014      	b.n	800a4fe <_vfiprintf_r+0x13a>
 800a4d4:	eba0 0308 	sub.w	r3, r0, r8
 800a4d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	46a2      	mov	sl, r4
 800a4e2:	e7d2      	b.n	800a48a <_vfiprintf_r+0xc6>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	1d19      	adds	r1, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	9103      	str	r1, [sp, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bfbb      	ittet	lt
 800a4f0:	425b      	neglt	r3, r3
 800a4f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4f6:	9307      	strge	r3, [sp, #28]
 800a4f8:	9307      	strlt	r3, [sp, #28]
 800a4fa:	bfb8      	it	lt
 800a4fc:	9204      	strlt	r2, [sp, #16]
 800a4fe:	7823      	ldrb	r3, [r4, #0]
 800a500:	2b2e      	cmp	r3, #46	@ 0x2e
 800a502:	d10a      	bne.n	800a51a <_vfiprintf_r+0x156>
 800a504:	7863      	ldrb	r3, [r4, #1]
 800a506:	2b2a      	cmp	r3, #42	@ 0x2a
 800a508:	d132      	bne.n	800a570 <_vfiprintf_r+0x1ac>
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	1d1a      	adds	r2, r3, #4
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	9203      	str	r2, [sp, #12]
 800a512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a516:	3402      	adds	r4, #2
 800a518:	9305      	str	r3, [sp, #20]
 800a51a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5f0 <_vfiprintf_r+0x22c>
 800a51e:	7821      	ldrb	r1, [r4, #0]
 800a520:	2203      	movs	r2, #3
 800a522:	4650      	mov	r0, sl
 800a524:	f7f5 fe8c 	bl	8000240 <memchr>
 800a528:	b138      	cbz	r0, 800a53a <_vfiprintf_r+0x176>
 800a52a:	9b04      	ldr	r3, [sp, #16]
 800a52c:	eba0 000a 	sub.w	r0, r0, sl
 800a530:	2240      	movs	r2, #64	@ 0x40
 800a532:	4082      	lsls	r2, r0
 800a534:	4313      	orrs	r3, r2
 800a536:	3401      	adds	r4, #1
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53e:	4829      	ldr	r0, [pc, #164]	@ (800a5e4 <_vfiprintf_r+0x220>)
 800a540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a544:	2206      	movs	r2, #6
 800a546:	f7f5 fe7b 	bl	8000240 <memchr>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d03f      	beq.n	800a5ce <_vfiprintf_r+0x20a>
 800a54e:	4b26      	ldr	r3, [pc, #152]	@ (800a5e8 <_vfiprintf_r+0x224>)
 800a550:	bb1b      	cbnz	r3, 800a59a <_vfiprintf_r+0x1d6>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	3307      	adds	r3, #7
 800a556:	f023 0307 	bic.w	r3, r3, #7
 800a55a:	3308      	adds	r3, #8
 800a55c:	9303      	str	r3, [sp, #12]
 800a55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a560:	443b      	add	r3, r7
 800a562:	9309      	str	r3, [sp, #36]	@ 0x24
 800a564:	e76a      	b.n	800a43c <_vfiprintf_r+0x78>
 800a566:	fb0c 3202 	mla	r2, ip, r2, r3
 800a56a:	460c      	mov	r4, r1
 800a56c:	2001      	movs	r0, #1
 800a56e:	e7a8      	b.n	800a4c2 <_vfiprintf_r+0xfe>
 800a570:	2300      	movs	r3, #0
 800a572:	3401      	adds	r4, #1
 800a574:	9305      	str	r3, [sp, #20]
 800a576:	4619      	mov	r1, r3
 800a578:	f04f 0c0a 	mov.w	ip, #10
 800a57c:	4620      	mov	r0, r4
 800a57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a582:	3a30      	subs	r2, #48	@ 0x30
 800a584:	2a09      	cmp	r2, #9
 800a586:	d903      	bls.n	800a590 <_vfiprintf_r+0x1cc>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0c6      	beq.n	800a51a <_vfiprintf_r+0x156>
 800a58c:	9105      	str	r1, [sp, #20]
 800a58e:	e7c4      	b.n	800a51a <_vfiprintf_r+0x156>
 800a590:	fb0c 2101 	mla	r1, ip, r1, r2
 800a594:	4604      	mov	r4, r0
 800a596:	2301      	movs	r3, #1
 800a598:	e7f0      	b.n	800a57c <_vfiprintf_r+0x1b8>
 800a59a:	ab03      	add	r3, sp, #12
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	462a      	mov	r2, r5
 800a5a0:	4b12      	ldr	r3, [pc, #72]	@ (800a5ec <_vfiprintf_r+0x228>)
 800a5a2:	a904      	add	r1, sp, #16
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7fb ff93 	bl	80064d0 <_printf_float>
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	1c78      	adds	r0, r7, #1
 800a5ae:	d1d6      	bne.n	800a55e <_vfiprintf_r+0x19a>
 800a5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5b2:	07d9      	lsls	r1, r3, #31
 800a5b4:	d405      	bmi.n	800a5c2 <_vfiprintf_r+0x1fe>
 800a5b6:	89ab      	ldrh	r3, [r5, #12]
 800a5b8:	059a      	lsls	r2, r3, #22
 800a5ba:	d402      	bmi.n	800a5c2 <_vfiprintf_r+0x1fe>
 800a5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5be:	f7fc fedf 	bl	8007380 <__retarget_lock_release_recursive>
 800a5c2:	89ab      	ldrh	r3, [r5, #12]
 800a5c4:	065b      	lsls	r3, r3, #25
 800a5c6:	f53f af1f 	bmi.w	800a408 <_vfiprintf_r+0x44>
 800a5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5cc:	e71e      	b.n	800a40c <_vfiprintf_r+0x48>
 800a5ce:	ab03      	add	r3, sp, #12
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	4b05      	ldr	r3, [pc, #20]	@ (800a5ec <_vfiprintf_r+0x228>)
 800a5d6:	a904      	add	r1, sp, #16
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f7fc fa01 	bl	80069e0 <_printf_i>
 800a5de:	e7e4      	b.n	800a5aa <_vfiprintf_r+0x1e6>
 800a5e0:	0800ac71 	.word	0x0800ac71
 800a5e4:	0800ac7b 	.word	0x0800ac7b
 800a5e8:	080064d1 	.word	0x080064d1
 800a5ec:	0800a3a1 	.word	0x0800a3a1
 800a5f0:	0800ac77 	.word	0x0800ac77

0800a5f4 <__swbuf_r>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	460e      	mov	r6, r1
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	b118      	cbz	r0, 800a606 <__swbuf_r+0x12>
 800a5fe:	6a03      	ldr	r3, [r0, #32]
 800a600:	b90b      	cbnz	r3, 800a606 <__swbuf_r+0x12>
 800a602:	f7fc fda5 	bl	8007150 <__sinit>
 800a606:	69a3      	ldr	r3, [r4, #24]
 800a608:	60a3      	str	r3, [r4, #8]
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	071a      	lsls	r2, r3, #28
 800a60e:	d501      	bpl.n	800a614 <__swbuf_r+0x20>
 800a610:	6923      	ldr	r3, [r4, #16]
 800a612:	b943      	cbnz	r3, 800a626 <__swbuf_r+0x32>
 800a614:	4621      	mov	r1, r4
 800a616:	4628      	mov	r0, r5
 800a618:	f000 f82a 	bl	800a670 <__swsetup_r>
 800a61c:	b118      	cbz	r0, 800a626 <__swbuf_r+0x32>
 800a61e:	f04f 37ff 	mov.w	r7, #4294967295
 800a622:	4638      	mov	r0, r7
 800a624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	6922      	ldr	r2, [r4, #16]
 800a62a:	1a98      	subs	r0, r3, r2
 800a62c:	6963      	ldr	r3, [r4, #20]
 800a62e:	b2f6      	uxtb	r6, r6
 800a630:	4283      	cmp	r3, r0
 800a632:	4637      	mov	r7, r6
 800a634:	dc05      	bgt.n	800a642 <__swbuf_r+0x4e>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f7ff fa55 	bl	8009ae8 <_fflush_r>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d1ed      	bne.n	800a61e <__swbuf_r+0x2a>
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	3b01      	subs	r3, #1
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	6022      	str	r2, [r4, #0]
 800a64e:	701e      	strb	r6, [r3, #0]
 800a650:	6962      	ldr	r2, [r4, #20]
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	429a      	cmp	r2, r3
 800a656:	d004      	beq.n	800a662 <__swbuf_r+0x6e>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	07db      	lsls	r3, r3, #31
 800a65c:	d5e1      	bpl.n	800a622 <__swbuf_r+0x2e>
 800a65e:	2e0a      	cmp	r6, #10
 800a660:	d1df      	bne.n	800a622 <__swbuf_r+0x2e>
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f7ff fa3f 	bl	8009ae8 <_fflush_r>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0d9      	beq.n	800a622 <__swbuf_r+0x2e>
 800a66e:	e7d6      	b.n	800a61e <__swbuf_r+0x2a>

0800a670 <__swsetup_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4b29      	ldr	r3, [pc, #164]	@ (800a718 <__swsetup_r+0xa8>)
 800a674:	4605      	mov	r5, r0
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	460c      	mov	r4, r1
 800a67a:	b118      	cbz	r0, 800a684 <__swsetup_r+0x14>
 800a67c:	6a03      	ldr	r3, [r0, #32]
 800a67e:	b90b      	cbnz	r3, 800a684 <__swsetup_r+0x14>
 800a680:	f7fc fd66 	bl	8007150 <__sinit>
 800a684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a688:	0719      	lsls	r1, r3, #28
 800a68a:	d422      	bmi.n	800a6d2 <__swsetup_r+0x62>
 800a68c:	06da      	lsls	r2, r3, #27
 800a68e:	d407      	bmi.n	800a6a0 <__swsetup_r+0x30>
 800a690:	2209      	movs	r2, #9
 800a692:	602a      	str	r2, [r5, #0]
 800a694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	f04f 30ff 	mov.w	r0, #4294967295
 800a69e:	e033      	b.n	800a708 <__swsetup_r+0x98>
 800a6a0:	0758      	lsls	r0, r3, #29
 800a6a2:	d512      	bpl.n	800a6ca <__swsetup_r+0x5a>
 800a6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6a6:	b141      	cbz	r1, 800a6ba <__swsetup_r+0x4a>
 800a6a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6ac:	4299      	cmp	r1, r3
 800a6ae:	d002      	beq.n	800a6b6 <__swsetup_r+0x46>
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f7fd fc5b 	bl	8007f6c <_free_r>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f043 0308 	orr.w	r3, r3, #8
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	6923      	ldr	r3, [r4, #16]
 800a6d4:	b94b      	cbnz	r3, 800a6ea <__swsetup_r+0x7a>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6e0:	d003      	beq.n	800a6ea <__swsetup_r+0x7a>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f000 f883 	bl	800a7f0 <__smakebuf_r>
 800a6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ee:	f013 0201 	ands.w	r2, r3, #1
 800a6f2:	d00a      	beq.n	800a70a <__swsetup_r+0x9a>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	60a2      	str	r2, [r4, #8]
 800a6f8:	6962      	ldr	r2, [r4, #20]
 800a6fa:	4252      	negs	r2, r2
 800a6fc:	61a2      	str	r2, [r4, #24]
 800a6fe:	6922      	ldr	r2, [r4, #16]
 800a700:	b942      	cbnz	r2, 800a714 <__swsetup_r+0xa4>
 800a702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a706:	d1c5      	bne.n	800a694 <__swsetup_r+0x24>
 800a708:	bd38      	pop	{r3, r4, r5, pc}
 800a70a:	0799      	lsls	r1, r3, #30
 800a70c:	bf58      	it	pl
 800a70e:	6962      	ldrpl	r2, [r4, #20]
 800a710:	60a2      	str	r2, [r4, #8]
 800a712:	e7f4      	b.n	800a6fe <__swsetup_r+0x8e>
 800a714:	2000      	movs	r0, #0
 800a716:	e7f7      	b.n	800a708 <__swsetup_r+0x98>
 800a718:	200002b4 	.word	0x200002b4

0800a71c <_raise_r>:
 800a71c:	291f      	cmp	r1, #31
 800a71e:	b538      	push	{r3, r4, r5, lr}
 800a720:	4605      	mov	r5, r0
 800a722:	460c      	mov	r4, r1
 800a724:	d904      	bls.n	800a730 <_raise_r+0x14>
 800a726:	2316      	movs	r3, #22
 800a728:	6003      	str	r3, [r0, #0]
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a732:	b112      	cbz	r2, 800a73a <_raise_r+0x1e>
 800a734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a738:	b94b      	cbnz	r3, 800a74e <_raise_r+0x32>
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 f830 	bl	800a7a0 <_getpid_r>
 800a740:	4622      	mov	r2, r4
 800a742:	4601      	mov	r1, r0
 800a744:	4628      	mov	r0, r5
 800a746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a74a:	f000 b817 	b.w	800a77c <_kill_r>
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d00a      	beq.n	800a768 <_raise_r+0x4c>
 800a752:	1c59      	adds	r1, r3, #1
 800a754:	d103      	bne.n	800a75e <_raise_r+0x42>
 800a756:	2316      	movs	r3, #22
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	2001      	movs	r0, #1
 800a75c:	e7e7      	b.n	800a72e <_raise_r+0x12>
 800a75e:	2100      	movs	r1, #0
 800a760:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a764:	4620      	mov	r0, r4
 800a766:	4798      	blx	r3
 800a768:	2000      	movs	r0, #0
 800a76a:	e7e0      	b.n	800a72e <_raise_r+0x12>

0800a76c <raise>:
 800a76c:	4b02      	ldr	r3, [pc, #8]	@ (800a778 <raise+0xc>)
 800a76e:	4601      	mov	r1, r0
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f7ff bfd3 	b.w	800a71c <_raise_r>
 800a776:	bf00      	nop
 800a778:	200002b4 	.word	0x200002b4

0800a77c <_kill_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d07      	ldr	r5, [pc, #28]	@ (800a79c <_kill_r+0x20>)
 800a780:	2300      	movs	r3, #0
 800a782:	4604      	mov	r4, r0
 800a784:	4608      	mov	r0, r1
 800a786:	4611      	mov	r1, r2
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	f7f6 fc3f 	bl	800100c <_kill>
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	d102      	bne.n	800a798 <_kill_r+0x1c>
 800a792:	682b      	ldr	r3, [r5, #0]
 800a794:	b103      	cbz	r3, 800a798 <_kill_r+0x1c>
 800a796:	6023      	str	r3, [r4, #0]
 800a798:	bd38      	pop	{r3, r4, r5, pc}
 800a79a:	bf00      	nop
 800a79c:	20000abc 	.word	0x20000abc

0800a7a0 <_getpid_r>:
 800a7a0:	f7f6 bc2c 	b.w	8000ffc <_getpid>

0800a7a4 <__swhatbuf_r>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	b096      	sub	sp, #88	@ 0x58
 800a7b0:	4615      	mov	r5, r2
 800a7b2:	461e      	mov	r6, r3
 800a7b4:	da0d      	bge.n	800a7d2 <__swhatbuf_r+0x2e>
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7bc:	f04f 0100 	mov.w	r1, #0
 800a7c0:	bf14      	ite	ne
 800a7c2:	2340      	movne	r3, #64	@ 0x40
 800a7c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	6031      	str	r1, [r6, #0]
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	b016      	add	sp, #88	@ 0x58
 800a7d0:	bd70      	pop	{r4, r5, r6, pc}
 800a7d2:	466a      	mov	r2, sp
 800a7d4:	f000 f848 	bl	800a868 <_fstat_r>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	dbec      	blt.n	800a7b6 <__swhatbuf_r+0x12>
 800a7dc:	9901      	ldr	r1, [sp, #4]
 800a7de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7e6:	4259      	negs	r1, r3
 800a7e8:	4159      	adcs	r1, r3
 800a7ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ee:	e7eb      	b.n	800a7c8 <__swhatbuf_r+0x24>

0800a7f0 <__smakebuf_r>:
 800a7f0:	898b      	ldrh	r3, [r1, #12]
 800a7f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7f4:	079d      	lsls	r5, r3, #30
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	d507      	bpl.n	800a80c <__smakebuf_r+0x1c>
 800a7fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	6123      	str	r3, [r4, #16]
 800a804:	2301      	movs	r3, #1
 800a806:	6163      	str	r3, [r4, #20]
 800a808:	b003      	add	sp, #12
 800a80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a80c:	ab01      	add	r3, sp, #4
 800a80e:	466a      	mov	r2, sp
 800a810:	f7ff ffc8 	bl	800a7a4 <__swhatbuf_r>
 800a814:	9f00      	ldr	r7, [sp, #0]
 800a816:	4605      	mov	r5, r0
 800a818:	4639      	mov	r1, r7
 800a81a:	4630      	mov	r0, r6
 800a81c:	f7fd fc1a 	bl	8008054 <_malloc_r>
 800a820:	b948      	cbnz	r0, 800a836 <__smakebuf_r+0x46>
 800a822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a826:	059a      	lsls	r2, r3, #22
 800a828:	d4ee      	bmi.n	800a808 <__smakebuf_r+0x18>
 800a82a:	f023 0303 	bic.w	r3, r3, #3
 800a82e:	f043 0302 	orr.w	r3, r3, #2
 800a832:	81a3      	strh	r3, [r4, #12]
 800a834:	e7e2      	b.n	800a7fc <__smakebuf_r+0xc>
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	6020      	str	r0, [r4, #0]
 800a83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a846:	b15b      	cbz	r3, 800a860 <__smakebuf_r+0x70>
 800a848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a84c:	4630      	mov	r0, r6
 800a84e:	f000 f81d 	bl	800a88c <_isatty_r>
 800a852:	b128      	cbz	r0, 800a860 <__smakebuf_r+0x70>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f023 0303 	bic.w	r3, r3, #3
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	431d      	orrs	r5, r3
 800a864:	81a5      	strh	r5, [r4, #12]
 800a866:	e7cf      	b.n	800a808 <__smakebuf_r+0x18>

0800a868 <_fstat_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d07      	ldr	r5, [pc, #28]	@ (800a888 <_fstat_r+0x20>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	4611      	mov	r1, r2
 800a874:	602b      	str	r3, [r5, #0]
 800a876:	f7f6 fc29 	bl	80010cc <_fstat>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d102      	bne.n	800a884 <_fstat_r+0x1c>
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	b103      	cbz	r3, 800a884 <_fstat_r+0x1c>
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	bd38      	pop	{r3, r4, r5, pc}
 800a886:	bf00      	nop
 800a888:	20000abc 	.word	0x20000abc

0800a88c <_isatty_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4d06      	ldr	r5, [pc, #24]	@ (800a8a8 <_isatty_r+0x1c>)
 800a890:	2300      	movs	r3, #0
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	602b      	str	r3, [r5, #0]
 800a898:	f7f6 fc28 	bl	80010ec <_isatty>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_isatty_r+0x1a>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_isatty_r+0x1a>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	20000abc 	.word	0x20000abc

0800a8ac <_init>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	bf00      	nop
 800a8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b2:	bc08      	pop	{r3}
 800a8b4:	469e      	mov	lr, r3
 800a8b6:	4770      	bx	lr

0800a8b8 <_fini>:
 800a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ba:	bf00      	nop
 800a8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8be:	bc08      	pop	{r3}
 800a8c0:	469e      	mov	lr, r3
 800a8c2:	4770      	bx	lr
